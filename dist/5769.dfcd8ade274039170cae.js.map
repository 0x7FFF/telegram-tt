{"version":3,"file":"5769.dfcd8ade274039170cae.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/helpers/webpageType.ts","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/AvatarList.module.scss?00d4","webpack://telegram-t/./src/components/common/AvatarList.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n  removeChatFromChatLists,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isActionMessage,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName, isChatChannel,\n  isDeletedUser, isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  if (!messageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = messageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    currentThreadId: messageList.threadId,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        currentThreadId: toThreadId || MAIN_THREAD_ID,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId) || {};\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  currentThreadId: number;\n  replyingToTopId?: number;\n  groupedId?: string;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  if (params.currentThreadId === undefined) {\n    return;\n  }\n\n  if (!params.replyingTo && params.currentThreadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, params.currentThreadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && params.currentThreadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, params.currentThreadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectBot,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId, selectUserFullInfo,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { translate } from '../../../util/langProvider';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n  const replyingToTopId = (chat.isForum || threadId !== MAIN_THREAD_ID)\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: replyingToId || replyingToTopId,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockContact', bot.id, bot.accessHash);\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  isSameReaction, getUserReactions, isMessageLocal, getDocumentMediaHash,\n} from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const tabState = selectTabState(global, tabId);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat, selectChatFullInfo } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n  cancelMessageMediaDownload,\n  addActiveMessageMediaDownload,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n  selectPinnedIds,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE, IS_ELECTRON,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  if (IS_ELECTRON) {\n    return;\n  }\n\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsAppUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { SettingsScreens } from '../../../types';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport {\n  deleteContact, replaceUserStatuses, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nimport useLastCallback from './useLastCallback';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  const lastCallback = useLastCallback(callback);\n\n  useEffect(() => onBeforeUnload(lastCallback), [lastCallback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  APP_NAME,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_ELECTRON,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_APP } from '../../../util/windowEnvironment';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\nimport Toggle from '../../ui/Toggle';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'>\n  & Pick<TabState, 'canInstall'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    updatePerformanceSettings,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid')\n    : 'min';\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevelValue, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            chatOrUserId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,\n    } = global;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite } from '../../../api/types';\nimport type { SettingsScreens, LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\n\nimport { IS_MAC_OS, IS_APP, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isUpdateAvailable={isUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useLayoutEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const { handleClick: handleHeaderClick, handleMouseDown: handleHeaderMouseDown } = useFastClick(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions, REM } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst SMALL_IMAGE_THRESHOLD = 12;\nconst MIN_MESSAGE_LENGTH_FOR_BLUR = 40;\nexport const MIN_MEDIA_WIDTH_WITH_TEXT = 20 * REM;\nconst MIN_MEDIA_WIDTH = SMALL_IMAGE_THRESHOLD * REM;\nexport const MIN_MEDIA_HEIGHT = 5 * REM;\n\nexport function getMinMediaWidth(text?: string, hasCommentButton?: boolean) {\n  return (text?.length ?? 0) > MIN_MESSAGE_LENGTH_FOR_BLUR || hasCommentButton\n    ? MIN_MEDIA_WIDTH_WITH_TEXT\n    : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const messageText = getMessageText(message);\n  const minMediaWidth = getMinMediaWidth(messageText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport animateScroll from '../../../../util/animateScroll';\n\n// This is used when the viewport was replaced.\nconst BOTTOM_FOCUS_OFFSET = 500;\nconst RELOCATED_FOCUS_OFFSET = 750;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n  isJustAdded?: boolean,\n) {\n  const isRelocatedRef = useRef(!isJustAdded);\n\n  useLayoutEffect(() => {\n    const isRelocated = isRelocatedRef.current;\n    isRelocatedRef.current = false;\n\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n      // `noFocusHighlight` is always called with “scroll-to-bottom” buttons\n      const isToBottom = noFocusHighlight;\n\n      const exec = () => animateScroll(\n        messagesContainer,\n        elementRef.current!,\n        isToBottom ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? (isToBottom ? BOTTOM_FOCUS_OFFSET : RELOCATED_FOCUS_OFFSET) : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n        true,\n      );\n\n      if (isRelocated) {\n        // We need this to override scroll setting from Message List layout effect\n        requestForcedReflow(exec);\n      } else {\n        requestMeasure(() => {\n          requestMutation(exec()!);\n        });\n      }\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default ContextMenuContainerAsync;\n","import React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  renderContent: () => TextPart | undefined;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  renderContent,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useLastCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  });\n\n  const handleSetSuggestedAvatar = useLastCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  });\n\n  const handleCloseCropModal = useLastCallback(() => {\n    setCropModalBlob(undefined);\n  });\n\n  const handleSetVideo = useLastCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  });\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{renderContent()}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={renderContent()}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTopic, ApiUser,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectTabState,\n  selectTopicFromMessage,\n  selectUser,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: number;\n  messageListType?: MessageListType;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  onPinnedIntersectionChange?: PinnedIntersectionChangedCallback;\n};\n\ntype StateProps = {\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isJustAdded,\n  isLastInList,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  canPlayAnimatedEmojis,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onPinnedIntersectionChange,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight, isJustAdded);\n\n  useEffect(() => {\n    if (!message.isPinned) return undefined;\n\n    return () => {\n      onPinnedIntersectionChange?.({ viewportPinnedIdsToRemove: [message.id], isUnmount: true });\n    };\n  }, [onPinnedIntersectionChange, message.isPinned, message.id]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const renderContent = useCallback(() => {\n    return renderActionMessageText(\n      lang,\n      message,\n      senderUser,\n      senderChat,\n      targetUsers,\n      targetMessage,\n      targetChatId,\n      topic,\n      { isEmbedded },\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    );\n  }, [\n    isEmbedded, lang, message, observeIntersectionForLoading, observeIntersectionForPlaying,\n    senderChat, senderUser, targetChatId, targetMessage, targetUsers, topic,\n  ]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{renderContent()}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play={canPlayAnimatedEmojis}\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{renderContent()}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          renderContent={renderContent}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const {\n      chatId, senderId, replyToMessageId, content,\n    } = message;\n\n    const userId = senderId;\n    const { targetUserIds, targetChatId } = content.action || {};\n    const targetMessageId = replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n      }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message && handleClick}\n      onMouseDown={message && handleMouseDown}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getActions } from '../../../global';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/windowEnvironment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(\n  message: ApiMessage,\n  isDisabled?: boolean | string,\n  forcedUri?: string,\n) {\n  const { isMobile } = useAppLayout();\n\n  const dataUri = forcedUri || getMessageMediaThumbDataUri(message);\n\n  return useCanvasBlur(\n    dataUri,\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, { useRef, useState } from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions, MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  forcedWidth,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const withBlurredBackground = Boolean(forcedWidth);\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useLastCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  });\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      <img\n        src={fullMediaData}\n        className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton\n        && <i className={buildClassName('icon', 'icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import React, { useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  forcedWidth,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(Boolean(canAutoPlay && !isSpoilerShown));\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'),\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n  const withBlurredBackground = Boolean(forcedWidth);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  });\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useLastCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  });\n\n  const className = buildClassName(\n    'media-inner dark',\n    !isUploading && 'interactive',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames, withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px;` : undefined}\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon', 'icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, useRef, useLayoutEffect,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useLayoutEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"micro\"\n              peer={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { getWebpageButtonText } from './helpers/webpageType';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Button from '../../ui/Button';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const { openTelegramLink } = getActions();\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const lang = useLang();\n\n  const handleMediaClick = useLastCallback(() => {\n    onMediaClick!();\n  });\n\n  const handleQuickButtonClick = useLastCallback(() => {\n    if (!webPage) return;\n    openTelegramLink({\n      url: webPage.url,\n    });\n  });\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n    type,\n  } = webPage;\n  const quickButtonLangKey = !inPreview ? getWebpageButtonText(type) : undefined;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n    quickButtonLangKey && 'with-quick-button',\n  );\n\n  function renderQuickButton(langKey: string) {\n    return (\n      <Button\n        className=\"WebPage--quick-button\"\n        size=\"tiny\"\n        color=\"translucent-bordered\"\n        onClick={handleQuickButtonClick}\n      >\n        {lang(langKey)}\n      </Button>\n    );\n  }\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      <div className=\"WebPage--content\">\n        {photo && !video && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersection}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            size={isSquarePhoto ? 'pictogram' : 'inline'}\n            asForwarded={asForwarded}\n            nonInteractive={!isMediaInteractive}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {isArticle && (\n          <div className=\"WebPage-text\">\n            <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n            {!inPreview && title && (\n              <p className=\"site-title\">{renderText(title)}</p>\n            )}\n            {truncatedDescription && (\n              <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n            )}\n          </div>\n        )}\n        {!inPreview && video && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersection!}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            canAutoPlay={canAutoPlay}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n      </div>\n      {quickButtonLangKey && renderQuickButton(quickButtonLangKey)}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","// https://github.com/telegramdesktop/tdesktop/blob/3da787791f6d227f69b32bf4003bc6071d05e2ac/Telegram/SourceFiles/history/view/history_view_view_button.cpp#L51\nexport function getWebpageButtonText(type?: string) {\n  switch (type) {\n    case 'telegram_channel_request':\n    case 'telegram_megagroup_request':\n    case 'telegram_chat_request':\n      return 'lng_view_button_request_join';\n    case 'telegram_message':\n      return 'lng_view_button_message';\n    case 'telegram_bot':\n      return 'lng_view_button_bot';\n    case 'telegram_voicechat':\n      return 'lng_view_button_voice_chat';\n    case 'telegram_livestream':\n      return 'lng_view_button_voice_chat_channel';\n    case 'telegram_megagroup':\n    case 'telegram_chat':\n      return 'lng_view_button_group';\n    case 'telegram_channel':\n      return 'lng_view_button_channel';\n    case 'telegram_user':\n      return 'lng_view_button_user';\n    case 'telegram_botapp':\n      return 'lng_view_button_bot_app';\n    case 'telegram_chatlist':\n      return 'ViewChatList';\n    default:\n      return undefined;\n  }\n}\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={forcedWidth || photo.dimensions?.width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg xmlns=\"http://www.w3.org/2000/svg\" xml:space=\"preserve\" class=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\"><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\"/><path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\"/><path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\"/></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n            <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { useMemo, memo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useSignal from '../../../hooks/useSignal';\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - getThrottledProgress() * circumference;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    requestMutation(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiThreadInfo,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ahi3up0oMwlFJTE6hkxG\",\"size-micro\":\"DOhAE8mniLY2g2i7rkfz\",\"sizeMicro\":\"DOhAE8mniLY2g2i7rkfz\",\"size-mini\":\"gF82cRdQRxqmTN8fLb9i\",\"sizeMini\":\"gF82cRdQRxqmTN8fLb9i\",\"size-tiny\":\"ecJbjvbrCkoUdtVrdBYi\",\"sizeTiny\":\"ecJbjvbrCkoUdtVrdBYi\",\"size-small\":\"iaKZOfQnH3hROD8QK_fq\",\"sizeSmall\":\"iaKZOfQnH3hROD8QK_fq\",\"size-small-mobile\":\"YP90v9JGup97HOcD2duf\",\"sizeSmallMobile\":\"YP90v9JGup97HOcD2duf\",\"size-medium\":\"TmYXjEqVbt0gwaoWlRHv\",\"sizeMedium\":\"TmYXjEqVbt0gwaoWlRHv\",\"size-large\":\"YIuShtdEPpbCXrGgmeFv\",\"sizeLarge\":\"YIuShtdEPpbCXrGgmeFv\",\"size-jumbo\":\"D9X7fMnC8YtoUm_wjoSA\",\"sizeJumbo\":\"D9X7fMnC8YtoUm_wjoSA\",\"avatar\":\"PTpUqAuoZL9Uou6MqJXX\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { AvatarSize } from './Avatar';\nimport type { ApiChat, ApiUser } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from './Avatar';\n\nimport styles from './AvatarList.module.scss';\n\ntype OwnProps = {\n  size: AvatarSize;\n  peers?: (ApiUser | ApiChat)[];\n};\n\nconst AvatarList: FC<OwnProps> = ({\n  peers,\n  size,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles[`size-${size}`])}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {peers?.map((peer) => <Avatar size={size} peer={peer} className={styles.avatar} />)}\n    </div>\n  );\n};\n\nexport default memo(AvatarList);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  withEffects?: boolean;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n  withEffects,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const { customEmoji } = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(withEffects && activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useLastCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  });\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  withEffects?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  withEffects,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n        withEffects={withEffects}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  withEffects?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n  withEffects,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n          withEffects={withEffects}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport type {\n  ActiveEmojiInteraction,\n  ActiveReaction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiReaction,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiUser,\n  ApiUsername,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport { AudioOrigin } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID, IS_ELECTRON } from '../../../config';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedTranslationLanguage,\n  selectSender,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageLocation,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isOwnMessage,\n  isReplyMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport {\n  calculateMediaDimensions,\n  getMinMediaWidth,\n  MIN_MEDIA_WIDTH_WITH_TEXT,\n} from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n  withReactionEffects?: boolean;\n  withStickerEffects?: boolean;\n  isConnected: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n  withReactionEffects,\n  withStickerEffects,\n  isConnected,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, isTouchScreen && isInSelectMode, !IS_ELECTRON, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || (location && location.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let reactionsMaxWidth;\n  let contentWidth: number | undefined;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n        contentWidth = width;\n      }\n      calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n    reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n  } else if (sticker && !hasSubheader) {\n    const { width } = getStickerDimensions(sticker, isMobile);\n    style = `width: ${width + extraPadding}px`;\n    reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    activeReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        withEffects={withReactionEffects}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            withEffects={withReactionEffects}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withReactionEffects: selectPerformanceSettingsValue(global, 'reactionEffects'),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      isConnected,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { useState } from '../lib/teact/teact';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useTextLanguage(text?: string) {\n  const [language, setLanguage] = useState<string>();\n\n  useSyncEffect(() => {\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    }\n  }, [text]);\n\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiBotInfo } from '../../api/types';\n\nimport { DPR } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport buildStyle from '../../util/buildStyle';\nimport buildClassName from '../../util/buildClassName';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\"};","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { Signal } from '../../util/signals';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\nimport { isLocalMessageId } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = isLocalMessageId(messageIds[0]);\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback((selectedSticker: ApiSticker) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker, messageList: currentMessageList });\n  });\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { requestForcedReflow, forceMeasure, requestMeasure } from '../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectBot,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n  selectLastScrollOffset,\n  selectThreadInfo,\n  selectTabState,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  isLocalMessageId,\n  getMessageHtmlId,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll from '../../util/resetScroll';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport { isBackgroundModeActive } from '../../hooks/useBackgroundMode';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport MessageListBotInfo from './MessageListBotInfo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  threadTopMessageId?: number;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  threadTopMessageId,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport animateScroll from '../../util/animateScroll';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst MAX_THUMB_IMG_SIZE = 40; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    const shouldShrinkPreview = Math.max(width, height) > MAX_THUMB_IMG_SIZE;\n    if (shouldShrinkPreview) {\n      previewBlobUrl = await scaleImage(\n        blobUrl, MAX_THUMB_IMG_SIZE / Math.max(width, height), 'image/jpeg',\n      );\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    if (!shouldSendAsFile) {\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { IS_IOS } from '../../../../util/windowEnvironment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/windowEnvironment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestMeasure(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { StateHookSetter } from '../../../../lib/teact/teact';\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\nconst TYPE_HTML = 'text/html';\nconst DOCUMENT_TYPE_WORD = 'urn:schemas-microsoft-com:office:word';\nconst NAMESPACE_PREFIX_WORD = 'xmlns:w';\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  setNextText: StateHookSetter<ApiFormattedText | undefined>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      let isWordDocument = false;\n      try {\n        const parser = new DOMParser();\n        const parsedDocument = parser.parseFromString(html, TYPE_HTML);\n        isWordDocument = parsedDocument.documentElement\n          .getAttribute(NAMESPACE_PREFIX_WORD) === DOCUMENT_TYPE_WORD;\n      } catch (err: any) {\n        // Ignore\n      }\n\n      const hasText = textToPaste && textToPaste.text;\n      const shouldSetAttachments = files?.length && !editedMessage && !isWordDocument;\n\n      if (shouldSetAttachments) {\n        const newAttachments = await Promise.all(files!.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (hasText) {\n        if (shouldSetAttachments) {\n          setNextText(textToPaste);\n        } else {\n          insertTextAndUpdateCursor(textToPaste, input?.id);\n        }\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n    setNextText,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst URL_ENTITIES = new Set<string>([ApiMessageEntityTypes.TextUrl, ApiMessageEntityTypes.Url]);\nconst DEBOUNCE_MS = 300;\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft, toggleMessageWebPage } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState(false);\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n\n    requestNextMutation(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, replyingToId, editingDraft, setHtml]);\n\n  useEffect(() => {\n    if (!editedMessage) {\n      return;\n    }\n\n    const shouldSetNoWebPage = !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type));\n\n    toggleMessageWebPage({\n      chatId,\n      threadId,\n      noWebPage: shouldSetNoWebPage,\n    });\n  }, [chatId, threadId, editedMessage]);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    if (!editedMessage) return false;\n\n    const edited = parseMessageInput(getHtml());\n    return !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type))\n      && !(edited.entities?.some((entity) => URL_ENTITIES.has(entity.type)));\n  }, [editedMessage, getHtml], DEBOUNCE_MS, true);\n\n  const getShouldResetNoWebPageDebounced = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage || prevEditedMessage?.id !== editedMessage.id) {\n      return;\n    }\n\n    if (getShouldResetNoWebPageDebounced()) {\n      toggleMessageWebPage({\n        chatId,\n        threadId,\n        noWebPage: false,\n      });\n    }\n  }, [editedMessage, chatId, getHtml, threadId, getShouldResetNoWebPageDebounced]);\n\n  const restoreNewDraftAfterEditing = useLastCallback(() => {\n    if (!draft) return;\n\n    // Run one frame after editing draft reset\n    requestMeasure(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n\n      // Wait one more frame until new HTML is rendered\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    });\n  });\n\n  const handleEditCancel = useLastCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleEditComplete = useLastCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageList: { chatId, threadId, type },\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleBlur = useLastCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  });\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n  }, [username, resetInlineBot]);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    switchWebview,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useLastCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  });\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    switchWebview,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n  insertNextText,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n  insertNextText: VoidFunction;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useLastCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n    insertNextText();\n  });\n\n  const handleSetAttachments = useLastCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    },\n  );\n\n  const handleAppendFiles = useLastCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  });\n\n  const handleFileSelect = useLastCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  });\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (attachment.shouldSendAsFile) return 'file';\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n\n  requestMeasure(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useLastCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  });\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis]);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  function forceUpdateDraft() {\n    updateDraft(undefined, true);\n  }\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const { isTouchScreen } = useAppLayout();\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, 'icon', !isTouchScreen && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, !isTouchScreen && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useLastCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  });\n\n  const handleCloseMenu = useLastCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  });\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    setMenuPosition(undefined);\n  });\n\n  const handleRemoveBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  });\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useLastCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  });\n\n  const handleFileSelect = useLastCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  });\n\n  const handleQuickSelect = useLastCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false));\n  });\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default InlineBotTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default MentionTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default BotCommandTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectCanAnimateInterface,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useLastCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  });\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useLastCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  });\n\n  const handleClearClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  });\n\n  const handleChangeRecipientClick = useLastCallback(() => {\n    changeForwardRecipient();\n  });\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div className=\"ComposerEmbeddedMessage_inner\">\n        <div className=\"embedded-left-icon\">\n          <i className={buildClassName('icon', leftIcon)} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = selectCanAnimateInterface(global);\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default AttachmentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default BotCommandMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default PollModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default DropAreaAsync;\nexport { DropAreaState } from './DropArea';\n","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiFormattedText, ApiMessage, ApiMessageEntityTextUrl, ApiWebPage,\n} from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const formattedTextWithLinkRef = useRef<ApiFormattedText>();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const formattedText = parseMessageInput(getHtml());\n    const linkEntity = formattedText.entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    formattedTextWithLinkRef.current = formattedText;\n\n    return linkEntity?.url || formattedText.text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n    const formattedText = formattedTextWithLinkRef.current;\n\n    if (link) {\n      loadWebPagePreview({ text: formattedText! });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useLastCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  });\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div className=\"WebPagePreview_inner\">\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default SendAsMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft, MessageList,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n  ApiChatFullInfo,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE,\n  EDITABLE_INPUT_MODAL_ID,\n  SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useDraft from './hooks/useDraft';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    isOnActiveTab: boolean;\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    currentMessageList?: MessageList;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n    slowMode?: ApiChatFullInfo['slowMode'];\n    shouldUpdateStickerSetOrder?: boolean;\n  };\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\nconst MOUNT_ANIMATION_DURATION = 430;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  isOnActiveTab,\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  currentMessageList,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n  slowMode,\n  shouldUpdateStickerSetOrder,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const [isMounted, setIsMounted] = useState(false);\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, cancelForceShowSymbolMenu);\n\n  useTimeout(() => {\n    setIsMounted(true);\n  }, MOUNT_ANIMATION_DURATION);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n  const [nextText, setNextText] = useState<ApiFormattedText | undefined>(undefined);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n\n  const insertHtmlAndUpdateCursor = useLastCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestNextMutation(() => {\n      focusEditableElement(messageInput);\n    });\n  });\n\n  const insertTextAndUpdateCursor = useLastCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  });\n\n  const insertFormattedTextAndUpdateCursor = useLastCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  });\n\n  const insertCustomEmojiAndUpdateCursor = useLastCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  });\n\n  const insertNextText = useLastCallback(() => {\n    if (!nextText) return;\n    insertFormattedTextAndUpdateCursor(nextText, EDITABLE_INPUT_ID);\n    setNextText(undefined);\n  });\n\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n    insertNextText,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady\n      && isOnActiveTab\n      && isForCurrentMessageList\n      && shouldSuggestStickers\n      && canSendStickers\n      && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    switchWebview: inlineBotSwitchWebview,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage);\n\n  const resetComposer = useLastCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n    setNextText(undefined);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  });\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useLastCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  });\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    setNextText,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useLastCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  });\n\n  const validateTextLength = useLastCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  });\n\n  const checkSlowMode = useLastCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  });\n\n  const sendAttachments = useLastCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      messageList: currentMessageList,\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetOrder,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleSendAttachments = useLastCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  });\n\n  const handleSend = useLastCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        messageList: currentMessageList,\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetOrder,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleClickBotMenu = useLastCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  });\n\n  const handleActivateBotCommandMenu = useLastCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  });\n\n  const handleMessageSchedule = useLastCallback((\n    args: ScheduledMessageArgs, scheduledAt: number, messageList: MessageList,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n        messageList,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        messageList,\n        scheduledAt,\n      });\n    }\n  });\n\n  useEffectWithPrevDeps(([prevContentToBeScheduled]) => {\n    if (currentMessageList && contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt, currentMessageList);\n      });\n    }\n  }, [contentToBeScheduled, currentMessageList, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n\n      requestNextMutation(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      void handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  });\n\n  const handleCustomEmojiSelectAttachmentModal = useLastCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleGifSelect = useLastCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt, currentMessageList);\n        requestMeasure(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ messageList: currentMessageList, gif, isSilent });\n      requestMeasure(() => {\n        resetComposer(true);\n      });\n    }\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt, currentMessageList);\n        requestMeasure(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && canUpdateStickerSetsOrder,\n      });\n      requestMeasure(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  });\n\n  const handleInlineBotSelect = useLastCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt, currentMessageList);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n        messageList: currentMessageList,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleBotCommandSelect = useLastCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handlePollSend = useLastCallback((poll: ApiNewPoll) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt, currentMessageList);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ messageList: currentMessageList, poll });\n      closePollModal();\n    }\n  });\n\n  const sendSilent = useLastCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt, currentMessageList!);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  });\n\n  const handleSendAsMenuOpen = useLastCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  });\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useLastCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const removeSymbol = useLastCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  });\n\n  const removeSymbolAttachmentModal = useLastCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleAllScheduledClick = useLastCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  });\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useLastCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        void handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          void startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        if (!currentMessageList) {\n          return;\n        }\n\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt, currentMessageList!);\n        });\n        break;\n      default:\n        break;\n    }\n  });\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n    isMounted && 'mounted',\n  );\n\n  const handleSendScheduled = useLastCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt, currentMessageList!);\n    });\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendSilent();\n  });\n\n  const handleSendWhenOnline = useLastCallback(() => {\n    handleMessageSchedule({}, SCHEDULED_WHEN_ONLINE, currentMessageList!);\n  });\n\n  const handleSendScheduledAttachments = useLastCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt, currentMessageList!);\n    });\n  });\n\n  const handleSendSilentAttachments = useLastCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  });\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        shouldSchedule={shouldSchedule}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          switchWebview={inlineBotSwitchWebview}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                peer={sendAsUser || sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isReady={isReady}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        noFastClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon icon-send\" />\n        <i className=\"icon icon-schedule\" />\n        <i className=\"icon icon-microphone-alt\" />\n        <i className=\"icon icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          canScheduleUntilOnline={canScheduleUntilOnline}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onSendWhenOnline={handleSendWhenOnline}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const chatBotFullInfo = isChatWithBot ? selectUserFullInfo(global, chatBot.id) : undefined;\n    const chatFullInfo = !isChatWithUser ? selectChatFullInfo(global, chatId) : undefined;\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const {\n      language, shouldSuggestStickers, shouldSuggestCustomEmoji, shouldUpdateStickerSetOrder,\n    } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chatFullInfo ? chatFullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !selectUserFullInfo(global, user.id)?.noVoiceMessages) ?? true;\n    const slowMode = chatFullInfo?.slowMode;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      isOnActiveTab: !tabState.isBlurred,\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chatFullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      shouldUpdateStickerSetOrder,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chatFullInfo?.botCommands,\n      botCommands: chatBotFullInfo ? (chatBotFullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBotFullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n      slowMode,\n      currentMessageList,\n    };\n  },\n)(Composer));\n","import { useEffect, useRef, useState } from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/windowEnvironment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype ActiveVoiceRecording =\n  { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction }\n  | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useLastCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            requestMutation(() => {\n              recordButtonRef.current!.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n            });\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  });\n\n  const pauseRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  const stopRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default MessageLanguageModalAsync;\n","import React, {\n  useEffect, useState, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  ANIMATION_END_DELAY,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n} from '../../config';\nimport {\n  IS_ANDROID, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\n\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { getGlobal } from '../../../global';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport useLastCallback from './useLastCallback';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import React, {\n  useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\nimport { requestMutation, requestMeasure } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { GlobalState, TabState } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { compact } from '../../util/iteratees';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ninterface LocalOwnProps {\n  shouldLoad?: boolean;\n}\n\nconst ReactionPickerAsync: FC<OwnProps & LocalOwnProps> = (props) => {\n  const { isOpen, shouldLoad } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen && !shouldLoad);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import React, {\n  useEffect, memo, useState, useRef, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, IS_ELECTRON,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n  selectIsReactionPickerOpen,\n  selectPerformanceSettingsValue,\n  selectCanAnimateInterface,\n  selectChatFolder,\n} from '../../global/selectors';\nimport { getUserFullName } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\nconst REACTION_PICKER_LOADING_DELAY_MS = 7000; // 7 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  noRightColumnAnimation,\n  isSynced,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsAppUpdateAvailable,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const [shouldLoadReactionPicker, markShouldLoadReactionPicker] = useFlag(false);\n  useTimeout(markShouldLoadReactionPicker, REACTION_PICKER_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, (isMasterTab && !IS_ELECTRON) ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateDownloadedListener = window.electron?.on(ElectronEvent.UPDATE_DOWNLOADED, () => {\n      setIsAppUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron?.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsAppUpdateAvailable(false);\n      removeUpdateDownloadedListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateDownloadedListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openChat({\n      id: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} shouldLoad={shouldLoadReactionPicker} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","map","current","isReactionChosen","chosenOrder","undefined","count","filter","_ref","forEach","reaction","i","existingIndex","findIndex","r","isSameReaction","push","recentReactions","length","_ref2","userId","currentUserId","unshift","addedDate","floor","Date","now","updateChatMessage","chatId","id","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","threadInfo","selectThreadByMessage","replyToMessageId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","selectChat","unreadCount","selectListedIds","MAIN_THREAD_ID","isMessageLocal","updateListedIds","threadId","Object","values","byTabId","_ref6","tabId","selectIsViewportNewest","addViewportId","replaceThreadParam","isActionMessage","updateThreadInfo","messagesCount","_ref7","firstUnreadId","selectFirstUnreadId","candidateGlobal","newViewportIds","selectViewportIds","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","newLastMessage","clearMessageTranslation","topics","deleteTopic","requestChatUpdate","threadIdsToUpdate","selectThreadIdFromMessage","setGlobal","setTimeout","getGlobal","deleteChatMessages","unique","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","addActionHandler","shouldForceReply","repliesThreadInfo","isTopicReply","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","selectIsChatListed","loadTopChats","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","Number","sort","a","b","localId","deleteChatScheduledMessages","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","currentThreadInfo","selectThreadInfo","newThreadInfo","topMessageId","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","offsetId","direction","isOutlying","isBudgetPreload","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","round","callApi","limit","users","repliesThreadInfos","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","updateThreadInfos","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","payload","shouldForceRender","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","type","omit","scheduledAt","contentToBeScheduled","replyingToId","selectReplyingToId","replyingToMessage","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","selectSendAs","setReplyingToId","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","messageListType","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","apiUpdate","draft","shouldForce","user","selectUser","isDeletedUser","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","selectCurrentChat","topId","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","showNotification","translate","connectionState","isUserBot","isUnread","minId","readCount","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","originChannelId","selectThreadOriginChat","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","getUserFullName","selectForwardsCanBeSentToChat","isModalShown","closeMediaViewer","exitMessageSelectMode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","views","forwards","repliesChatId","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","toString","className","newGifs","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","localChats","localUsers","globalChats","globalUsers","localResults","chatIds","userIds","globalResults","date","timestampPlusDay","resultsByType","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","management","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","activeThreadId","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","newFullInfo","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","buildQueryString","k","join","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","peerId","requestBotUrlAuth","buttonId","selectBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","some","userReaction","newUserReactions","selectMaxUserReactions","selectPerformanceSettingsValue","newActiveReactions","activeReactions","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","isChatInfoShown","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseMessageInput","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","top","left","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","then","trim","test","isUpdateAvailable","catch","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","reactionPicker","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","updateUserFullInfo","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","lastCallback","useLastCallback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","props","StickerSetModal","useModuleLoader","Bundles","React","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","CustomEmojiEffect","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","animationLevel","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","skipLockOnUnload","updatePerformanceSettings","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","chatsCount","handleLockScreenHotkey","stopPropagation","useHotkeys","IS_APP","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","ANIMATION_LEVEL_MAX","ANIMATION_LEVEL_MIN","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","animationLevelValue","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","Toggle","isCharIcon","getPromptInstall","searchContent","PickerSelectedItem","canClose","clickArg","chatOrUserId","DropdownMenu","trigger","footer","APP_NAME","positionX","transformOriginX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","orderedFolderIds","folderInvitesById","archived","shouldSkipHistoryAnimations","hasArchivedChats","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","installUpdate","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","EMOJI_SIZE","customTitle","onUnpinMessage","onAllPinnedClick","isFullWidth","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleClick","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","onMouseDown","PinnedMessageNavigation","thumbDataUri","spoiler","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","renderText","MessageSummary","noEmoji","emojiSize","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","selectForwardedSender","canUnpin","isComments","firstPinnedMessage","isReady","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","classList","requestMutation","remove","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","senderUserId","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","MIN_MEDIA_WIDTH_WITH_TEXT","MIN_MEDIA_WIDTH","MIN_MEDIA_HEIGHT","getMinMediaWidth","hasCommentButton","_text$length","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","isJustAdded","isRelocatedRef","isRelocated","messagesContainer","closest","isToBottom","exec","animateScroll","requestForcedReflow","requestMeasure","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","startedAt","excludedClosestSelector","onRelease","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","loopIndefinitely","withVideo","CropModal","textParts","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","onPinnedIntersectionChange","requestConfetti","useOnIntersect","viewportPinnedIdsToRemove","isUnmount","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","usersById","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","ActionMessageSuggestedAvatar","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","getUserColorKey","draggable","ActionMessage","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","container","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","forcedUri","dataUri","getMessageMediaThumbDataUri","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","forcedWidth","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withBlurredBackground","withThumb","noThumb","thumbRef","blurredBackgroundRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","setProperty","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","textContent","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","handleQuickButtonClick","siteName","displayUrl","quickButtonLangKey","getWebpageButtonText","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Video","langKey","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playingProgressEl","shouldPlay","stopPlaying","capturePlaying","paused","stopCurrentAudio","renderIcon","openComments","recentRepliers","chatsById","hasUnread","commentsText","peers","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","AvatarList","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","chatFullInfo","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","hasLinkedChat","linkedChatId","withReactionEffects","withStickerEffects","selectOutgoingStatus","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","contextMenuTarget","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","metaPosition","reactionsPosition","quickReactionPosition","postAuthorTitle","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","reactionsMaxWidth","contentWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","isForAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","MessageMeta","Reactions","forwardAuthor","chatUsername","c","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","TopicChip","EmbeddedMessage","Sticker","AnimatedCustomEmoji","AnimatedEmoji","Album","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","Invoice","Location","CommentButton","InlineButtons","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","isBotInfoEmpty","messageGroups","getContainerHeight","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","isLocalMessageId","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","canPost","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","parentElement","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","ScrollDownButton","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","validateAspectRatio","shouldShrink","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","deleteLastCharacterOutsideSelection","html","tempInput","contentEditable","appendChild","lastChild","textLength","range","createRange","selection","getSelection","setStart","setEnd","removeAllRanges","addRange","execCommand","removeChild","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","subscribeToAnalyzer","reject","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","parseHtml","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","setNextText","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","textToPaste","isWordDocument","documentElement","shouldSetAttachments","newAttachments","URL_ENTITIES","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","AttachBotIcon","Portal","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","AttachBotItem","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginY","menuStyle","useMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","formattedTextWithLinkRef","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","shouldUpdateStickerSetOrder","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","slowMode","selectEditingScheduledDraft","isOnActiveTab","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","isMounted","setIsMounted","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","nextText","canSendGifs","canAttachEmbedLinks","isComposerBlocked","insertHtmlAndUpdateCursor","newHtml","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","requestNextMutation","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","insertNextText","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","isChatAdmin","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotSwitchWebview","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","useDraft","saveDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","forceUpdateDraft","scopedShatId","scopedThreadId","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","shouldSetNoWebPage","edited","getShouldResetNoWebPageDebounced","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","prevContentToBeScheduled","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","canUpdateStickerSetsOrder","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendWhenOnline","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","ComposerEmbeddedMessage","WebPagePreview","BotMenuButton","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","AttachMenu","BotKeyboardMenu","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","noFastClick","CustomSendMenu","onSendSchedule","onSendWhenOnline","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","isDesktop","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","FloatingActionButtons","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","resultType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","RightHeader","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","ReactionPicker","info","ChatlistModal","DEBUG_isLogged","wasTimeFormatSetManually","currentUser","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsAppUpdateAvailable","loadBundle","shouldLoadReactionPicker","markShouldLoadReactionPicker","removeUpdateDownloadedListener","on","ElectronEvent","removeUpdateErrorListener","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}