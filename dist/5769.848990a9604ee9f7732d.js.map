{"version":3,"file":"5769.848990a9604ee9f7732d.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/CustomReactionAnimation.module.scss?e66e","webpack://telegram-t/./src/components/middle/message/CustomReactionAnimation.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/hooks/useDebouncedMemo.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/ui/ResponsiveHoverButton.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { GlobalState } from '../../types';\n\naddActionHandler('openLocalTextSearch', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true);\n});\n\naddActionHandler('closeLocalTextSearch', closeLocalTextSearch);\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { query } = payload!;\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = global.localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const { mediaType } = payload!;\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType);\n});\n\nexport function closeLocalTextSearch(global: GlobalState): GlobalState {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload) => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (global.premiumModal?.promo && global.premiumModal?.isOpen) {\n    global = {\n      ...global,\n      premiumModal: {\n        ...global.premiumModal,\n        isOpen: false,\n      },\n    };\n  }\n\n  if (!currentMessageList\n    || (\n      currentMessageList.chatId !== id\n      || currentMessageList.threadId !== threadId\n      || currentMessageList.type !== type\n    )) {\n    if (id) {\n      global = replaceThreadParam(global, id, threadId, 'replyStack', []);\n    }\n\n    global = exitMessageSelectMode(global);\n    global = closeLocalTextSearch(global);\n\n    global = {\n      ...global,\n      isStatisticsShown: false,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: undefined,\n      },\n      ...(id !== global.forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    };\n  }\n\n  if (id && id !== global.forumPanelChatId) {\n    actions.closeForumPanel();\n  }\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory);\n});\n\naddActionHandler('openPreviousChat', (global) => {\n  return updateCurrentMessageList(global, undefined);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload) => {\n  setGlobal({\n    ...global,\n    isChatInfoShown: true,\n  });\n\n  actions.openChat(payload);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload) => {\n  const {\n    chatId, threadId, text, files,\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId });\n  }\n\n  return {\n    ...global,\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  };\n});\n\naddActionHandler('resetChatCreation', (global) => {\n  return {\n    ...global,\n    chatCreation: undefined,\n  };\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload) => {\n  return {\n    ...global,\n    newChatMembersProgress: payload,\n  };\n});\n\naddActionHandler('openNextChat', (global, actions, payload) => {\n  const { targetIndexDelta, orderedIds } = payload;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0] });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload) => {\n  const { folderId } = payload;\n  return {\n    ...global,\n    deleteFolderDialogModal: folderId,\n  };\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global) => {\n  return {\n    ...global,\n    deleteFolderDialogModal: undefined,\n  };\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n} from '../../selectors';\nimport { findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport type { GlobalState } from '../../types';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload) => {\n  const { chatId, threadId, scrollOffset } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload) => {\n  const { messageId } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload) => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload) => {\n  const { targetIndexDelta } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId });\n  actions.focusMessage({\n    chatId, threadId, messageId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload) => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? global.audioPlayer.origin,\n      volume: volume ?? global.audioPlayer.volume,\n      playbackRate: playbackRate || global.audioPlayer.playbackRate,\n      isMuted: isMuted || global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload) => {\n  const {\n    origin,\n  } = payload;\n\n  return {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      origin,\n    },\n  };\n});\n\naddActionHandler('closeAudioPlayer', (global) => {\n  return {\n    ...global,\n    audioPlayer: {\n      volume: global.audioPlayer.volume,\n      playbackRate: global.audioPlayer.playbackRate,\n      isMuted: global.audioPlayer.isMuted,\n    },\n  };\n});\n\naddActionHandler('openPollResults', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      setGlobal({\n        ...global,\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      });\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== global.pollResults.chatId || messageId !== global.pollResults.messageId) {\n    return {\n      ...global,\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    };\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global) => {\n  return {\n    ...global,\n    pollResults: {},\n  };\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload) => {\n  const { noForumTopicPanel } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId, threadId, messageId: lastMessageId, noHighlight: true, noForumTopicPanel,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ noForumTopicPanel: true });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack]);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload) => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n  } = payload!;\n\n  let { messageId } = payload!;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId, groupedId);\n    if (ids?.length) {\n      ([messageId] = ids);\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    let newGlobal = getGlobal();\n    newGlobal = updateFocusedMessage(newGlobal);\n    newGlobal = updateFocusDirection(newGlobal);\n    setGlobal(newGlobal);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer);\n  global = updateFocusDirection(global, undefined);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId) || [];\n    global = replaceThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId]);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceThreadParam(global, chatId, threadId, 'viewportIds', undefined);\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n  });\n  actions.loadViewportMessages();\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload) => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore,\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return {\n    ...global,\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  };\n});\n\naddActionHandler('changeForwardRecipient', (global) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  };\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noAuthors: payload,\n      noCaptions: payload && global.forwardMessages.noCaptions, // `noCaptions` cannot be true when `noAuthors` is false\n    },\n  };\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload) => {\n  return {\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      noCaptions: payload,\n      noAuthors: payload, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  };\n});\n\naddActionHandler('exitForwardMode', (global) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = global.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload) => {\n  const { message } = payload;\n\n  const byChatId = global.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  });\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload) => {\n  const { messages } = payload;\n\n  const byChatId = global.activeDownloads.byChatId;\n  const newByChatId: GlobalState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return {\n    ...global,\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  };\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload) => {\n  const { message } = payload;\n\n  setGlobal({\n    ...global,\n    activeDownloads: {\n      byChatId: {\n        ...global.activeDownloads.byChatId,\n        [message.chatId]: [...(global.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  });\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload) => {\n  const { messageId } = payload || {};\n  const openChat = selectCurrentChat(global);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload) => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global) => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', exitMessageSelectMode);\n\naddActionHandler('openPollModal', (global, actions, payload) => {\n  const { isQuiz } = payload || {};\n  return {\n    ...global,\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  };\n});\n\naddActionHandler('closePollModal', (global) => {\n  return {\n    ...global,\n    pollModal: {\n      isOpen: false,\n    },\n  };\n});\n\naddActionHandler('checkVersionNotification', (global, actions) => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload) => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  setGlobal({\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  });\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    reactorModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeReactorListModal', (global) => {\n  return {\n    ...global,\n    reactorModal: undefined,\n  };\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n\n  return {\n    ...global,\n    seenByModal: { chatId, messageId },\n  };\n});\n\naddActionHandler('closeSeenByModal', (global) => {\n  return {\n    ...global,\n    seenByModal: undefined,\n  };\n});\n\naddActionHandler('copySelectedMessages', (global) => {\n  if (!global.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = global.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload: { messageIds?: number[] }) => {\n  const { messageIds } = payload;\n  const chat = selectCurrentChat(global);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.getTranslation;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n  const { chatId } = global.globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  });\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload) => {\n  return updateGlobalSearch(global, {\n    isClosing: payload,\n  });\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload) => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global.globalSearch;\n\n  if (!recentlyFoundChatIds) {\n    return updateGlobalSearch(global, { recentlyFoundChatIds: [id] });\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return updateGlobalSearch(global, { recentlyFoundChatIds: newRecentIds });\n});\n\naddActionHandler('clearRecentlyFoundChats', (global) => {\n  return updateGlobalSearch(global, { recentlyFoundChatIds: undefined });\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload) => {\n  const { content } = payload!;\n\n  return updateGlobalSearchContent(global, content);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload) => {\n  const { id } = payload!;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined });\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      search: {\n        query,\n        resultIds: undefined,\n      },\n    },\n  };\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      search: {\n        query,\n        offsetId: undefined,\n        results: undefined,\n      },\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  });\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  return {\n    ...global,\n    newContact: { userId },\n  };\n});\n\naddActionHandler('openNewContactDialog', (global) => {\n  return {\n    ...global,\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  };\n});\n\naddActionHandler('closeNewContactDialog', (global) => {\n  return closeNewContactDialog(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../../util/environment';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectIsTrustedBot,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { unique } from '../../../util/iteratees';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, action, payload) => {\n  return {\n    ...global,\n    isChatInfoShown: payload !== undefined ? payload : !global.isChatInfoShown,\n  };\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload) => {\n  const leftColumnWidth = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global) => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: !(global.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload) => {\n  const { screen } = payload || {};\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('closeManagement', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    management: {\n      byChatId: {\n        ...global.management.byChatId,\n        [chatId]: {\n          ...global.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('openChat', (global) => {\n  if (!IS_SINGLE_COLUMN_LAYOUT && !IS_TABLET_COLUMN_LAYOUT) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    isLeftColumnShown: global.messages.messageLists.length === 0,\n  };\n});\n\naddActionHandler('toggleStatistics', (global) => {\n  return {\n    ...global,\n    isStatisticsShown: !global.isStatisticsShown,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: undefined,\n    },\n  };\n});\n\naddActionHandler('toggleMessageStatistics', (global, action, payload) => {\n  return {\n    ...global,\n    statistics: {\n      ...global.statistics,\n      currentMessageId: payload?.messageId,\n    },\n  };\n});\n\naddActionHandler('toggleLeftColumn', (global) => {\n  return {\n    ...global,\n    isLeftColumnShown: !global.isLeftColumnShown,\n  };\n});\n\naddActionHandler('addRecentEmoji', (global, action, payload) => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, action, payload) => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, action, payload) => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global) => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, action, payload) => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload) => {\n  const notification = payload!;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...global.notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('dismissNotification', (global, actions, payload) => {\n  const newNotifications = global.notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return {\n    ...global,\n    notifications: newNotifications,\n  };\n});\n\naddActionHandler('showDialog', (global, actions, payload) => {\n  const { data } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...global.dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('dismissDialog', (global) => {\n  const newDialogs = [...global.dialogs];\n\n  newDialogs.pop();\n\n  return {\n    ...global,\n    dialogs: newDialogs,\n  };\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload) => {\n  const { url: safeLinkModalUrl } = payload;\n\n  return {\n    ...global,\n    safeLinkModalUrl,\n  };\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload) => {\n  const { selectedAt } = payload;\n\n  return {\n    ...global,\n    historyCalendarSelectedAt: selectedAt,\n  };\n});\n\naddActionHandler('closeHistoryCalendar', (global) => {\n  return {\n    ...global,\n    historyCalendarSelectedAt: undefined,\n  };\n});\n\naddActionHandler('openGame', (global, actions, payload) => {\n  const { url, chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  });\n});\n\naddActionHandler('closeGame', (global) => {\n  return {\n    ...global,\n    openedGame: undefined,\n  };\n});\n\naddActionHandler('requestConfetti', (global, actions, payload) => {\n  const {\n    top, left, width, height,\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return {\n    ...global,\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  };\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload) => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload) => {\n  const { limit } = payload;\n\n  return {\n    ...global,\n    limitReachedModal: {\n      limit,\n    },\n  };\n});\n\naddActionHandler('closeLimitReachedModal', (global) => {\n  return {\n    ...global,\n    limitReachedModal: undefined,\n  };\n});\n\naddActionHandler('closeStickerSetModal', (global) => {\n  return {\n    ...global,\n    openedStickerSetShortName: undefined,\n  };\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload) => {\n  const { setIds } = payload;\n  return {\n    ...global,\n    openedCustomEmojiSetIds: setIds,\n  };\n});\n\naddActionHandler('closeCustomEmojiSets', (global) => {\n  return {\n    ...global,\n    openedCustomEmojiSetIds: undefined,\n  };\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload) => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload) => {\n  const { chatId } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID });\n\n  return {\n    ...global,\n    createTopicPanel: {\n      chatId,\n    },\n  };\n});\n\naddActionHandler('closeCreateTopicPanel', (global) => {\n  return {\n    ...global,\n    createTopicPanel: undefined,\n  };\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload) => {\n  const { chatId, topicId } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global);\n  if (!currentChat) actions.openChat({ id: chatId });\n\n  return {\n    ...global,\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  };\n});\n\naddActionHandler('closeEditTopicPanel', (global) => {\n  return {\n    ...global,\n    editTopicPanel: undefined,\n  };\n});\n\naddActionHandler('checkAppVersion', () => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        setGlobal({\n          ...getGlobal(),\n          isUpdateAvailable: true,\n        });\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\n\naddActionHandler('closePaymentModal', (global) => {\n  const status = global.payment.status;\n  global = clearPayment(global);\n  global = closeInvoice(global);\n  global = {\n    ...global,\n    payment: {\n      ...global.payment,\n      status,\n    },\n  };\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload) => {\n  const { error } = payload!;\n\n  return {\n    ...global,\n    payment: {\n      ...global.payment,\n      status: 'failed',\n      error,\n    },\n  };\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('openMediaViewer', (global, actions, payload) => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? global.mediaViewer.volume,\n      playbackRate: playbackRate || global.mediaViewer.playbackRate,\n      isMuted: isMuted || global.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  };\n});\n\naddActionHandler('closeMediaViewer', (global) => {\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = global.mediaViewer;\n  return {\n    ...global,\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload) => {\n  const {\n    volume,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload) => {\n  const {\n    playbackRate,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      playbackRate,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload) => {\n  const {\n    isMuted,\n  } = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isMuted,\n    },\n  };\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload) => {\n  const isHidden = payload;\n\n  return {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      isHidden,\n    },\n  };\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { clearEncryptedSession, encryptSession, setupPasscode } from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_STATE } from '../../initialState';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, { passcode }) => {\n  setGlobal(updatePasscodeSettings(global, {\n    isLoading: true,\n  }));\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  const globalJson = serializeGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  setGlobal(updatePasscodeSettings(getGlobal(), {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global) => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, { sessionJson, globalJson }) => {\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  global = JSON.parse(globalJson);\n  migrateCache(global, cloneDeep(INITIAL_STATE));\n\n  setGlobal(updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  ));\n\n  actions.initApi();\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global) => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload) => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global) => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', () => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { GlobalActions } from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n  updateTopic,\n  updateThreadInfo,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n  selectThreadIdFromMessage,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { getTranslation } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload) => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId) {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload);\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId, direction, offsetId);\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget(\n  actions: GlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      chat, threadId, offsetId, direction, isOutlying, isBudgetPreload,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload) => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n\n    setGlobal(updateThreadUnreadFromForwardedMessage(\n      getGlobal(),\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    ));\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        contentToBeScheduled: payload,\n      },\n    };\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToTopId = chat.isForum ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: selectReplyingToId(global, chatId, threadId),\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage({\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage({\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage({\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage({\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments.forEach((attachment: ApiAttachment) => {\n      sendMessage({\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload) => {\n  const { text, entities } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload) => {\n  const { chatId, threadId, draft } = payload!;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (!result) {\n    draft.isLocal = true;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload) => {\n  const { chatId, threadId, localOnly } = payload!;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', undefined);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload) => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const {\n    messageId, isUnpin, isOneSide, isSilent,\n  } = payload!;\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void unpinAllMessages(chat, selectThreadTopMessageId(global, chatId, threadId));\n});\n\nasync function unpinAllMessages(chat: ApiChat, threadId?: number) {\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  let global = getGlobal();\n  global = replaceThreadParam(global, chat.id, threadId || MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n}\n\naddActionHandler('deleteMessages', (global, actions, payload) => {\n  const { messageIds, shouldDeleteForAll } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload) => {\n  const { messageIds } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload) => {\n  const { chatId, shouldDeleteForAll } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  const activeChat = selectCurrentMessageList(global);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload) => {\n  const {\n    messageIds, reason, description,\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload) => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload) => {\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return undefined;\n  }\n\n  const { maxId } = payload!;\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return;\n  }\n\n  const { messageIds } = payload!;\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', (global, actions, payload) => {\n  const { text } = payload!;\n  void loadWebPagePreview(text);\n});\n\naddActionHandler('clearWebPagePreview', (global) => {\n  if (!global.webPagePreview) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    webPagePreview: undefined,\n  };\n});\n\naddActionHandler('sendPollVote', (global, actions, payload) => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload) => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', (global, actions, payload) => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters,\n  } = payload!;\n\n  void loadPollOptionResults(chat, messageId, option, offset, limit, shouldResetVoters);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload) => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, action, payload) => {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = global.forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const { isSilent, scheduledAt } = payload;\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage({\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  setGlobal({\n    ...getGlobal(),\n    forwardMessages: {},\n  });\n});\n\naddActionHandler('loadScheduledHistory', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadScheduledHistory(chat);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload) => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload) => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectThreadOriginChat(global, chatId, threadId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload) => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = updateChatMessage(getGlobal(), chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload) => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  });\n});\n\nasync function loadWebPagePreview(message: string) {\n  const webPagePreview = await callApi('fetchWebPagePreview', { message });\n\n  setGlobal({\n    ...getGlobal(),\n    webPagePreview,\n  });\n}\n\nasync function loadViewportMessages(\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat: selectThreadOriginChat(getGlobal(), chatId, threadId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  let global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceThreadParam(global, chatId, threadId, 'outlyingIds', undefined);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage(chat: ApiChat, messageId: number, replyOriginForId: number) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      let global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  let global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage(params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    const global = getGlobal();\n\n    setGlobal({\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    });\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  const global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\nasync function loadPollOptionResults(\n  chat: ApiChat,\n  messageId: number,\n  option: string,\n  offset?: string,\n  limit?: number,\n  shouldResetVoters?: boolean,\n) {\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  const { voters } = global.pollResults;\n\n  setGlobal({\n    ...global,\n    pollResults: {\n      ...global.pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(global.pollResults.offsets ? global.pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  });\n}\n\naddActionHandler('loadPinnedMessages', (global, actions, payload) => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void loadPinnedMessages(chat, threadId);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateChatMessage(getGlobal(), chatId, messageId, {\n    seenByUserIds: result,\n  }));\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload) => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    setGlobal(updateChat(getGlobal(), chatId, {\n      sendAsPeerIds: [],\n    }));\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\nasync function loadPinnedMessages(chat: ApiChat, threadId = MAIN_THREAD_ID) {\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n}\n\nasync function loadScheduledHistory(chat: ApiChat) {\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  let global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n}\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload) => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds });\n});\n\naddActionHandler('focusNextMention', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0] });\n});\n\naddActionHandler('readAllMentions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload) => {\n  const { url, shouldSkipModal } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload) => {\n  const { chatId, topicId } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: getTranslation('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n      });\n      return;\n    }\n  }\n\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  });\n\n  actions.openChat({ id: chatId, threadId: topicId });\n  actions.closeMediaViewer();\n  actions.exitMessageSelectMode();\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions) => {\n  setGlobal({\n    ...global,\n    forwardMessages: {\n      ...global.forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  });\n\n  actions.exitMessageSelectMode();\n  actions.forwardMessages({ isSilent: true });\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiStickerSetInfo, ApiSticker } from '../../../api/types';\nimport type { LangCode } from '../../../types';\nimport { callApi } from '../../../api/gramjs';\nimport { onTickEnd, pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { getTranslation } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions) => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions) => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global) => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(hash);\n});\n\naddActionHandler('loadFavoriteStickers', (global) => {\n  const { hash } = global.stickers.favorite || {};\n  void loadFavoriteStickers(hash);\n});\n\naddActionHandler('loadPremiumStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadPremiumSetStickers', async (global) => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  });\n});\n\naddActionHandler('loadGreetingStickers', async (global) => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  });\n});\n\naddActionHandler('loadFeaturedStickers', async (global) => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal(updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  ));\n});\n\naddActionHandler('loadPremiumGifts', async () => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...getGlobal(),\n    premiumGifts: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global) => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  setGlobal({\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  });\n});\n\naddActionHandler('loadStickers', (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global) => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global) => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  setGlobal({\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  });\n});\n\naddActionHandler('loadSavedGifs', (global) => {\n  const { hash } = global.gifs.saved;\n  void loadSavedGifs(hash);\n});\n\naddActionHandler('saveGif', async (global, actions, payload) => {\n  const { gif, shouldUnsave } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  });\n});\n\naddActionHandler('faveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.getTranslation('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.getTranslation('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.getTranslation('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && { action: actions.openPremiumModal }),\n      className: 'bold-link',\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload) => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    void unfaveSticker(sticker);\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, action, payload) => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  loadRecentStickers();\n});\n\naddActionHandler('clearRecentStickers', async (global) => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  });\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload) => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload: { language: LangCode }) => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  });\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    setGlobal({\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    });\n\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  });\n});\n\nasync function loadRecentStickers(hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  });\n}\n\nasync function loadFavoriteStickers(hash?: string) {\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  });\n}\n\nasync function loadStickers(stickerSetInfo: ApiStickerSetInfo) {\n  const stickerSet = await callApi(\n    'fetchStickers',\n    { stickerSetInfo },\n  );\n  let global = getGlobal();\n\n  if (!stickerSet) {\n    onTickEnd(() => {\n      getActions().showNotification({\n        message: getTranslation('StickerPack.ErrorNotFound'),\n      });\n    });\n    if ('shortName' in stickerSetInfo && global.openedStickerSetShortName === stickerSetInfo.shortName) {\n      setGlobal({\n        ...global,\n        openedStickerSetShortName: undefined,\n      });\n    }\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\nfunction unfaveSticker(sticker: ApiSticker) {\n  const global = getGlobal();\n\n  // Remove sticker preemptively to get instant feedback when user removes sticker\n  // from favorites while in Sticker Picker\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: {\n        ...global.stickers.favorite,\n        stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n      },\n    },\n  });\n\n  void callApi('faveSticker', { sticker, unfave: true });\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (query) {\n    void searchThrottled(() => {\n      searchStickers(query);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, global.config?.gifSearchUsername);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global) => {\n  const { query, offset } = global.gifs.search;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(query, global.config?.gifSearchUsername, offset);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(() => {\n    loadStickersForEmoji(emoji, hash);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global) => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload) => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global) => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global) => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  });\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload) => {\n  const { stickerSetInfo } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    actions.showNotification({\n      message: getTranslation('StickerPack.ErrorNotFound'),\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    openedStickerSetShortName: set.shortName,\n  });\n});\n\nasync function searchStickers(query: string, hash?: string) {\n  const result = await callApi('searchStickers', { query, hash });\n\n  if (!result) {\n    return;\n  }\n\n  const global = getGlobal();\n  const { setsById, added } = global.stickers;\n\n  const resultIds = result.sets.map(({ id }) => id);\n\n  if (added.setIds) {\n    added.setIds.forEach((id) => {\n      if (!resultIds.includes(id)) {\n        const { title } = setsById[id] || {};\n        if (title && searchWords(title, query)) {\n          resultIds.unshift(id);\n        }\n      }\n    });\n  }\n\n  setGlobal(updateStickerSets(\n    global,\n    'search',\n    result.hash,\n    result.sets,\n    resultIds,\n  ));\n}\n\nasync function searchGifs(query: string, botUsername?: string, offset?: string) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateGifSearch(getGlobal(), !offset, result.gifs, result.nextOffset));\n}\n\nasync function loadSavedGifs(hash?: string) {\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  const global = getGlobal();\n\n  setGlobal({\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  });\n}\n\nasync function loadStickersForEmoji(emoji: string, hash?: string) {\n  let global = getGlobal();\n  setGlobal({\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {\n        ...global.stickers.forEmoji,\n        emoji,\n      },\n    },\n  });\n\n  const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n  global = getGlobal();\n\n  if (!result || global.stickers.forEmoji.emoji !== emoji) {\n    return;\n  }\n\n  global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload) => {\n  const { chatId } = global.globalSearch;\n  const { query } = payload!;\n\n  if (query && !chatId) {\n    void searchThrottled(() => {\n      searchChats(query);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload) => {\n  const { date } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...global.globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  });\n  setGlobal(global);\n\n  const { chatId } = global.globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal('', 'text', undefined, chat, maxDate, date);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload) => {\n  const {\n    query, resultsByType, chatId, date,\n  } = global.globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const { type } = payload;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(query, type, nextOffsetId, chat, maxDate, date);\n});\n\nasync function searchChats(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { chats: false }));\n    return;\n  }\n\n  const {\n    localChats, localUsers, globalChats, globalUsers,\n  } = result;\n\n  if (localChats.length || globalChats.length) {\n    global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n  }\n\n  if (localUsers.length || globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n  }\n\n  global = updateGlobalSearchFetchingStatus(global, { chats: false });\n  global = updateGlobalSearch(global, {\n    localResults: {\n      chatIds: localChats.map(({ id }) => id),\n      userIds: localUsers.map(({ id }) => id),\n    },\n    globalResults: {\n      ...global.globalSearch.globalResults,\n      chatIds: globalChats.map(({ id }) => id),\n      userIds: globalUsers.map(({ id }) => id),\n    },\n  });\n\n  setGlobal(global);\n}\n\nasync function searchMessagesGlobal(\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  let global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    setGlobal(updateGlobalSearchFetchingStatus(global, { messages: false }));\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  });\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateListedIds,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\n\naddActionHandler('searchTextMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  void searchTextMessages(chat, threadId, topMessageId, query, offsetId);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global) => {\n  const { chatId, threadId } = selectCurrentMessageList(global) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(chat, threadId, type, offsetId);\n});\n\naddActionHandler('searchMessagesByDate', (global, actions, payload) => {\n  const { timestamp } = payload!;\n\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void searchMessagesByDate(chat, timestamp);\n});\n\nasync function searchTextMessages(\n  chat: ApiChat,\n  threadId: number,\n  topMessageId?: number,\n  query?: string,\n  offsetId?: number,\n) {\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentTextSearch(global);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId);\n  setGlobal(global);\n}\n\nasync function searchSharedMedia(\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  let global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId);\n  global = updateListedIds(global, chat.id, threadId, newFoundIds);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(chat, threadId, type, nextOffsetId, true);\n  }\n}\n\nasync function searchMessagesByDate(chat: ApiChat, timestamp: number) {\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  getActions().focusMessage({\n    chatId: chat.id,\n    messageId,\n  });\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport { migrateChat } from './chats';\nimport { isChatBasicGroup } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('checkPublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (global.management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagement(global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined });\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  });\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic' });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  let chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  const { username } = payload!;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress);\n  setGlobal(global);\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(chat);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id });\n  }\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  setGlobal(updateManagement(global, chatId, { editingInvite: invite }));\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload) => {\n  const { chatId, invite } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId, isRevoked, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  setGlobal(updateManagement(global, chatId, update));\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const invites = (global.management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(global.management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  setGlobal(updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }));\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = global.management.byChatId[chatId].invites || [];\n  setGlobal(updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }));\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload) => {\n  const {\n    chatId, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = global.management.byChatId[chatId];\n  setGlobal(updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }));\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload) => {\n  const {\n    chatId, adminId,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(updateManagement(global, chatId, {\n    revokedInvites: [],\n  }));\n});\n\naddActionHandler('loadChatInviteImporters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (global, actions, payload) => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = global.management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, offsetDate, offsetUserId, limit,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = selectUser(global, offsetUserId);\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload) => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  }));\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload) => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  setGlobal(updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  }));\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload) => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  setGlobal(updateChat(getGlobal(), chatId, {\n    settings: undefined,\n  }));\n});\n","import {\n  addActionHandler, getGlobal, setGlobal, getActions,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { GlobalState, Thread } from '../../types';\n\nimport {\n  DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  updateUsers,\n  updateChats,\n  updateThreadInfos,\n  updateListedIds,\n  safeReplaceViewportIds,\n  addChatMessagesById,\n  updateThread,\n} from '../../reducers';\nimport {\n  selectCurrentMessageList,\n  selectDraft,\n  selectChatMessage,\n  selectThreadInfo,\n  selectEditingId,\n  selectEditingDraft,\n  selectChatMessages,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', () => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  setGlobal({ ...getGlobal(), isSyncing: true });\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    setGlobal({ ...getGlobal(), isSyncing: false });\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = getActions();\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages();\n\n      setGlobal({\n        ...getGlobal(),\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      });\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages() {\n  let areMessagesLoaded = false;\n\n  let global = getGlobal();\n  const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n  const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n  const threadInfo = currentThreadId && currentChatId\n    ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n  // TODO Fix comments chat id, or refetch chat thread here\n  const activeCurrentChatId = threadInfo?.originChannelId || currentChatId;\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Partial<Thread>>>((acc, chatId) => {\n    acc[chatId] = {};\n    acc[chatId].draft = selectDraft(global, chatId, activeThreadId);\n    acc[chatId].editingId = selectEditingId(global, chatId, activeThreadId);\n    acc[chatId].editingDraft = selectEditingDraft(global, chatId, activeThreadId);\n\n    return acc;\n  }, {});\n\n  const currentChat = activeCurrentChatId ? global.chats.byId[activeCurrentChatId] : undefined;\n  if (activeCurrentChatId && currentChat) {\n    const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n    global = getGlobal();\n    const { chatId: newCurrentChatId } = selectCurrentMessageList(global) || {};\n\n    if (result && newCurrentChatId === currentChatId) {\n      const currentChatMessages = selectChatMessages(global, activeCurrentChatId);\n      const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n        ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n        : [];\n      const topicLastMessages = currentChat.isForum && currentChat.topics\n        ? Object.values(currentChat.topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n        : [];\n\n      const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages, topicLastMessages);\n      const byId = buildCollectionByKey(allMessages, 'id');\n      const listedIds = Object.keys(byId).map(Number);\n\n      global = {\n        ...global,\n        messages: {\n          ...global.messages,\n          byChatId: {},\n        },\n      };\n\n      global = addChatMessagesById(global, activeCurrentChatId, byId);\n      global = updateListedIds(global, activeCurrentChatId, activeThreadId, listedIds);\n      global = safeReplaceViewportIds(global, activeCurrentChatId, activeThreadId, listedIds);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = updateThreadInfos(global, activeCurrentChatId, result.repliesThreadInfos);\n\n      areMessagesLoaded = true;\n    }\n  }\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    global = updateThread(global, chatId, activeThreadId, draftsByChatId[chatId]);\n  });\n\n  setGlobal(global);\n\n  if (currentChat?.isForum) {\n    getActions().loadTopics({ chatId: activeCurrentChatId!, force: true });\n    if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n      getActions().loadTopicById({\n        chatId: activeCurrentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n      });\n    }\n  }\n\n  const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n  if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n    getActions().closeAudioPlayer();\n  }\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  if (previousGlobal?.connectionState === connectionState && previousGlobal?.authState === authState) return;\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { getTranslation } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('reportPeer', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload) => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? getTranslation('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n  });\n});\n\naddActionHandler('loadAuthorizations', async () => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  setGlobal({\n    ...getGlobal(),\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  });\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllAuthorizations', async (global) => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  setGlobal({\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  });\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload) => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  });\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload) => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  });\n});\n\naddActionHandler('loadWebAuthorizations', async (global) => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  });\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload) => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  });\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global) => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  setGlobal({\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  });\n});\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport { selectChat, selectCurrentMessageList, selectUser } from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  callApi('fetchFullUser', { id, accessHash });\n});\n\naddActionHandler('loadUser', async (global, actions, payload) => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', (global) => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN) {\n    void loadTopUsers();\n  }\n});\n\naddActionHandler('loadContactList', () => {\n  void loadContactList();\n});\n\naddActionHandler('loadCurrentUser', () => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global) => {\n  const { chatId } = selectCurrentMessageList(global) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', (global, actions, payload) => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n  } = payload;\n\n  void updateContact(userId, isMuted, firstName, lastName, shouldSharePhoneNumber);\n});\n\naddActionHandler('deleteContact', (global, actions, payload) => {\n  const { userId } = payload!;\n\n  void deleteContact(userId);\n});\n\nasync function loadTopUsers() {\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadContactList() {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  let global = addUsers(getGlobal(), buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  setGlobal({\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  });\n}\n\nasync function updateContact(\n  userId: string,\n  isMuted: boolean,\n  firstName: string,\n  lastName?: string,\n  shouldSharePhoneNumber?: boolean,\n) {\n  let global = getGlobal();\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  getActions().updateChatMutedState({ chatId: userId, isMuted });\n\n  setGlobal(updateManagementProgress(getGlobal(), ManagementProgress.InProgress));\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    getActions().loadChatSettings({ chatId: userId });\n\n    setGlobal(updateUser(\n      getGlobal(),\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    ));\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete);\n  global = closeNewContactDialog(global);\n  setGlobal(global);\n}\n\nasync function deleteContact(userId: string) {\n  const global = getGlobal();\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n}\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload) => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  const user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload) => {\n  const { query } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(() => {\n    searchUsers(query);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload) => {\n  const { phoneNumber: phone, firstName, lastName } = payload!;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.getTranslation('Contacts.PhoneNumber.NotRegistred'),\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result });\n\n  setGlobal(closeNewContactDialog(getGlobal()));\n});\n\naddActionHandler('reportSpam', (global, actions, payload) => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\nasync function searchUsers(query: string) {\n  const result = await callApi('searchChats', { query });\n\n  let global = getGlobal();\n  const currentSearchQuery = global.userSearch.query;\n\n  if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n    setGlobal(updateUserSearchFetchingStatus(global, false));\n    return;\n  }\n\n  const { localUsers, globalUsers } = result;\n\n  let localUserIds;\n  let globalUserIds;\n  if (localUsers.length) {\n    global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n    localUserIds = localUsers.map(({ id }) => id);\n  }\n  if (globalUsers.length) {\n    global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n    globalUserIds = globalUsers.map(({ id }) => id);\n  }\n\n  global = updateUserSearchFetchingStatus(global, false);\n  global = updateUserSearch(global, { localUserIds, globalUserIds });\n\n  setGlobal(global);\n}\n","import type { GlobalState } from '../types';\nimport type { InlineBotSettings } from '../../types';\n\nexport function replaceInlineBotSettings(\n  global: GlobalState, username: string, inlineBotSettings: InlineBotSettings | false,\n): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      byUsername: {\n        ...global.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  };\n}\n\nexport function replaceInlineBotsIsLoading(global: GlobalState, isLoading: boolean): GlobalState {\n  return {\n    ...global,\n    inlineBots: {\n      ...global.inlineBots,\n      isLoading,\n    },\n  };\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload) => {\n  const { messageId, button } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, button.data);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({ receiptMessageId, chatId: chat.id, messageId });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(chat, messageId, undefined, true);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({ query, isSamePeer, messageId });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload) => {\n  const { command, chatId } = payload;\n  const { currentUserId } = global;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global);\n  const currentMessageList = selectCurrentMessageList(global);\n\n  if (!currentUserId || !chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId: chat.id, threadId, value: false });\n\n  void sendBotCommand(\n    chat, currentUserId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chatId),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload) => {\n  const { chatId } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  setGlobal(removeBlockedContact(getGlobal(), bot.id));\n  void sendBotCommand(chat, currentUserId, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global) => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload) => {\n  const {\n    chatId, username, query, offset,\n  } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      setGlobal(replaceInlineBotSettings(global, username, false));\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot({\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    });\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload) => {\n  const { query, isSamePeer, messageId } = payload;\n  const chat = selectCurrentChat(global);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload) => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined });\n  actions.clearWebPagePreview({ chatId, threadId, value: false });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload) => {\n  const { username } = payload;\n\n  let inlineBotData = global.inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n  };\n\n  setGlobal(replaceInlineBotSettings(global, username, inlineBotData));\n});\n\naddActionHandler('startBot', async (global, actions, payload) => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  bot = selectUser(getGlobal(), botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload) => {\n  const {\n    url, botId, theme, buttonText,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('requestWebView', async (global, actions, payload) => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    setGlobal({\n      ...global,\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    });\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  });\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload) => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp();\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload) => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global) => {\n  return {\n    ...global,\n    webApp: undefined,\n  };\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload) => {\n  if (!global.webApp?.url) return undefined;\n  return {\n    ...global,\n    webApp: {\n      ...global.webApp,\n      slug: payload.slug,\n    },\n  };\n});\n\naddActionHandler('cancelBotTrustRequest', (global) => {\n  return {\n    ...global,\n    botTrustRequest: undefined,\n  };\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload) => {\n  const { botId } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n  setGlobal({\n    ...global,\n    botTrustRequest: undefined,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  });\n\n  if (global.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = global.botTrustRequest.onConfirm;\n    actions[action](callbackPayload);\n  }\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload) => {\n  const { hash } = payload || {};\n  await loadAttachBots(hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload) => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot(bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  await loadAttachBots();\n}\n\nasync function loadAttachBots(hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal({\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  });\n}\n\naddActionHandler('callAttachBot', (global, actions, payload) => {\n  const {\n    chatId, bot, url, startParam, threadId,\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return {\n      ...global,\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    };\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload) => {\n  const { requestedAttachBotInstall } = global;\n  const { isWriteAllowed } = payload;\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInstall: undefined,\n  });\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: confirmPayload } = onConfirm;\n    actions[action](confirmPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInstall: undefined,\n  };\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload) => {\n  const { bot, filter, startParam } = payload;\n  const currentChatId = selectCurrentMessageList(global)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n    });\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  });\n});\n\naddActionHandler('cancelAttachBotInChat', (global) => {\n  return {\n    ...global,\n    requestedAttachBotInChat: undefined,\n  };\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload) => {\n  const {\n    chatId, buttonId, messageId, url,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.button) return;\n  const {\n    button, url,\n  } = global.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload) => {\n  const { url } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  setGlobal({\n    ...global,\n    urlAuth: {\n      url,\n    },\n  });\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload) => {\n  const { isWriteAllowed } = payload;\n  if (!global.urlAuth?.url) return;\n  const { url } = global.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  handleUrlAuthResult(url, result);\n});\n\naddActionHandler('closeUrlAuthModal', (global) => {\n  return {\n    ...global,\n    urlAuth: undefined,\n  };\n});\n\nfunction handleUrlAuthResult(url: string, result: ApiUrlAuthResult) {\n  if (result.type === 'request') {\n    const global = getGlobal();\n    if (!global.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    setGlobal({\n      ...global,\n      urlAuth: {\n        ...global.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    });\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  getActions().closeUrlAuthModal();\n}\n\nasync function searchInlineBot({\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}) {\n  let global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  });\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  const newInlineBotData = global.inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(getGlobal(), false);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  });\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, currentUserId: string, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton(chat: ApiChat, messageId: number, data?: string, isGame = false) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = getActions();\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window' });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' } });\n  } else if (message) {\n    showNotification({ message });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({ url, chatId: chat.id, messageId });\n      }\n    } else {\n      openUrl({ url });\n    }\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ApiChat, ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload) => {\n  const inputInvoice = selectPaymentInputInvoice(global);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const { requestInfo, saveInfo } = payload;\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(inputInvoice, requestInfo, saveInfo);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo({\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload) => {\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm({ slug: payload.slug });\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm({\n      chat,\n      messageId: payload.messageId,\n    });\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice);\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  });\n});\n\nasync function getPaymentForm(inputInvoice: ApiRequestInputInvoice): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  let global = setPaymentForm(getGlobal(), form);\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', (global, actions, payload) => {\n  const { receiptMessageId, chatId, messageId } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  void getReceipt(chat, messageId, receiptMessageId);\n});\n\nasync function getReceipt(chat: ApiChat, messageId: number, receiptMessageId: number) {\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  let global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message);\n  setGlobal(global);\n}\n\naddActionHandler('clearPaymentError', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      error: undefined,\n    },\n  });\n});\n\naddActionHandler('clearReceipt', (global) => {\n  setGlobal({\n    ...global,\n    payment: {\n      ...global.payment,\n      receipt: undefined,\n    },\n  });\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload) => {\n  const { nativeProvider } = global.payment;\n  const { credentials } = payload;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(data, publishableKey);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(data, publicToken);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload) => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global);\n  const formId = selectPaymentFormId(global);\n  const requestInfoId = selectPaymentRequestId(global);\n  const { nativeProvider, temporaryPassword } = global.payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global) : selectProviderPublicToken(global);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  setGlobal(updatePayment(global, { status: 'pending' }));\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe' ? selectStripeCredentials(global) : selectSmartGlocalCredentials(global),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' });\n  global = closeInvoice(global);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  },\n  publishableKey: string,\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n  let global = setStripeCardInfo(getGlobal(), {\n    type: result.type,\n    id: result.id,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials(\n  data: {\n    cardNumber: string;\n    cardholder?: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n  },\n  publicToken: string,\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    const global = getGlobal();\n    setGlobal({\n      ...global,\n      payment: {\n        ...global.payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    });\n    return;\n  }\n\n  let global = setSmartGlocalCardInfo(getGlobal(), {\n    type: 'card',\n    token: result.data.token,\n  });\n  global = setPaymentStep(global, PaymentStep.Checkout);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload = {}) => {\n  return setPaymentStep(global, payload.step ?? PaymentStep.Checkout);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload) => {\n  if (!global.premiumModal) return undefined;\n  const { isClosed } = payload || {};\n  return {\n    ...global,\n    premiumModal: {\n      ...global.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  };\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload) => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  setGlobal({\n    ...global,\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload) => {\n  const { forUserId } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  setGlobal({\n    ...global,\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  });\n});\n\naddActionHandler('closeGiftPremiumModal', (global) => {\n  setGlobal({\n    ...global,\n    giftPremiumModal: { isOpen: false },\n  });\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, { password }) => {\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } });\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } });\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout });\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo(inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: true) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n\n  let global = setRequestInfoId(getGlobal(), id);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions);\n    global = setPaymentStep(global, PaymentStep.Shipping);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global) => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload) => {\n  const { currentPassword, onSuccess } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload) => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload) => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  setGlobal(updateTwoFaSettings(global, { isLoading: true, error: undefined }));\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  setGlobal(updateTwoFaSettings(getGlobal(), { isLoading: false, waitingEmailCodeLength: undefined }));\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload) => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global) => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  return x - ((global.isLeftColumnShown && !IS_SINGLE_COLUMN_LAYOUT)\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction(\n  global: GlobalState, message: ApiMessage, userReactions: ApiReaction[],\n) {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions(\n  global: GlobalState, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n) {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat,\n  selectDefaultReaction,\n  selectLocalAnimatedEmojiEffectByName,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async () => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  setGlobal({\n    ...getGlobal(),\n    availableReactions: result,\n  });\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload) => {\n  const {\n    emoji, x, y, localEffect, startSize, isReversed,\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji || localEffect,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return {\n    ...global,\n    activeEmojiInteractions: [...(global.activeEmojiInteractions || []), activeEmojiInteraction],\n  };\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload) => {\n  const {\n    messageId, chatId, emoji, interactions, localEffect,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || (!emoji && !localEffect) || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji || selectLocalAnimatedEmojiEffectByName(localEffect),\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload) => {\n  const {\n    chatId, messageId,\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload) => {\n  const { chatId, reaction } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(global.activeReactions, [messageId]) : {\n      ...global.activeReactions,\n      [messageId]: [\n        ...(global.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = {\n      ...global,\n      activeReactions: newActiveReactions,\n    };\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('openChat', (global) => {\n  return {\n    ...global,\n    activeReactions: {},\n  };\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload) => {\n  const { messageId, reaction } = payload;\n\n  if (!global.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = global.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...global.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(global.activeReactions, [messageId]);\n\n  return {\n    ...global,\n    activeReactions: newActiveReactions,\n  };\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload) => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  setGlobal({\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  });\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload) => {\n  const { id } = payload;\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions?.filter((active) => active.id !== id),\n  };\n});\n\naddActionHandler('loadReactors', async (global, actions, payload) => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  setGlobal(updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  }));\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload) => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload) => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !global.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return {\n    ...global,\n    activeEmojiInteractions: global.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  };\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload) => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload) => {\n  const { messageIds } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return {\n    ...global,\n    activeReactions: {\n      ...global.activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  };\n});\n\naddActionHandler('focusNextReaction', (global, actions) => {\n  const chat = selectCurrentChat(global);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0] });\n});\n\naddActionHandler('readAllReactions', (global) => {\n  const chat = selectCurrentChat(global);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\n\naddActionHandler('loadStatistics', async (global, actions, payload) => {\n  const { chatId, isGroup } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  setGlobal(updateStatistics(global, chatId, stats));\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload) => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  setGlobal(updateMessageStatistics(global, result));\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload) => {\n  const {\n    chatId, token, name, isPercentage,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  setGlobal(updateStatisticsGraph(getGlobal(), chatId, name, result));\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n// Enough to animate and mark as read in Message List\nconst CURRENT_CHAT_UNREAD_DELAY = 1500;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum } = selectChat(global, update.id) || {};\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      setGlobal(updateChat(global, update.id, update.chat, update.newProfilePhoto));\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      // The property `isForum` was changed in another client\n      if (currentChatId === update.id && 'isForum' in update.chat && prevIsForum !== update.chat.isForum) {\n        if (prevIsForum) {\n          actions.closeForumPanel();\n        }\n        actions.openChat({ id: currentChatId });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      setGlobal(replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus));\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          setGlobal(replaceThreadParam(global, id, threadId, 'typingStatus', undefined));\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n      const { chatId: currentChatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const isActiveChat = (\n        messageListType === 'thread'\n        && threadId === MAIN_THREAD_ID\n        && update.chatId === currentChatId\n      );\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (isActiveChat) {\n        setTimeout(() => {\n          actions.requestChatUpdate({ chatId: update.chatId });\n        }, CURRENT_CHAT_UNREAD_DELAY);\n      } else {\n        global = updateChat(global, update.chatId, {\n          unreadCount: (chat.unreadCount || 0) + 1,\n          ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n        });\n      }\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      actions.showDialog({ data });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, GlobalActions, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectLocalAnimatedEmojiEffect,\n  selectLocalAnimatedEmoji,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n      if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage)) {\n        if (isLocal && message.isOutgoing && !(message.content?.action)) {\n          const currentMessageList = selectCurrentMessageList(global);\n          if (currentMessageList) {\n            // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n            actions.focusMessage({\n              chatId,\n              threadId: currentMessageList.threadId,\n              messageId: message.id,\n              noHighlight: true,\n              isResizingContainer: true,\n            });\n          }\n        }\n\n        const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n        if (threadInfo) {\n          actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n        }\n\n        // @perf Wait until scroll animation finishes or simply rely on delivery status update (which is itself delayed)\n        if (!isLocal) {\n          setTimeout(() => {\n            let delayedGlobal = getGlobal();\n            if (shouldForceReply) {\n              delayedGlobal = replaceThreadParam(delayedGlobal, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n            }\n            setGlobal(updateChatLastMessage(delayedGlobal, chatId, newMessage));\n          }, ANIMATION_DELAY);\n        }\n      } else {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      const { chatId: currentChatId } = selectCurrentMessageList(global) || {};\n\n      if (currentChatId !== update.id) return;\n      const message = selectChatMessage(global, currentChatId, update.messageId);\n\n      if (!message) return;\n\n      // Workaround for a weird behavior when interaction is received after watching reaction\n      if (getMessageText(message) !== update.emoji) return;\n\n      const localEmoji = selectLocalAnimatedEmoji(global, update.emoji);\n\n      global = {\n        ...global,\n        activeEmojiInteractions: [...(global.activeEmojiInteractions || []), {\n          id: global.activeEmojiInteractions?.length || 0,\n          animatedEffect: localEmoji ? selectLocalAnimatedEmojiEffect(localEmoji) : update.emoji,\n          messageId: update.messageId,\n        } as ActiveEmojiInteraction],\n      };\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, message.isOutgoing, currentMessage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      if (thread?.threadInfo) {\n        actions.markMessageListRead({ maxId: message.id });\n\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        setGlobal({\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        });\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        deleteMessages(getGlobal(), chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        setGlobal(updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        ));\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      setGlobal(updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      ));\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      setGlobal(updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message));\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        }));\n      } else if (media) {\n        setGlobal(updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        }));\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      setGlobal({\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      });\n      break;\n    }\n  }\n});\n\nfunction updateReactions(\n  global: GlobalState,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n) {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: GlobalState, chatId: string, id: number, message: Partial<ApiMessage>, isScheduled = false,\n) {\n  // Preserve locally uploaded media.\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n  if (currentMessage && message.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && message.content.photo) {\n      message.content.photo.blobUrl = photo.blobUrl;\n      message.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && message.content.video) {\n      message.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && message.content.sticker) {\n      message.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && message.content.document) {\n      message.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, message)\n    : updateChatMessage(global, chatId, id, message);\n}\n\nfunction updateThreadUnread(global: GlobalState, actions: GlobalActions, message: ApiMessage, isDeleting?: boolean) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds(global: GlobalState, actions: GlobalActions, message: ApiMessage) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      if (selectIsViewportNewest(global, chatId, threadInfo.threadId)) {\n        global = addViewportId(global, chatId, threadInfo.threadId, id);\n\n        if (!firstMessageId) {\n          global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n        }\n      }\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n      messagesCount: (threadInfo.messagesCount || 0) + 1,\n    });\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID)) {\n    // Always keep the first unread message in the viewport list\n    const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n    const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id);\n    const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID);\n\n    if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n      global = candidateGlobal;\n    }\n  }\n\n  return global;\n}\n\nfunction updateChatLastMessage(\n  global: GlobalState,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage(global: GlobalState, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages(global: GlobalState, chatId: string | undefined, ids: number[], actions: GlobalActions) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      setGlobal(deleteChatMessages(getGlobal(), chatId, ids));\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        setGlobal(deleteChatMessages(getGlobal(), commonBoxChatId, [id]));\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages(\n  chatId: string | undefined, ids: number[], actions: GlobalActions, global: GlobalState,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = deleteChatScheduledMessages(getGlobal(), chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  const global = getGlobal();\n\n  setGlobal(replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  }));\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      if (update.id === global.currentUserId && update.user.isPremium && !selectIsCurrentUserPremium(global)) {\n        actions.openPremiumModal({ isSuccess: true });\n      }\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(getGlobal(), update.id);\n      } else {\n        return removeBlockedContact(getGlobal(), update.id);\n      }\n\n    case 'updateResetContactList':\n      setGlobal({\n        ...getGlobal(),\n        contactList: {\n          userIds: [],\n        },\n      });\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      setGlobal({\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      });\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      global = setConfirmPaymentUrl(getGlobal(), update.url);\n      global = setPaymentStep(global, PaymentStep.ConfirmPayment);\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      if (global.webApp?.queryId === update.queryId) {\n        actions.setReplyingToId({ messageId: undefined });\n        actions.closeWebApp();\n      }\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      setGlobal(addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews }));\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSoundsForSafari } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          actions.leaveGroupCall({ shouldRemove: true });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n            isCallPanelVisible: undefined,\n            phoneCall: undefined,\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(getGlobal())!,\n          });\n        });\n\n        void initializeSoundsForSafari();\n        void checkNavigatorUserMediaPermissions(call.isVideo);\n        return {\n          ...global,\n          phoneCall: call,\n          isCallPanelVisible: false,\n        };\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update) => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { inputInvoice } = global.payment;\n\n      if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n        const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n        if (message && message.content.invoice) {\n          const { amount, currency, title } = message.content.invoice;\n\n          actions.showNotification({\n            message: langProvider.getTranslation('PaymentInfoHint', [\n              formatCurrency(amount, currency, langProvider.getTranslation.code),\n              title,\n            ]),\n          });\n        }\n      }\n\n      // On the production host, the payment frame receives a message with the payment event,\n      // after which the payment form closes. In other cases, the payment form must be closed manually.\n      // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n      if (!IS_PRODUCTION_HOST) {\n        global = closeInvoice(global);\n      }\n\n      if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n        return !IS_PRODUCTION_HOST ? global : undefined;\n      }\n\n      return {\n        ...global,\n        payment: {\n          ...global.payment,\n          status: 'paid',\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport { selectCurrentMessageList, selectTheme } from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst LEGACY_VERSION_URL = 'https://web.telegram.org/?legacy=1';\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n  } = getActions();\n\n  const lang = useLang();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen(SettingsScreens.PasscodeDisabled);\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleSwitchToLegacy = useCallback(() => {\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      <MenuItem\n        icon=\"archive\"\n        onClick={onSelectArchived}\n      >\n        <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n        {archivedUnreadChatsCount > 0 && (\n          <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n        )}\n      </MenuItem>\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <>\n          <MenuItem\n            icon=\"char-K\"\n            href={WEBK_VERSION_URL}\n            onClick={handleSwitchToWebK}\n          >\n            Switch to K Version\n          </MenuItem>\n          <MenuItem\n            icon=\"char-W\"\n            href={LEGACY_VERSION_URL}\n            onClick={handleSwitchToLegacy}\n          >\n            Switch to Old Version\n          </MenuItem>\n        </>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToLegacy,\n    handleSwitchToWebK, lang, onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className=\"passcode-lock\"\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = global.globalSearch;\n    const { currentUserId, connectionState, isSyncing } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(global.canInstall),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\nimport { selectIsForumPanelOpen } from '../../../global/selectors';\n\ntype OwnProps = {\n  onScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onScreenSelect,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder(index, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs || !folderTabs.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(Math.min(activeChatFolder + 1, folderTabs.length - 1), { forceOnHeavyAnimation: true });\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder(Math.max(0, activeChatFolder - 1), { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder(FIRST_FOLDER_INDEX);\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder(FIRST_FOLDER_INDEX, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder(folder, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onScreenSelect={onScreenSelect}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        activeChatFolder,\n      },\n      currentUserId,\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n    } = global;\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n  }, [onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onScreenSelect={onScreenSelect}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useOnChange from '../../hooks/useOnChange';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing(true);\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing(false);\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    'Mod+0': handleHotkeySavedMessages,\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useOnChange(() => {\n    if (nextSettingsScreen) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen(undefined);\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, setLeftColumnWidth, resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  isForumPanelOpen={isForumPanelOpen}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      chatFolders: {\n        activeChatFolder,\n      },\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      settings: {\n        nextScreen: nextSettingsScreen,\n      },\n      isUpdateAvailable,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = global.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: global.globalSearch.isClosing,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, {\n  useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport windowSize from '../../util/windowSize';\nimport useLang from '../../hooks/useLang';\nimport renderText from '../common/helpers/renderText';\n\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  // Prevent refresh by accidentally rotating device when listening to a voice message\n  const isVoicePlaying = isVoice && isPlaying;\n  useEffect(() => {\n    if (!isVoicePlaying) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isVoicePlaying]);\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number) => {\n    const rate = PLAYBACK_RATES[newRate];\n    setAudioPlayerPlaybackRate({ playbackRate: rate });\n    setPlaybackRate(rate);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    if (isContextMenuOpen) return;\n    updatePlaybackRate(playbackRate === 1 ? 2 : 1);\n  }, [isContextMenuOpen, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0] || 1;\n    return (\n      <Button\n        round\n        className={buildClassName('playback-button', playbackRate !== 1 && 'applied')}\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Playback Rate\"\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        onClick={handlePlaybackClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <span className=\"playback-button-inner\">\n          {playbackRate === 1 ? 2 : displayRate}Х\n        </span>\n      </Button>\n    );\n  }, [handleBeforeContextMenu, handleContextMenu, handlePlaybackClick, playbackRate]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <Button\n        round\n        className=\"player-button volume-button\"\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel=\"Volume\"\n        noPreventDefault\n      >\n        <i className={volumeIcon} onClick={handleVolumeClick} />\n        {!IS_IOS && (\n          <>\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </>\n        )}\n      </Button>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n        >\n          {renderPlaybackRateMenuItem(0.5, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(0.75, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(1, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(1.5, playbackRate, updatePlaybackRate)}\n          {renderPlaybackRateMenuItem(2, playbackRate, updatePlaybackRate)}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(rate: number, currentRate: number, onClick: (rate: number) => void) {\n  return (\n    <MenuItem\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={currentRate === PLAYBACK_RATES[rate] ? 'check' : undefined}\n      customIcon={currentRate !== PLAYBACK_RATES[rate] ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const { volume, playbackRate, isMuted } = global.audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TABLET_COLUMN_LAYOUT } from '../../util/environment';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n  }, [pinnedMessageIds]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ chatId, messageId, isUnpin: true });\n  }, [pinMessage, chatId]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({ chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id });\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [pinnedMessage, focusMessage, threadId, pinnedMessagesCount, pinnedMessageIndex]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (IS_SINGLE_COLUMN_LAYOUT || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    messageListType, currentTransitionKey, isSelectModeActive, openPreviousChat, shouldShowCloseButton,\n    openChat, toggleLeftColumn, exitMessageSelectMode, setBackButtonActive,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (lang('CommentsCount', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!IS_SINGLE_COLUMN_LAYOUT && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      <GroupCallTopPane\n        hasPinnedOffset={\n          (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n        }\n        chatId={chatId}\n      />\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const { isLeftColumnShown, lastSyncTime, shouldSkipHistoryAnimations } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, global.messages.messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID, IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\nconst INTERSECTION_MARGIN_FOR_LOADING = IS_SINGLE_COLUMN_LAYOUT ? 300 : 500;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[]) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO: Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    isGift && 'premium-gift',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <span>{content}</span>\n      {isGift && renderGift()}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const { direction: focusDirection, noHighlight: noFocusHighlight } = (isFocused && global.focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus } from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  onClick: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: openModal,\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport { selectLocalAnimatedEmojiEffectByName } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  localEffect?: string,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  const hasEffect = localEffect || emoji;\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, (emoji || localEffect) && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId,\n      messageId,\n      localEffect,\n      emoji,\n      interactions: interactions.current,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, localEffect, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!hasEffect || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      localEffect,\n      emoji,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [\n    chatId, emoji, hasEffect, interactWithAnimatedEmoji, isOwn,\n    localEffect, messageId, play, sendInteractionBunch, size,\n  ]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId,\n        emoticon: localEffect ? selectLocalAnimatedEmojiEffectByName(localEffect) : emoji,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [\n    activeEmojiInteractions, chatId, emoji, isOwn, localEffect, messageId, play, sendWatchingEmojiInteraction, size,\n  ]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectLocalAnimatedEmoji,\n  selectLocalAnimatedEmojiEffect,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  localSticker?: keyof typeof LOCAL_TGS_URLS;\n  localEffect?: string;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  localSticker,\n  localEffect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, localEffect, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return localSticker ? (\n    <AnimatedIconWithPreview\n      tgsUrl={LOCAL_TGS_URLS[localSticker]}\n      size={size}\n      quality={QUALITY}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className=\"AnimatedEmoji media-inner\"\n      style={style}\n      onClick={handleClick}\n    />\n  ) : (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  const localSticker = selectLocalAnimatedEmoji(global, emoji);\n\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n    localSticker,\n    localEffect: localSticker && withEffects ? selectLocalAnimatedEmojiEffect(localSticker) : undefined,\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, undefined, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, isDisabled?: boolean | string) {\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(isDisabled),\n    IS_SINGLE_COLUMN_LAYOUT && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [fullMediaData, hideSpoiler, isSpoilerShown, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme] as const);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <img\n        src={fullMediaData}\n        className=\"full-media\"\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme] as const);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl] as const);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openChat } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: chatId, threadId });\n  }, [openChat, chatId, threadId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TaAutZxIFX4go5HmM7Cg\",\"particle\":\"b5KMGtz_lQAs58tR80GG\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './CustomReactionAnimation.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomReactionAnimation: FC<OwnProps> = ({\n  reaction,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(stickerHash);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData) return undefined;\n\n  return (\n    <div className={styles.root}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomReactionAnimation);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomReactionAnimation from './CustomReactionAnimation';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 1.875 * REM;\nconst EFFECT_SIZE = 6.25 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomReactionAnimation reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div className={buildClassName('Reactions', isOutside && 'is-outside')}>\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ActiveEmojiInteraction, ActiveReaction, MessageListType } from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport {\n  AudioOrigin,\n} from '../../../types';\nimport {\n  MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectLocalAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, handleResize, true);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!) : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(getMinMediaWidth(Boolean(text), withCommentButton), albumLayout.containerStyle.width);\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        onClick={handleMetaClick}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !hasThread;\n    const textContentClass = buildClassName(\n      'text-content',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            <MessageText\n              message={message}\n              emojiSize={emojiSize}\n              highlight={highlight}\n              isProtected={isProtected}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n              withTranslucentThumbs={isCustomShape}\n            />\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, lastSyncTime,\n    } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && (\n      selectAnimatedEmoji(global, singleEmoji) || selectLocalAnimatedEmoji(global, singleEmoji)\n    ) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const messageTopic = threadId === MAIN_THREAD_ID ? selectTopicFromMessage(global, message) : undefined;\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && global.activeReactions[reactionMessage.id],\n      activeEmojiInteractions: global.activeEmojiInteractions,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, groupedId, groupedChatId: chatId,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId,\n        messageId: forwardInfo!.fromMessageId,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId, messageId: forwardInfo!.fromMessageId,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport { getActions } from '../../global';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  withUsers,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && !(message.id === threadTopMessageId)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={hasLinkedChat === false}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useOnChange from '../../../hooks/useOnChange';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useOnChange(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useOnChange(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [messageIds]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useOnChange from '../../hooks/useOnChange';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId)) || 0);\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useOnChange(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useOnChange(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useOnChange(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useOnChange(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useOnChange(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return groupMessages(orderBy(listedMessages, ['date', 'id']), memoUnreadDividerBeforeIdRef.current);\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useOnChange(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useOnChange` above\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {!botInfo && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      {hasUnreadReactions && (\n        <ScrollDownButton\n          icon=\"heart-outline\"\n          ariaLabelLang=\"AccDescrReactionMentionDown\"\n          onClick={focusNextReaction}\n          onReadAll={readAllReactions}\n          unreadCount={reactionsCount}\n        />\n      )}\n      {hasUnreadMentions && (\n        <ScrollDownButton\n          icon=\"mention\"\n          ariaLabelLang=\"AccDescrMentionDown\"\n          onClick={focusNextMention}\n          onReadAll={readAllMentions}\n          unreadCount={mentionsCount}\n        />\n      )}\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n\n    if (!options?.compressedBlobUrl && (shouldShrink || mimeType !== 'image/jpeg')) {\n      const resizedUrl = await scaleImage(\n        blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n      );\n      URL.revokeObjectURL(blobUrl);\n      return buildAttachment(filename, blob, {\n        compressedBlobUrl: resizedUrl,\n      });\n    }\n\n    if (mimeType === 'image/jpeg') {\n      filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n    }\n\n    quick = { width, height };\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    quick = { width, height, duration };\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(attachments: ApiAttachment[], shouldSendCompressed?: boolean) {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isAllowed: boolean,\n  html: string,\n  stickers?: ApiSticker[],\n  isDisabled = false,\n) {\n  const cleanHtml = useMemo(() => prepareForRegExp(html).trim(), [html]);\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n  const isSingleEmoji = (\n    (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n    || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n  );\n  const hasStickers = Boolean(stickers?.length) && isSingleEmoji;\n\n  useEffect(() => {\n    if (isDisabled) return;\n\n    if (isAllowed && isSingleEmoji) {\n      loadStickersForEmoji({\n        emoji: IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!,\n      });\n    } else if (hasStickers || !isSingleEmoji) {\n      clearStickersForEmoji();\n    }\n    // We omit `hasStickers` here to prevent re-fetching after manually closing tooltip (via <Esc>).\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [html, isSingleEmoji, clearStickersForEmoji, loadStickersForEmoji, isAllowed, isDisabled]);\n\n  return {\n    isStickerTooltipOpen: hasStickers,\n    closeStickerTooltip: clearStickersForEmoji,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport { debounce } from '../../../../util/schedulers';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\n// Used to avoid running debounced callbacks when chat changes.\nlet currentChatId: string | undefined;\nlet currentThreadId: number | undefined;\n\nconst useDraft = (\n  draft: ApiFormattedText | undefined,\n  chatId: string,\n  threadId: number,\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n  const prevDraft = usePrevious(draft);\n\n  const updateDraft = useCallback((draftChatId: string, draftThreadId: number) => {\n    const currentHtml = htmlRef.current;\n    if (currentHtml === undefined || editedMessage || !lastSyncTime) return;\n    if (currentHtml.length) {\n      saveDraft({ chatId: draftChatId, threadId: draftThreadId, draft: parseMessageInput(currentHtml!) });\n    } else {\n      clearDraft({ chatId: draftChatId, threadId: draftThreadId });\n    }\n  }, [clearDraft, editedMessage, htmlRef, lastSyncTime, saveDraft]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const runDebouncedForSaveDraft = useMemo(() => debounce((cb) => cb(), DRAFT_DEBOUNCE, false), [chatId]);\n\n  const prevChatId = usePrevious(chatId);\n  const prevThreadId = usePrevious(threadId);\n\n  // Save draft on chat change\n  useEffect(() => {\n    currentChatId = chatId;\n    currentThreadId = threadId;\n\n    return () => {\n      currentChatId = undefined;\n      currentThreadId = undefined;\n\n      updateDraft(chatId, threadId);\n    };\n  }, [chatId, threadId, updateDraft]);\n\n  // Restore draft on chat change\n  useEffect(() => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n      return;\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [\n    chatId, threadId, draft, setHtml, updateDraft, prevChatId, prevThreadId, editedMessage, prevDraft, loadCustomEmojis,\n  ]);\n\n  const html = htmlRef.current;\n  // Update draft when input changes\n  const prevHtml = usePrevious(html);\n  useEffect(() => {\n    if (!chatId || !threadId || prevChatId !== chatId || prevThreadId !== threadId || prevHtml === html) {\n      return;\n    }\n\n    if (html.length) {\n      runDebouncedForSaveDraft(() => {\n        if (currentChatId !== chatId || currentThreadId !== threadId) {\n          return;\n        }\n\n        updateDraft(chatId, threadId);\n      });\n    } else {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, html, prevChatId, prevHtml, prevThreadId, runDebouncedForSaveDraft, threadId, updateDraft]);\n\n  const handleBlur = useCallback(() => {\n    if (chatId && threadId) {\n      updateDraft(chatId, threadId);\n    }\n  }, [chatId, threadId, updateDraft]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n};\n\nexport default useDraft;\n","import { useCallback, useRef, useState } from '../lib/teact/teact';\n\nimport useRunDebounced from './useRunDebounced';\nimport useOnChange from './useOnChange';\nimport useHeavyAnimationCheck, { isHeavyAnimating } from './useHeavyAnimationCheck';\nimport useForceUpdate from './useForceUpdate';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useOnChange(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimationCheck(noop, handleUnfreeze);\n\n  return {\n    isFrozen: isHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { InlineBotSettings } from '../../../../types';\nimport useFlag from '../../../../hooks/useFlag';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useDebouncedMemo from '../../../../hooks/useDebouncedMemo';\n\nconst DEBOUNCE_MS = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isAllowed: boolean,\n  chatId: string,\n  html: string,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot } = getActions();\n\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDebouncedMemo(() => parseBotQuery(html), DEBOUNCE_MS, [html]) || {};\n  const prevQuery = usePrevious(query);\n  const prevUsername = usePrevious(username);\n  const inlineBotData = usernameLowered ? inlineBots?.[usernameLowered] : undefined;\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = inlineBotData || {};\n\n  useEffect(() => {\n    if (prevQuery !== query) {\n      unmarkIsOpen();\n    }\n  }, [prevQuery, query, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({ chatId, username: usernameLowered, query });\n    }\n  }, [query, isAllowed, queryInlineBot, chatId, usernameLowered]);\n\n  const loadMore = useCallback(() => {\n    if (isAllowed && usernameLowered && chatId) {\n      queryInlineBot({\n        chatId, username: usernameLowered, query, offset,\n      });\n    }\n  }, [isAllowed, usernameLowered, chatId, queryInlineBot, query, offset]);\n\n  useEffect(() => {\n    if (isAllowed && botId && (switchPm || (results?.length))) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [botId, isAllowed, markIsOpen, results, switchPm, unmarkIsOpen]);\n\n  if (prevUsername !== username) {\n    resetInlineBot({ username: prevUsername });\n  }\n\n  return {\n    isOpen,\n    id: botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: unmarkIsOpen,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return {\n    username: result[1],\n    query: result[2],\n    canShowHelp: result[2] === '' && !text.match(HAS_NEW_LINE),\n    usernameLowered: result[1].toLowerCase(),\n  };\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import {\n  useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport { throttle } from '../../../../util/schedulers';\nimport useFlag from '../../../../hooks/useFlag';\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\nconst RE_COMMAND = /^[\\w@]{1,32}\\s?/i;\n\nexport default function useBotCommandTooltip(\n  isAllowed: boolean,\n  html: string,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [isOpen, markIsOpen, unmarkIsOpen] = useFlag();\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n\n  const getFilteredCommands = useCallback((filter) => {\n    if (!botCommands && !chatBotCommands) {\n      setFilteredBotCommands(undefined);\n\n      return;\n    }\n\n    runThrottled(() => {\n      const nextFilteredBotCommands = (botCommands || chatBotCommands || [])\n        .filter(({ command }) => !filter || command.includes(filter));\n      setFilteredBotCommands(\n        nextFilteredBotCommands && nextFilteredBotCommands.length ? nextFilteredBotCommands : undefined,\n      );\n    });\n  }, [botCommands, chatBotCommands]);\n\n  useEffect(() => {\n    if (!isAllowed || !html.length) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const shouldShowCommands = html.startsWith('/');\n\n    if (shouldShowCommands) {\n      const filter = prepareForRegExp(html.substr(1)).match(RE_COMMAND);\n      getFilteredCommands(filter ? filter[0] : '');\n    } else {\n      setFilteredBotCommands(undefined);\n    }\n  }, [getFilteredCommands, html, isAllowed, unmarkIsOpen]);\n\n  useEffect(() => {\n    if (filteredBotCommands && filteredBotCommands.length && html.length > 0) {\n      markIsOpen();\n    } else {\n      unmarkIsOpen();\n    }\n  }, [filteredBotCommands, html.length, markIsOpen, unmarkIsOpen]);\n\n  return {\n    isOpen,\n    close: unmarkIsOpen,\n    filteredBotCommands,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef, useCallback, memo } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\n\nimport type { OwnProps as ButtonProps } from './Button';\nimport Button from './Button';\n\ntype OwnProps = {\n  onActivate: NoneToVoidFunction;\n} & Omit<ButtonProps, (\n  'onClick' | 'onMouseDown' |\n  'onMouseEnter' | 'onMouseLeave' |\n  'onFocus'\n)>;\n\nconst BUTTON_ACTIVATE_DELAY = 200;\nlet openTimeout: number | undefined;\nlet isFirstTimeActivation = true;\n\nconst ResponsiveHoverButton: FC<OwnProps> = ({ onActivate, ...buttonProps }) => {\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    isMouseInside.current = true;\n\n    // This is used to counter additional delay caused by asynchronous module loading\n    if (isFirstTimeActivation) {\n      isFirstTimeActivation = false;\n      onActivate();\n      return;\n    }\n\n    if (openTimeout) {\n      clearTimeout(openTimeout);\n      openTimeout = undefined;\n    }\n    openTimeout = window.setTimeout(() => {\n      if (isMouseInside.current) {\n        onActivate();\n      }\n    }, BUTTON_ACTIVATE_DELAY);\n  }, [onActivate]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n  }, []);\n\n  const handleClick = useCallback(() => {\n    isMouseInside.current = true;\n    onActivate();\n  }, [onActivate]);\n\n  return (\n    <Button\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...buttonProps}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      onClick={!IS_TOUCH_ENV ? onActivate : handleClick}\n    />\n  );\n};\n\nexport default memo(ResponsiveHoverButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CONTENT_TYPES_WITH_PREVIEW } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(CONTENT_TYPES_WITH_PREVIEW).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e, false));\n  }, [handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            <MenuItem icon=\"photo\" onClick={handleQuickSelect}>{lang('AttachmentMenu.PhotoOrVideo')}</MenuItem>\n            <MenuItem icon=\"document\" onClick={handleDocumentSelect}>{lang('AttachDocument')}</MenuItem>\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SymbolMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SymbolMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SymbolMenu = useModuleLoader(Bundles.Extra, 'SymbolMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SymbolMenu ? <SymbolMenu {...props} /> : undefined;\n};\n\nexport default memo(SymbolMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [replyingToId, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId, exitForwardMode]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(false)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors(true)}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(false)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions(true)}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = global;\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDebouncedMemo from '../../../hooks/useDebouncedMemo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageText: string;\n  disabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageText,\n  disabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const link = useDebouncedMemo(() => {\n    const { text, entities } = parseMessageInput(messageText);\n\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n    if (linkEntity) {\n      return linkEntity.url;\n    }\n\n    const textMatch = text.match(RE_LINK);\n    if (textMatch) {\n      return textMatch[0];\n    }\n\n    return undefined;\n  }, DEBOUNCE_MS, [messageText]);\n\n  useEffect(() => {\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [chatId, toggleMessageWebPage, clearWebPagePreview, link, loadWebPagePreview, threadId]);\n\n  useOnChange(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId]);\n\n  const isShown = Boolean(webPagePreview && messageText.length && !noWebPage && !disabled);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: global.webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR, MAX_UPLOAD_FILEPART_SIZE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_SINGLE_COLUMN_LAYOUT, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useOnChange from '../../../hooks/useOnChange';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useDraft from './hooks/useDraft';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport SymbolMenu from './SymbolMenu.async';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiFormattedText;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: GlobalState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: GlobalState['messages']['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = GlobalState['messages']['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    openPremiumModal,\n    addRecentCustomEmoji,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  const [html, setInnerHtml] = useState<string>('');\n  const htmlRef = useStateRef(html);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const setHtml = useCallback((newHtml: string) => {\n    setInnerHtml(newHtml);\n    requestAnimationFrame(() => {\n      processMessageInputForCustomEmoji();\n    });\n  }, []);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useOnChange(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n\n  const {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isSymbolMenuLoaded, onSymbolMenuLoadingComplete] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  useEffect(() => {\n    if (!html || editingMessage) return;\n    sendMessageAction({ type: 'typing' });\n  }, [editingMessage, html, sendMessageAction]);\n\n  const mainButtonState = editingMessage ? MainButtonState.Edit\n    : (!IS_VOICE_RECORDING_SUPPORTED || activeVoiceRecording || (html && !attachments.length) || isForwarding)\n      ? (shouldSchedule ? MainButtonState.Schedule : MainButtonState.Send)\n      : MainButtonState.Record;\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    !attachments.length,\n    EDITABLE_INPUT_CSS_SELECTOR,\n    setHtml,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    id: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(!attachments.length && lastSyncTime),\n    chatId,\n    html,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean((botCommands && botCommands.length) || (chatBotCommands && chatBotCommands.length)),\n    html,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const { isStickerTooltipOpen, closeStickerTooltip } = useStickerTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    html,\n    stickersForEmoji,\n    !isReady,\n  );\n  const { isCustomEmojiTooltipOpen, closeCustomEmojiTooltip, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji && !attachments.length),\n    EDITABLE_INPUT_CSS_SELECTOR,\n    html,\n    setHtml,\n    customEmojiForEmoji,\n    !isReady,\n  );\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(shouldSuggestStickers && canSendStickers && !attachments.length),\n    htmlRef,\n    recentEmojis,\n    undefined,\n    setHtml,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${htmlRef.current!}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [htmlRef, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const removeSymbol = useCallback(() => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, EDITABLE_INPUT_ID)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(htmlRef.current!));\n  }, [htmlRef, setHtml]);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n    setAttachments(MEMO_EMPTY_ARRAY);\n    closeStickerTooltip();\n    closeCustomEmojiTooltip();\n    closeMentionTooltip();\n    closeEmojiTooltip();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip, closeSymbolMenu, setHtml]);\n\n  // Handle chat change (ref is used to avoid redundant effect calls)\n  const stopRecordingVoiceRef = useRef<typeof stopRecordingVoice>();\n  stopRecordingVoiceRef.current = stopRecordingVoice;\n  useEffect(() => {\n    return () => {\n      stopRecordingVoiceRef.current!();\n      resetComposer();\n    };\n  }, [chatId, threadId, resetComposer, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: () => openPremiumModal({ initialSection: 'animated_emoji' }),\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: () => openChat({ id: currentUserId, shouldReplaceHistory: true }),\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, openChat, openPremiumModal, showNotification]);\n\n  const [handleEditComplete, handleEditCancel] = useEditing(\n    htmlRef,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n  );\n  useDraft(draft, chatId, threadId, htmlRef, setHtml, editingMessage, lastSyncTime);\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength,\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed,\n    sendGrouped,\n    isSilent,\n    scheduledAt,\n  } : {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, checkSlowMode, clearDraft, htmlRef, resetComposer, sendMessage, validateTextLength, connectionState]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, htmlRef, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleActivateSymbolMenu = useCallback(() => {\n    closeBotCommandMenu();\n    closeSendAsMenu();\n    openSymbolMenu();\n  }, [closeBotCommandMenu, closeSendAsMenu, openSymbolMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSearchOpen = useCallback((type: 'stickers' | 'gifs') => {\n    if (type === 'stickers') {\n      setStickerSearchQuery({ query: '' });\n      setGifSearchQuery({ query: undefined });\n    } else {\n      setGifSearchQuery({ query: '' });\n      setStickerSearchQuery({ query: undefined });\n    }\n  }, [setStickerSearchQuery, setGifSearchQuery]);\n\n  const handleSymbolMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      openSymbolMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      openSymbolMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [openSymbolMenu, closeBotCommandMenu]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!IS_SINGLE_COLUMN_LAYOUT || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'scheduled' });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && IS_SINGLE_COLUMN_LAYOUT) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const symbolMenuButtonClassName = buildClassName(\n    'mobile-symbol-menu-button',\n    !isReady && 'not-ready',\n    isSymbolMenuLoaded\n      ? (isSymbolMenuOpen && 'menu-opened')\n      : (isSymbolMenuOpen && 'is-loading'),\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const isBotMenuButtonCommands = botMenuButton && botMenuButton?.type === 'commands';\n  const shouldDisplayBotCommands = isChatWithBot && isBotMenuButtonCommands && botCommands !== false\n    && !activeVoiceRecording && !editingMessage;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        caption={attachments.length ? html : ''}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        onClose={closeMentionTooltip}\n        onInsertUserName={insertMention}\n        filteredUsers={mentionFilteredUsers}\n      />\n      <InlineBotTooltip\n        isOpen={isInlineBotTooltipOpen}\n        botId={inlineBotId}\n        isGallery={isInlineBotTooltipGallery}\n        inlineBotResults={inlineBotResults}\n        switchPm={inlineBotSwitchPm}\n        onSelectResult={handleInlineBotSelect}\n        loadMore={loadMoreForInlineBot}\n        onClose={closeInlineBotTooltip}\n        isSavedMessages={isChatWithSelf}\n        canSendGifs={canSendGifs}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n        <ComposerEmbeddedMessage onClear={handleEmbeddedClear} />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          messageText={!attachments.length ? html : ''}\n          disabled={!canAttachEmbedLinks}\n        />\n        <div className=\"message-input-wrapper\">\n          {isChatWithBot && botMenuButton && botMenuButton.type === 'webApp' && !editingMessage\n            && (\n              <BotMenuButton\n                isOpen={!html && !activeVoiceRecording}\n                onClick={handleClickBotMenu}\n                text={botMenuButton.text}\n                isDisabled={Boolean(activeVoiceRecording)}\n              />\n            )}\n          {shouldDisplayBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT ? (\n            <Button\n              className={symbolMenuButtonClassName}\n              round\n              color=\"translucent\"\n              onClick={isSymbolMenuOpen ? closeSymbolMenu : handleSymbolMenuOpen}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n              <i className=\"icon-keyboard\" />\n              {isSymbolMenuOpen && !isSymbolMenuLoaded && <Spinner color=\"gray\" />}\n            </Button>\n          ) : (\n            <ResponsiveHoverButton\n              className={buildClassName('symbol-menu-button', isSymbolMenuOpen && 'activated')}\n              round\n              color=\"translucent\"\n              onActivate={handleActivateSymbolMenu}\n              ariaLabel=\"Choose emoji, sticker or GIF\"\n            >\n              <i className=\"icon-smile\" />\n            </ResponsiveHoverButton>\n          )}\n          <MessageInput\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            threadId={threadId}\n            html={!attachments.length ? html : ''}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : botKeyboardPlaceholder || lang('Message')\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && !attachments.length}\n            noFocusInterception={attachments.length > 0}\n            shouldSuppressFocus={IS_SINGLE_COLUMN_LAYOUT && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <SymbolMenu\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isSymbolMenuOpen || isSymbolMenuForced}\n            canSendGifs={canSendGifs}\n            canSendStickers={canSendStickers}\n            onLoad={onSymbolMenuLoadingComplete}\n            onClose={closeSymbolMenu}\n            onEmojiSelect={insertTextAndUpdateCursor}\n            onStickerSelect={handleStickerSelect}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            onGifSelect={handleGifSelect}\n            onRemoveSymbol={removeSymbol}\n            onSearchOpen={handleSearchOpen}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, messageListType }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const messageWithActualBotKeyboard = isChatWithBot && selectNewestMessageWithBotKeyboardButtons(global, chatId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId\n      && chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId) ? defaultSendAsId\n      : (chat?.adminRights?.anonymous ? chat?.id : undefined);\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === global.forwardMessages.toChatId,\n      pollModal: global.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: global.messages.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: global.inlineBots.byUsername,\n      isInlineBotLoading: global.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n    };\n  },\n)(Composer));\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n}) {\n  const { openLimitReachedModal } = getActions();\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        setAttachments(MEMO_EMPTY_ARRAY);\n        return;\n      }\n\n      if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n      }\n    }, [attachments, fileSizeLimit, openLimitReachedModal, setAttachments],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n  };\n}\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  htmlRef: { current: string },\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n) => {\n  const { editMessage, setEditingDraft } = getActions();\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage) {\n      return;\n    }\n    if (prevEditedMessage?.id === editedMessage.id) {\n      return;\n    }\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n    setHtml(html);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const edited = parseMessageInput(htmlRef.current!);\n      const update = edited.text.length ? edited : undefined;\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(htmlRef.current!);\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageId: editedMessage.id,\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, htmlRef, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(htmlRef.current!);\n    const update = edited.text.length ? edited : undefined;\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, htmlRef, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n} from '../../config';\nimport {\n  IS_SINGLE_COLUMN_LAYOUT,\n  IS_TABLET_COLUMN_LAYOUT,\n  MASK_IMAGE_DISABLED,\n} from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useOnChange from '../../hooks/useOnChange';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinnedOrAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  isMobileSearchActive?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nconst CLOSE_ANIMATION_DURATION = IS_SINGLE_COLUMN_LAYOUT ? 450 + ANIMATION_END_DELAY : undefined;\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinnedOrAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  isMobileSearchActive,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const hasTools = hasPinnedOrAudioPlayer && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, CLOSE_ANIMATION_DURATION);\n  const renderingThreadId = usePrevDuringAnimation(threadId, CLOSE_ANIMATION_DURATION);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, CLOSE_ANIMATION_DURATION);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, CLOSE_ANIMATION_DURATION);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, CLOSE_ANIMATION_DURATION);\n  const renderingCanPost = usePrevDuringAnimation(canPost, CLOSE_ANIMATION_DURATION)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, CLOSE_ANIMATION_DURATION);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, CLOSE_ANIMATION_DURATION);\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, CLOSE_ANIMATION_DURATION);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, CLOSE_ANIMATION_DURATION);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, CLOSE_ANIMATION_DURATION);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useOnChange(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsFabShown(undefined);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId, threadId });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(IS_TABLET_COLUMN_LAYOUT && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {IS_SINGLE_COLUMN_LAYOUT && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {IS_SINGLE_COLUMN_LAYOUT && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const { messageLists } = global.messages;\n    const currentMessageList = selectCurrentMessageList(global);\n    const {\n      isLeftColumnShown, chats: { listIds }, activeEmojiInteractions, lastSyncTime,\n    } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isBackgroundBlurred,\n      isMobileSearchActive: Boolean(IS_SINGLE_COLUMN_LAYOUT && selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(global.seenByModal),\n      isReactorListModalOpen: Boolean(global.reactorModal),\n      isGiftPremiumModalOpen: global.giftPremiumModal?.isOpen,\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n\n    const canPost = chat && getCanPostInChat(chat, threadId);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockBeforeReply = chat?.isForum ? (threadId === MAIN_THREAD_ID && !replyingToId) : false;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !(isScheduledMessageList && chat?.isForum && threadId === MAIN_THREAD_ID)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockBeforeReply,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinnedOrAudioPlayer: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n        || Boolean(audioChatId && audioMessageId)\n      ),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n) {\n  const [isReady, setIsReady] = useState(!IS_SINGLE_COLUMN_LAYOUT);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useOnChange(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={toggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={toggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    IS_SINGLE_COLUMN_LAYOUT\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && global.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId ? global.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useOnChange from '../../../hooks/useOnChange';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useOnChange(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useOnChange(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  isFirstTab?: boolean,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType, prevIsFirstTab]) => {\n    if (isFirstTab === prevIsFirstTab) {\n      return;\n    }\n\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, isFirstTab, onProfileStateChange]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n  selectListedIds,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport { pickTruthy } from '../../util/iteratees';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  messageIds?: number[];\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  messageIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const chatMessages = useMemo(() => {\n    return messageIds && messagesById ? pickTruthy(messagesById, messageIds) : {};\n  }, [messagesById, messageIds]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, tabType, profileState, onProfileStateChange, isFirstTab);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState(NewChatMembersProgress.InProgress);\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !chatMessages) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Media\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Document\n              key={id}\n              message={chatMessages[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <WebLink\n              key={id}\n              message={chatMessages[id]}\n              isProtected={isChatProtected || chatMessages[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => chatMessages[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={chatMessages[id]}\n              senderTitle={getSenderName(lang, chatMessages[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={chatMessages[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !chatMessages[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n    const messageIds = selectListedIds(global, chatId, topicId || MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      messageIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, newChatMembersProgress } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState(NewChatMembersProgress.Closed);\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo(undefined, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ invite: undefined });\n            setEditingExportedInvite({ chatId, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const nextManagementScreen = chatId ? global.management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations: global.shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = global.activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\nimport windowSize from '../../util/windowSize';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../lib/teact/teactn';\n\nimport { createLocationHash } from '../../util/routing';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: global.messages.messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useOnChange from '../../hooks/useOnChange';\nimport useForceUpdate from '../../hooks/useForceUpdate';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: GlobalState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_AMOUNT = IS_SINGLE_COLUMN_LAYOUT ? 50 : 100;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  function generateConfetti(w: number, h: number, amount = DEFAULT_CONFETTI_AMOUNT) {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }\n\n  const updateCanvas = () => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  };\n\n  useOnChange(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      if (hideTimeout) {\n        clearTimeout(hideTimeout);\n      }\n    };\n  }, [lastConfettiTime, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, GlobalState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport windowSize from '../../util/windowSize';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { fastRaf } from '../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useOnChange from '../../hooks/useOnChange';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\ntype StateProps = {\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: GlobalState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: GlobalState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: GlobalState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: GlobalState['requestedAttachBotInChat'];\n  requestedDraft?: GlobalState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: GlobalState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n};\n\nconst NOTIFICATION_INTERVAL = 1000;\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\n\nlet notificationInterval: number | undefined;\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<StateProps> = ({\n  lastSyncTime,\n  isLeftColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  deleteFolderDialogId,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  useInterval(checkAppVersion, APP_OUTDATED_TIMEOUT_MS, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime] as const);\n\n  // Prevent refresh by accidentally rotating device when listening to a voice chat\n  useEffect(() => {\n    if (!activeGroupCallId && !isPhoneCallActive) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [activeGroupCallId, isPhoneCallActive]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useOnChange(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useOnChange(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    updateIsOnline(false);\n\n    const initialUnread = getAllNotificationsCount();\n    let index = 0;\n\n    clearInterval(notificationInterval);\n    notificationInterval = window.setInterval(() => {\n      if (document.title.includes(INACTIVE_MARKER)) {\n        updateIcon(false);\n        return;\n      }\n\n      if (index % 2 === 0) {\n        const newUnread = getAllNotificationsCount() - initialUnread;\n        if (newUnread > 0) {\n          updatePageTitle(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n          updateIcon(true);\n        }\n      } else {\n        updatePageTitle(PAGE_TITLE);\n        updateIcon(false);\n      }\n\n      index++;\n    }, NOTIFICATION_INTERVAL);\n  }, [updateIsOnline]);\n\n  const handleFocus = useCallback(() => {\n    updateIsOnline(true);\n\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle(PAGE_TITLE);\n    }\n\n    updateIcon(false);\n  }, [updateIsOnline]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn />\n      <RightColumn />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nfunction updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nfunction updatePageTitle(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      lastSyncTime,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n    } = global;\n    const { chatId: audioChatId, messageId: audioMessageId } = global.audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const openedGame = global.openedGame;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: global.isLeftColumnShown,\n      isRightColumnOpen: selectIsRightColumnShown(global),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(global.notifications.length),\n      hasDialogs: Boolean(global.dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: global.groupCalls.activeGroupCallId,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: Boolean(global.phoneCall),\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: global.newContact?.userId,\n      newContactByPhoneNumber: global.newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(global.ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isPremiumModalOpen: global.premiumModal?.isOpen,\n      limitReached: global.limitReachedModal?.limit,\n      isPaymentModalOpen: global.payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(global.payment.receipt),\n      deleteFolderDialogId: global.deleteFolderDialogModal,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { connectionState, passcode: { isScreenLocked } } = getGlobal();\nif (!connectionState && !isScreenLocked) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","replaceLocalTextSearchResults","undefined","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","currentMessageList","premiumModal","promo","isOpen","replaceThreadParam","exitMessageSelectMode","isStatisticsShown","messages","contentToBeScheduled","forwardMessages","toChatId","forumPanelChatId","closeForumPanel","updateCurrentMessageList","setGlobal","isChatInfoShown","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","selectChat","lastMessage","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","selectIsRightColumnShown","pollResults","voters","window","setTimeout","getGlobal","noForumTopicPanel","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","shouldSwitchChat","clearTimeout","newGlobal","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","chat","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickers","search","resultIds","gifs","offsetId","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","action","leftColumnWidth","management","isActive","screen","nextScreen","IS_SINGLE_COLUMN_LAYOUT","IS_TABLET_COLUMN_LAYOUT","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","openedGame","botTrustRequest","onConfirm","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","isHidden","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","currentUserId","globalJson","serializeGlobal","encryptSession","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_STATE","isScreenLocked","invalidAttemptsCount","initApi","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","round","MESSAGE_LIST_SLICE","callApi","selectThreadOriginChat","users","repliesThreadInfos","localMessages","isDeleted","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","getAttachmentType","shouldSendAsFile","mimeType","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","replyMessage","updateChatMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","scheduledAt","isForum","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","value","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","arr","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","user","selectUser","isDeletedUser","replyToMsgId","isLocal","updateChat","draftDate","localOnly","selectDraft","isUnpin","isOneSide","isSilent","unpinAllMessages","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","getTranslation","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","l","countSortedIds","topics","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","loadWebPagePreview","options","poll","option","offset","shouldResetVoters","offsets","nextOffset","loadPollOptionResults","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","loadScheduledHistory","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","loadPinnedMessages","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","closeMediaViewer","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","getActions","shortName","packs","updateStickerSet","currentEmoji","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","loadFavoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","loadSavedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","openPremiumModal","className","newGifs","current","unfave","unfaveSticker","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchStickers","searchWords","config","gifSearchUsername","updateStickersForEmoji","loadStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","searchChats","timestampPlusDay","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","searchTextMessages","currentType","timestamp","searchMessagesByDate","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","isChatBasicGroup","migrateChat","invite","editingInvite","update","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","releaseStatusTimeout","previousGlobal","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","currentChatId","currentThreadId","activeThreadId","threadInfo","activeCurrentChatId","originChannelId","draftsByChatId","editingDraft","selectEditingDraft","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","values","updateChats","updateUsers","updateThread","loadTopics","force","loadTopicById","shouldCloseChatOnError","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","addCallback","connectionState","authState","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","loadTopUsers","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","loadContactList","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","updateContact","deleteContact","profileId","isPrivate","isUserId","photos","userOrChat","avatarHash","userSearch","updateUserSearchFetchingStatus","searchUsers","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","botUser","confirmPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","selectPaymentInputInvoice","saveInfo","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","nativeProvider","credentials","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","localEffect","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","selectLocalAnimatedEmojiEffectByName","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","omit","activeReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","msgId","updateStatistics","views","forwards","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","isActiveChat","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","messagesCount","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","repliesThreadInfo","isTopicReply","selectIsMessageInCurrentMessageList","delayedGlobal","getMessageText","localEmoji","selectLocalAnimatedEmoji","selectLocalAnimatedEmojiEffect","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","newThreadInfo","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","isPending","transcriptions","flushStatusUpdatesThrottled","pendingStatusUpdates","loadFullUser","emojiStatus","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","oldOrder","newOrder","reorderStickerSets","loadStickerSets","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","updateGroupCall","participantsCount","groupCallId","participants","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","needRating","ratingPhoneCall","isCallPanelVisible","notifyAboutCall","selectPhoneCallUser","initializeSoundsForSafari","checkNavigatorUserMediaPermissions","isVideo","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","getAllNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isMinimized","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","ANIMATION_LEVEL_OPTIONS","withGlobal","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","useMemo","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","useCallback","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ripple","ariaLabel","buildClassName","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleSwitchToLegacy","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","activeChatFolder","shouldSkipHistoryAnimations","isForumPanelOpen","selectIsForumPanelOpen","maxFolders","foldersDispatch","onScreenSelect","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","useRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","ref","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","onClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleHotkeySettings","IS_MAC_OS","useOnChange","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","style","setProperty","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","useMedia","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","src","alt","MediaSpoiler","isVisible","renderPictogram","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","renderPlaybackRateMenuItem","rate","currentRate","customIcon","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","getChatTitle","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isVoicePlaying","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","handlePlaybackClick","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","noPreventDefault","RangeSlider","bold","forceOpen","onHide","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","getUserFirstOrLastName","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","firstPinnedMessage","isReady","pinMessage","openPreviousChat","toggleLeftColumn","isBackButtonActive","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","INTERSECTION_MARGIN_FOR_LOADING","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","styles","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","textContent","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","clearInterval","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","ContextMenuContainer","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","role","AnimatedIconFromSticker","play","noLoop","nonInteractive","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","outgoingStatus","signature","withReactionOffset","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","openModal","actionText","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","withSharedAnimation","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","localSticker","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","AnimatedIconWithPreview","LOCAL_TGS_URLS","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","CustomEmoji","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","isSelected","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withThumb","noThumb","thumbRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","Avatar","withVideo","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","getServerTimeOffset","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","useTimeout","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","recentReplierIds","recentRepliers","hasUnread","commentsText","AnimatedCounter","stickerHash","getStickerPreviewHash","previewMediaData","paths","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","path","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","requestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","messageTopic","hasTopicChip","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","selectOutgoingStatus","isTranscribing","transcribedText","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openMediaViewer","openAudioPlayer","sendPollVote","focusMessageInComments","replyToTopMessageId","channelPostId","MediaViewerOrigin","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","MessageText","withTranslucentThumbs","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","threshold","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","compact","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isChannelChat","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","querySelectorAll","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","useEffectWithPrevDeps","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","shouldShrink","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","init","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","reject","onstop","onerror","delayStop","STYLE_TAG_REGEX","useDebouncedMemo","resolverFn","ms","dependencies","setValue","isFrozen","updateWhenUnfrozen","handleUnfreeze","useHeavyAnimationCheck","noop","isHeavyAnimating","useHeavyAnimationFreeze","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","runThrottled","RE_COMMAND","DeleteMessageModal","openTimeout","isFirstTimeActivation","onActivate","buttonProps","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","DOMParser","parseFromString","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","SymbolMenu","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","stripCustomEmoji","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","messageText","toggleMessageWebPage","linkEntity","entity","ApiMessageEntityTypes","textMatch","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","setStickerSearchQuery","setGifSearchQuery","closePollModal","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","html","setInnerHtml","htmlRef","useStateRef","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","setHtml","newHtml","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","setAttachments","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldSuggestCompression","newValue","newAttachments","file","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isSymbolMenuLoaded","onSymbolMenuLoadingComplete","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetInlineBot","markIsOpen","unmarkIsOpen","innerText","getPlainText","parseBotQuery","prevQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","getFilteredCommands","nextFilteredBotCommands","prepareForRegExp","substr","useBotCommandTooltip","isCustomSendMenuOpen","canSendStickers","canSendGifs","canAttachEmbedLinks","getAllowedAttachmentOptions","isChatAdmin","slowMode","getChatSlowModeOptions","isStickerTooltipOpen","closeStickerTooltip","cleanHtml","clearStickersForEmoji","isSingleEmoji","IS_EMOJI_SUPPORTED","parseEmojiOnlyString","hasStickers","useStickerTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","useEmojiTooltip","insertHtmlAndUpdateCursor","EDITABLE_INPUT_ID","selection","getSelection","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertTextAndUpdateCursor","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","removeSymbol","execCommand","tempInput","contentEditable","lastChild","textLength","range","createRange","setStart","setEnd","removeAllRanges","addRange","removeChild","deleteLastCharacterOutsideSelection","resetComposer","shouldPreserveInput","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","handleEditComplete","handleEditCancel","editedMessage","editMessage","setEditingDraft","prevEditedMessage","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","saveDraft","prevDraft","updateDraft","draftChatId","draftThreadId","currentHtml","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","customEmojiIds","prevHtml","useDraft","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","textContents","getElementsByTagName","node","HTMLElement","tagName","replaceWith","createTextNode","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","trimEnd","preparePastedHtml","containsCustomEmoji","items","getFilesFromDataTransferItems","textToPaste","useClipboardPaste","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleActivateSymbolMenu","handleMessageSchedule","args","restArgs","handleCustomEmojiSelect","isFree","isScheduleRequested","handleGifSelect","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSearchOpen","handleSymbolMenuOpen","handleSendAsMenuOpen","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","symbolMenuButtonClassName","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","shouldDisplayBotCommands","DropAreaState","withQuick","caption","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","shouldBeAnonymous","selectedSendAsId","onInsertUserName","filteredUsers","onSelectResult","isSavedMessages","withUsername","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","onCustomEmojiSelect","onStickerSelect","onEmojiSelect","onGifSelect","onRemoveSymbol","onSearchOpen","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","CLOSE_ANIMATION_DURATION","isImage","kind","isBlurred","isBackgroundBlurred","background","customBackground","patternColor","themes","isMobileSearchActive","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockBeforeReply","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinnedOrAudioPlayer","loadUser","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","settingValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","loadProfilePhotos","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","prevIsFirstTab","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","useCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","messageList","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","DEFAULT_CONFETTI_AMOUNT","CONFETTI_COLORS","canvasRef","confettiRef","isRafStartedRef","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","pos","velocity","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","leftSide","randomX","randomColor","generateConfetti","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","notificationInterval","DEBUG_isLogged","updateIcon","asUnread","updatePageTitle","nextTitle","wasTimeFormatSetManually","currentUser","isLeftColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","initialUnread","setInterval","INACTIVE_MARKER","newUnread","PAGE_TITLE","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","handleSignOutMessage","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link"],"sourceRoot":""}