{"version":3,"file":"8422.ea306e5c775eafd9d448.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ChatListType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isLocalMessageId,\n  isUserBot,\n  toChannelId,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addSimilarChannels,\n  addUsers,\n  addUserStatuses,\n  addUsersToRestrictedInviteList,\n  deleteChatMessages,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatLastMessageId,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectLastServiceNotification,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n  actions.closeStoryViewer({ tabId });\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: Number(loadingThreadId),\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.translate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.translate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType;\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return selectChatLastMessage(global, chat.id)?.date || chat.creationDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, tabId = getCurrentTabId(), withPhotos,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat, tabId);\n    if (withPhotos) {\n      actions.loadProfilePhotos({ profileId: chatId });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active');\n    loadChats('archived');\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = updateChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let restrictedUserIds: string[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    restrictedUserIds = result?.restrictedUserIds;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (restrictedUserIds) {\n    global = getGlobal();\n    global = addUsersToRestrictedInviteList(global, restrictedUserIds, channelId, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChatId: string | undefined;\n  try {\n    const { chat: createdChat, restrictedUserIds } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n    createdChatId = chatId;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n    if (restrictedUserIds) {\n      global = getGlobal();\n      global = addUsersToRestrictedInviteList(global, restrictedUserIds, chatId, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    } else if ((err as ApiError).message === 'USER_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n      global = addUsersToRestrictedInviteList(global, users.map(({ id }) => id), createdChatId!, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    processBoostParameters,\n    checkGiftCode,\n  } = actions;\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const hasStartAttach = params.hasOwnProperty('startattach');\n  const hasStartApp = params.hasOwnProperty('startapp');\n  const choose = parseChooseParameter(params.choose);\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n  const hasBoost = params.hasOwnProperty('boost');\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'boost') {\n    const username = part2;\n    const id = params.c;\n\n    const isPrivate = !username && Boolean(id);\n\n    processBoostParameters({\n      usernameOrId: username || id,\n      isPrivate,\n      tabId,\n    });\n  } else if (hasBoost) {\n    const isPrivate = part1 === 'c' && Boolean(chatOrChannelPostId);\n    processBoostParameters({\n      usernameOrId: chatOrChannelPostId || part1,\n      isPrivate,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = toChannelId(chatOrChannelPostId);\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    if (messageId) {\n      focusMessage({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n    }\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if ((hasStartAttach && choose) || (!part2 && hasStartApp)) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      startParam: params.startattach || params.startapp,\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    const chatId = toChannelId(usernameOrId);\n    chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: 'User does not exist', tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId,\n      );\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, tabId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, { avatarHash: undefined });\n  global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, { avatarHash: undefined });\n    global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n\n  const { photos = [] } = chat;\n\n  const newPhotos = photos.filter((p) => photosToDelete.some((toDelete) => toDelete.id !== p.id));\n  global = getGlobal();\n  global = updateChat(global, chatId, { photos: newPhotos });\n\n  setGlobal(global);\n\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const restrictedUserIds = await callApi('addChatMembers', chat, users);\n  if (restrictedUserIds) {\n    global = getGlobal();\n    global = addUsersToRestrictedInviteList(global, restrictedUserIds, chat.id, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.translate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.translate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.translate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.translate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.translate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  });\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('fetchChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  const { similarChannels, count } = await callApi('fetchChannelRecommendations', {\n    chat,\n  }) || {};\n\n  if (!similarChannels) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(similarChannels, 'id'));\n  global = addSimilarChannels(global, chatId, similarChannels.map((channel) => channel.id), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    withPinned: shouldReplace,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  if (shouldReplace) {\n    if (listType === 'active') {\n      // Always include service notifications chat\n      if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n        const result2 = await callApi('fetchChat', {\n          type: 'user',\n          user: SERVICE_NOTIFICATIONS_USER_MOCK,\n        });\n\n        global = getGlobal();\n\n        const notificationsChat = result2 && selectChat(global, result2.chatId);\n        if (notificationsChat) {\n          chatIds.unshift(notificationsChat.id);\n          result.chats.unshift(notificationsChat);\n          if (lastLocalServiceMessageId) {\n            result.lastMessageByChatId[notificationsChat.id] = lastLocalServiceMessageId;\n          }\n        }\n      }\n\n      const tabStates = Object.values(global.byTabId);\n      const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n        const currentChat = selectCurrentChat(global, tabId);\n        return currentChat ? [currentChat] : [];\n      });\n\n      const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n        return selectVisibleUsers(global, tabId) || [];\n      });\n\n      if (global.currentUserId && global.users.byId[global.currentUserId]) {\n        visibleUsers.push(global.users.byId[global.currentUserId]);\n      }\n\n      global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n      global = replaceUserStatuses(global, result.userStatusesById);\n      global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    } else {\n      // Archived and Saved\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    }\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = addMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, users, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: ThreadId,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id, tabId });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, CallSound, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat, tabId);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","getGlobal","lastLocalServiceMessageId","selectLastServiceNotification","result","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","length","shift","includes","result2","user","notificationsChat","selectChat","unshift","chats","lastMessageByChatId","tabStates","visibleChats","flatMap","currentChat","selectCurrentChat","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","addMessages","messages","updateChatsLastMessageId","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","totalChatCount","isFullyLoaded","setGlobal","loadFullChat","actions","chat","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","emojiSet","localEmojiSet","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","selectUser","isUserBot","bot","showNotification","message","langProvider","openAttachMenuFromLink","attach","startAttach","callAttachBot","startParam","ensureIsSuperGroup","isChatBasicGroup","newChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","payload","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","hasUnreadMark","toggleChatUnread","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","closeStoryViewer","otherParams","openThread","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","messageId","addChats","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","focusMessage","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","TMP_CHAT_ID","onReplace","getOrderDate","selectChatLastMessage","date","creationDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","withPhotos","loadChat","loadProfilePhotos","profileId","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","tabChatId","muteUntil","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","restrictedUserIds","chatCreation","progress","ChatCreationProgress","InProgress","channel","Error","channelId","Complete","addUsersToRestrictedInviteList","userId","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChatId","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","isDeepLink","processDeepLink","match","RE_TG_LINK","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","processBoostParameters","checkGiftCode","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasStartAttach","hasOwnProperty","hasStartApp","choose","parseChooseParameter","storyId","hasBoost","substr","startattach","shortName","text","formatShareText","slug","chatOrChannelPostId","commentId","comment","inviteHash","voicechat","livestream","c","usernameOrId","isPrivate","toChannelId","substring","startapp","start","startApp","originalParts","isChatChannel","isChatSuperGroup","openBoostModal","webAppName","isWebApp","usernames","channelPostId","isCurrentChat","startBot","botId","param","usernameChat","chatByUsername","theme","extractCurrentThemeParams","requestAppWebView","appName","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","photosToDelete","nextPhoto","photos","newPhotos","p","toDelete","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","settings","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","count","updateListedTopicIds","entries","readInboxMessageIdByTopicId","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","chatlistModal","invite","peerIds","peers","peerId","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","similarChannels","addSimilarChannels","toggleSimilarChannels","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}