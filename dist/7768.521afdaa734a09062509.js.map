{"version":3,"file":"7768.521afdaa734a09062509.js","mappings":"ubAOA,MAAMA,EAAoB,GAAKC,EAAAA,EACzBC,EAA0B,KAAOD,EAAAA,EAC1BE,EAAwB,KAAOF,EAAAA,EAC/BG,EAAwB,GAAKH,EAAAA,EACpCI,EAAqB,OAASJ,EAAAA,E,qCCuB7B,SAASK,EAA6BC,EAAqBC,GAEhE,OAAOA,IADUC,EAAAA,EAAAA,KAAeF,GACVG,qBAAsBC,EAAAA,EAAAA,MACxCJ,EAAOK,mBArBeC,EAqBuBC,EAAAA,EAAWC,MAAMC,OApBhDC,EAAAA,IACTC,KAAKC,IACVD,KAAKE,IAAkB,IAAdP,EAAoBT,GACf,IAAdS,GAIAA,EAAcQ,EAAAA,IACTH,KAAKC,IACVD,KAAKE,IAAkB,IAAdP,EAAoBT,GACf,GAAdS,GAIGV,GAOH,GAtBN,IAA4BU,CAuB5B,CAEO,SAASS,EACdf,EAAWgB,EAAqBC,GAEhC,MAAMC,GAAoBC,EAAAA,EAAAA,KAAqBnB,EAAQgB,EAAQI,QACzDC,EAAmBL,EAAQM,WAAa,CAAEC,QAAS,GAAIC,QAASN,GAChEO,GAAgBC,EAAAA,EAAAA,KAAa1B,EAAQgB,EAAQI,QAG7CG,GAAUI,EAAAA,EAAAA,KAAoBN,EAAiBE,QAASN,GAE9D,IAAI,gBAAEW,EAAkB,IAAOP,EAiB/B,OAfIO,EAAgBC,SAClBD,EAAkBA,EAAgBE,QAAO,EAAGC,QAAOC,aAAcD,GAASC,IAAWhC,EAAOiC,iBAG9FhB,EAAciB,SAASC,IACrB,MAAM,cAAEF,GAAkBjC,EACJ,SAAlBmC,EAASC,MACbR,EAAgBS,QAAQ,CACtBL,OAAQP,GAAea,IAAML,EAC7BE,WACAI,UAAW5B,KAAK6B,MAAMC,KAAKC,MAAQ,KACnCX,OAAO,GACP,KAGGY,EAAAA,EAAAA,IAAkB3C,EAAQgB,EAAQI,OAAQJ,EAAQsB,GAAI,CAC3DhB,UAAW,IACND,EACHE,UACAK,oBAGN,CAEO,SAASgB,EACd5C,EAAWoB,EAAgByB,GAE3B,OAAOC,EAAAA,EAAAA,IAAW9C,EAAQoB,EAAQyB,GAAQ,EAC5C,CCOA,MAAME,EAAkB,IAClBC,EAAuB,IAE7B,IAAIC,EAAsC,EAwtB1C,SAASC,EACPlD,EACAmD,EACA/B,EACAkB,EACAhB,EACA8B,EACAC,EACArC,GAEA,MAAMK,EAAmBL,GAASM,UAGlC,GAAID,IAAoBiC,EAAAA,EAAAA,GAAahC,EAAWD,GAC9C,OAAOrB,EAGT,MAAMuD,EAAoBlC,GAAkBE,QAAQiC,MAAMC,GAAMA,EAAEC,cAQlE,GANIH,GAAmBG,cACrBpC,EAAUC,SAAUoC,EAAAA,EAAAA,KAAgBrC,EAAUC,QAASgC,EAAkBG,cAG3E1D,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAAEhB,eAE5C+B,EACH,OAAOrD,EAGT,MAAM,SAAEmC,EAAQ,MAAEJ,EAAK,SAAE6B,GAAatC,EAAUM,kBAAkB,IAAM,CAAC,EAEzE,IAD+BiC,EAAAA,EAAAA,KAA+B7D,EAAQ,oBACxCgB,GAAWmB,GAAYyB,IAAa7B,EAAO,CACvE,MAAM+B,GAAaC,EAAAA,EAAAA,IAAc/C,GAEjCmC,EAAQa,oBAAoB,CAAEC,YAAaH,EAAY3B,WAAU+B,OAAOC,EAAAA,EAAAA,OAC1E,CAEA,MAAMC,EAAqChB,EAAKiB,iBAAiBC,SAAShC,GACpEiC,GAAmCC,EAAAA,EAAAA,KAA0BxE,EAAQsB,GAG3E,GAAIiD,IAAqCH,EAAoC,CAC3EpE,EAAS4C,EAAsB5C,EAAQoB,EAAQ,CAC7CqD,sBAAuBrB,GAAMqB,sBAAwB,GAAK,EAC1DJ,gBAAiB,IAAKjB,GAAMiB,iBAAmB,GAAK/B,GAAIoC,MAAK,CAACC,EAAGC,IAAMA,EAAID,MAG7E,MAAME,GAAaC,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQkB,GAErD,IAAKc,IAASyB,EAAY,OAAO7E,GAEjC+E,EAAAA,EAAAA,KAAU,MACRC,EAAAA,EAAAA,IAAmB,CACjB5B,OACApC,QAAS6D,EACTI,YAAY,GACZ,GAEN,CASA,OAPKV,GAAoCH,IACvCpE,EAAS4C,EAAsB5C,EAAQoB,EAAQ,CAC7CqD,sBAAuBrB,GAAMqB,sBAAwB,GAAK,EAC1DJ,gBAAiBjB,GAAMiB,iBAAiBvC,QAAQoD,GAAMA,IAAM5C,OAIzDtC,CACT,CAEA,SAASmF,EACPnF,EACAoB,EACAkB,EACA8C,EACAC,GAAc,GAEd,MAAMC,EAAiBD,GACnBE,EAAAA,EAAAA,KAAuBvF,EAAQoB,EAAQkB,IACvCwC,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQkB,GAGtC,GAAIgD,GAAkBF,EAAcI,WAAYC,EAAAA,EAAAA,IAAiBnD,GAAK,CACpE,MAAM,MACJoD,EAAK,MAAEC,EAAK,QAAEC,EAAO,SAAEC,IACrBC,EAAAA,EAAAA,KAAkBR,GAEoB,IAAAS,EAAAC,EAA1C,GAAIN,GAASN,EAAcI,QAAQE,OACjCK,EAAAX,EAAcI,QAAQE,OAAMO,UAA5BF,EAA4BE,QAAYP,EAAMO,UAC9CD,EAAAZ,EAAcI,QAAQE,OAAMQ,YAA5BF,EAA4BE,UAAcR,EAAMQ,gBAC3C,GAAIP,GAASP,EAAcI,QAAQG,MAAO,KAAAQ,GAC/CA,EAAAf,EAAcI,QAAQG,OAAMM,UAA5BE,EAA4BF,QAAYN,EAAMM,QAChD,MAAO,GAAIL,GAAWR,EAAcI,QAAQI,QAAS,KAAAQ,GACnDA,EAAAhB,EAAcI,QAAQI,SAAQS,sBAA9BD,EAA8BC,oBAAwBT,EAAQS,oBAChE,MAAO,GAAIR,GAAYT,EAAcI,QAAQK,SAAU,KAAAS,GACrDA,EAAAlB,EAAcI,QAAQK,UAASU,iBAA/BD,EAA+BC,eAAmBV,EAASU,eAC7D,CACF,CAEA,MAAM1B,EAAaS,EAAiB,IAAKA,KAAmBF,GAAkBA,EAE9E,OAAOC,GACHmB,EAAAA,EAAAA,KAAuBxG,EAAQoB,EAAQkB,EAAIuC,IAC3ClC,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAIuC,EAC5C,CAEA,SAAS4B,EACPzG,EAAWmD,EAAgCnC,EAAqB0F,GAEhE,MAAM,OAAEtF,GAAWJ,EAEb2F,GAAYC,EAAAA,EAAAA,GAAoB5F,IAEhC,WAAE6F,IAAeC,EAAAA,EAAAA,KAAsB9G,EAAQgB,IAAY,CAAC,EAElE,IAAK6F,GAAcF,GAAWI,aAAc,CAC1C,MAAMC,GAAgBlC,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQuF,EAAUI,cAC9DC,EACFhH,GAASiH,EAAAA,EAAAA,KAAuCjH,EAAQgH,EAAe5F,EAAQJ,EAAQsB,GAAIoE,GAE3FvD,EAAQ+D,YAAY,CAClB9F,SACA+F,UAAWR,EAAUI,aACrBK,aAAc,CACZV,aACAW,cAAerG,EAAQsB,KAI/B,CAEA,OAAOtC,CACT,CAEA,SAASsH,EACPtH,EAAWmD,EAAgCnC,GAE3C,MAAM,GAAEsB,EAAE,OAAElB,GAAWJ,EAEjBuG,GAAgBC,EAAAA,EAAAA,KAA+BxH,EAAQgB,IAEvD,WAAE6F,IAAeC,EAAAA,EAAAA,KAAsB9G,EAAQgB,IAAY,CAAC,EAE5DoC,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BsG,EAAwBtE,GAAMuE,eAAgBC,EAAAA,EAAAA,KAAgB5H,EAAQoB,EAAQyG,EAAAA,IAEpF7H,EAASyG,EAAmBzG,EAAQmD,EAASnC,GAC7C,MAAM,SAAE8G,GAAajB,GAAc,CAAEiB,SAAUP,GAgC/C,OA9BIO,IACF9H,GAAS+H,EAAAA,EAAAA,KAAgB/H,EAAQoB,EAAQ0G,EAAU,CAACxF,IAEpD0F,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAI4B,MAC3C,IAAIiE,EAAAA,EAAAA,KAAuBnI,EAAQoB,EAAQ0G,EAAU5D,GAAQ,CAE3D,MAAMkE,GAAgBC,EAAAA,EAAAA,KAAoBrI,EAAQoB,EAAQ0G,GACpDQ,GAAkBC,EAAAA,EAAAA,KAAcvI,EAAQoB,EAAQ0G,EAAUxF,EAAI4B,GAC9DsE,GAAiBC,EAAAA,EAAAA,KAAkBH,EAAiBlH,EAAQ0G,EAAU5D,GAEvEkE,IAAiBI,EAAgBlE,SAAS8D,KAC7CpI,EAASsI,EAEb,KAGEzB,IACF7G,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQ0G,EAAU,aAAc,IAC/DjB,EACHQ,cAAerG,EAAQsB,MAGpBqG,EAAAA,EAAAA,KAAe3H,KAAa4H,EAAAA,EAAAA,KAAgB5H,KAC/ChB,GAAS6I,EAAAA,EAAAA,KAAiB7I,EAAQoB,EAAQ0G,EAAU,CAClDgB,eAAgBjC,EAAWiC,eAAiB,GAAK,OAMrDpB,IAIJ1H,GAAS+H,EAAAA,EAAAA,KAAgB/H,EAAQoB,EAAQyG,EAAAA,GAAgB,CAACvF,IAE1D0F,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAI4B,MAC3C,IAAIiE,EAAAA,EAAAA,KAAuBnI,EAAQoB,EAAQyG,EAAAA,GAAgB3D,GAAQ,CAEjE,MAAMkE,GAAgBC,EAAAA,EAAAA,KAAoBrI,EAAQoB,EAAQyG,EAAAA,IACpDS,GAAkBC,EAAAA,EAAAA,KAAcvI,EAAQoB,EAAQyG,EAAAA,GAAgBvF,EAAI4B,GACpEsE,GAAiBC,EAAAA,EAAAA,KAAkBH,EAAiBlH,EAAQyG,EAAAA,GAAgB3D,GAE7EkE,IAAiBI,EAAgBlE,SAAS8D,KAC7CpI,EAASsI,EAEb,MAfOtI,CAmBX,CAEA,SAAS+I,EACP/I,EACAoB,EACAJ,EACAgI,GAAQ,GAER,MAAM,MAAEC,GAAUjJ,EACZoD,EAAO6F,EAAMC,KAAK9H,GAClB+H,GAAuBC,EAAAA,EAAAA,KAAwBpJ,EAAQoB,GAEvDiI,EAAQjG,GAAMkG,SAAUC,EAAAA,EAAAA,KAAuBvJ,EAAQgB,QAAWwI,EACpEH,IACFrJ,GAASyJ,EAAAA,EAAAA,KAAYzJ,EAAQoB,EAAQiI,EAAM/G,GAAI,CAC7C+E,cAAerG,EAAQsB,MAI3B,MAAMiF,GAAgBC,EAAAA,EAAAA,KAA+BxH,EAAQgB,GAK7D,OAJIuG,IACFvH,GAAS0J,EAAAA,EAAAA,KAAwB1J,EAAQuH,EAAevG,EAAQsB,GAAI,WAGlE6G,GAAyBH,GAEzBG,IAAyBnI,EAAQsB,IAAM6G,IAAyBnI,EAAQ2I,iBACrE3I,EAAQsB,GAAK6G,GAOXO,EAAAA,EAAAA,KAAwB1J,EAAQoB,EAAQJ,EAAQsB,IAJ9CtC,CAOb,CAEA,SAAS4J,EAAuC5J,EAAWoB,EAAgB0G,EAAqBD,EAAAA,IAC9F,MAAMqB,GAAOW,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAClC0I,GAAYlC,EAAAA,EAAAA,KAAgB5H,EAAQoB,EAAQ0G,GAElD,IAAKoB,IAASY,EACZ,OAGF,IAAI5E,EAAI4E,EAAUjI,OAClB,KAAOqD,KAAK,CACV,MAAMlE,EAAUkI,EAAKY,EAAU5E,IAC/B,GAAIlE,IAAYA,EAAQ0F,WACtB,OAAO1F,CAEX,CAGF,CAyBO,SAAS+I,EACd/J,EAAWoB,EAA4B4I,EAAe7G,GAItD,GAAI/B,EAAQ,CACV,MAAMgC,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAM6G,EAAoB,IAAIC,IAC9BD,EAAkBE,IAAItC,EAAAA,IAEtBmC,EAAI9H,SAASI,IACXtC,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAC7CoE,YAAY,KAGV0D,EAAAA,EAAAA,KAAYpK,EAAQoB,EAAQkB,KAC9BtC,GAASqK,EAAAA,EAAAA,KAAYrK,EAAQoB,EAAQkB,IAGvC,MAAMtB,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQkB,GAClD,IAAKtB,EACH,OAGEA,EAAQwE,QAAQ8E,QAAQ5E,QAC1B1F,GAASuK,EAAAA,EAAAA,KAAgBvK,EAAQoB,EAAQJ,EAAQwE,QAAQ8E,OAAO5E,MAAMpD,IAAI,IAG5EtC,EAASyG,EAAmBzG,EAAQmD,EAASnC,GAAS,GAEtD,MAAM8G,GAAW0C,EAAAA,EAAAA,KAA0BxK,EAAQgB,GAC/C8G,GACFmC,EAAkBE,IAAIrC,EACxB,IAGF3E,EAAQsH,kBAAkB,CAAErJ,WAE5B,MAAMsJ,EAAS,IAAIR,IAAIF,GAEvBC,EAAkB/H,SAAS4F,IACzB,MAAMjB,GAAa8D,EAAAA,EAAAA,KAAiB3K,EAAQoB,EAAQ0G,GACpD,IAAKjB,GAAYQ,gBAAkBqD,EAAOE,IAAI/D,EAAWQ,eAAgB,OAEzE,MAAMwD,EAAiBjB,EAAgB5J,EAAQoB,EAAQ0G,GAClD+C,GAOD/C,IAAaD,EAAAA,KACf7H,EAAS+I,EAAsB/I,EAAQoB,EAAQyJ,GAAgB,IAGjE7K,GAAS6I,EAAAA,EAAAA,KAAiB7I,EAAQoB,EAAQ0G,EAAU,CAClDT,cAAewD,EAAevI,KAG5Bc,EAAKkG,UACPtJ,GAASyJ,EAAAA,EAAAA,KAAYzJ,EAAQoB,EAAQ0J,OAAOhD,GAAW,CACrDT,cAAewD,EAAevI,OAhB5Bc,EAAKkG,SAAWxB,IAAaD,EAAAA,IAC/B1E,EAAQ4H,cAAc,CAAE3J,SAAQ4J,QAASF,OAAOhD,IAiBpD,KAGFmD,EAAAA,EAAAA,IAAUjL,GAEV,MAAMkL,GAAoBC,EAAAA,EAAAA,KAA2BnL,GAQrD,YANAoL,YAAW,KACTpL,GAASqL,EAAAA,EAAAA,MACTrL,GAASsL,EAAAA,EAAAA,KAAmBtL,EAAQoB,EAAQ4I,IAC5CiB,EAAAA,EAAAA,IAAUjL,EAAO,GAChBkL,EAAoBlI,EAAuBD,EAGhD,CAIA,MAAMwI,EAA4B,GAElCvB,EAAI9H,SAASI,IACX,MAAMkJ,GAAkBC,EAAAA,EAAAA,KAAsBzL,EAAQsC,GACtD,GAAIkJ,EAAiB,CACnBD,EAAgBG,KAAKF,GAMrB,MAAMX,EAAiBjB,EAJvB5J,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQwL,EAAiBlJ,EAAI,CACtDoE,YAAY,IAGiC8E,GAC3CX,IACF7K,EAAS+I,EAAsB/I,EAAQwL,EAAiBX,GAAgB,IAG1E,MAAM7J,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQwL,EAAiBlJ,GAC3D,IAAInB,EAAAA,EAAAA,KAAqBnB,EAAQwL,IAAoBxK,EAAS,CAC5D,MAAM8G,GAAW0C,EAAAA,EAAAA,KAA0BxK,EAAQgB,GACnD,IAAI2K,EAAAA,EAAAA,KAAiBH,EAAiB1D,EAAU9H,EAAOiC,eAAgB,CACrE,MAAM2J,EAA4BhC,EAAgB5J,EAAQwL,EAAiB1D,GAC3E3E,EAAQ0I,yBAAyB,CAAEzK,OAAQ0K,OAAOhE,KAC9C8D,IACF5L,GAAS0J,EAAAA,EAAAA,KAAwB1J,EAAQwL,EAAiBI,EAA0BtJ,GAAI,SAE5F,CACF,CAEItB,GAASwE,QAAQ8E,QAAQ5E,QAC3B1F,GAASuK,EAAAA,EAAAA,KAAgBvK,EAAQwL,EAAiBxK,EAAQwE,QAAQ8E,OAAO5E,MAAMpD,IAAI,IAGrF,MAAM4I,GAAoBC,EAAAA,EAAAA,KAA2BnL,GAErDoL,YAAW,KACTpL,GAASqL,EAAAA,EAAAA,MACTrL,GAASsL,EAAAA,EAAAA,KAAmBtL,EAAQwL,EAAiB,CAAClJ,KACtD2I,EAAAA,EAAAA,IAAUjL,EAAO,GAChBkL,EAAoBlI,EAAuBD,EAChD,MAGFkI,EAAAA,EAAAA,IAAUjL,IAEV+L,EAAAA,EAAAA,IAAOR,GAAiBrJ,SAASI,IAC/Ba,EAAQsH,kBAAkB,CAAErJ,OAAQkB,GAAK,GAE7C,EAjnCA0J,EAAAA,EAAAA,IAAiB,aAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAM,OACJzB,EAAM,GAAEkB,EAAE,QAAEtB,EAAO,iBAAEiL,EAAgB,WAAEC,EAAU,KAAEC,GACjDtJ,EAEJ7C,EAASsH,EADTtH,EAASmF,EAAqBnF,EAAQoB,EAAQkB,EAAItB,GACNmC,EAASnC,GAErD,MAAM6D,GAAaC,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQkB,GAC/CqE,GAAYC,EAAAA,EAAAA,GAAoB/B,GAChCuH,GAAiBC,EAAAA,EAAAA,GAAkBxH,GACnCzB,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC5BgC,GAAMkG,SACL3C,GAAW2F,gBACV/C,EAAAA,EAAAA,KAAuBvJ,EAAQ6E,IAChC8B,EAAUI,cACb5D,EAAQ4H,cAAc,CAAE3J,SAAQ4J,QAASrE,EAAUI,eAGrD,MAAMwF,GAAU5D,EAAAA,EAAAA,KAAe3H,GA2D/B,GAzDAgH,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAI4B,MAEvCqI,GAAWL,IACblM,EAAS+I,EAAsB/I,EAAQoB,EAAQyD,IAGjD,MAAMiD,GAAW0C,EAAAA,EAAAA,KAA0BxK,EAAQ6E,GAGnD,GAFA7E,GAASwM,EAAAA,EAAAA,KAA4BxM,EAAQ6E,EAAYzD,EAAQ0G,EAAU5D,IAEvEuI,EAAAA,EAAAA,KAAoCzM,EAAQoB,EAAQJ,EAAuBkD,GAAQ,CACrF,GAAIqI,GAAWvL,EAAQqC,aAAgBrC,EAAQwE,SAAS8E,SAAY8B,GAAgBM,UAC9E1L,EAAQwE,SAASmH,UAAW,CAChC,MAAMC,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GACxD0I,GAEFzJ,EAAQ2J,aAAa,CACnB1L,SACA0G,SAAU8E,EAAmB9E,SAC7BX,UAAWnG,EAAQsB,GACnByK,aAAa,EACbC,qBAAqB,EACrB9I,SAGN,CAIKqI,GACHnB,YAAW,KACTpL,GAASqL,EAAAA,EAAAA,MACLY,GACF9I,EAAQ8J,qBAAqB,CAC3BlG,aAAczE,EACd4B,UAGJlE,EAAS+I,EAAsB/I,EAAQoB,EAAQyD,IAC/CoG,EAAAA,EAAAA,IAAUjL,EAAO,GAChB+C,EAEP,MACE/C,EAAS+I,EAAsB/I,EAAQoB,EAAQyD,EACjD,IAGEsH,IACFnM,GAASkN,EAAAA,EAAAA,KAAWlN,EAAQmM,EAAK7J,GAAI6J,KAGvClB,EAAAA,EAAAA,IAAUjL,GAGLuM,GAAYnJ,GAAM+J,cAAgBC,EAAAA,EAAAA,KAAmBpN,EAAQoB,IAChE+B,EAAQkK,gBAGLd,IAAWpL,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAAS,CACpD,MAAMmG,GAAgBC,EAAAA,EAAAA,KAA+BxH,EAAQ6E,GACzD0C,KAAkB6F,EAAAA,EAAAA,KAAmBpN,EAAQuH,EAAe,UAC9DpE,EAAQ0I,yBAAyB,CAAEzK,OAAQmG,GAE/C,CAEA,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,GAAEjF,EAAE,YAAEgL,GAAgBzK,EAE5B7C,EAAS+I,EAAsB/I,EAAQsC,EAAIgL,GAAa,GACxDtN,GAASuN,EAAAA,EAAAA,KAAYvN,EAAQ,CAACsN,KAC9BrC,EAAAA,EAAAA,IAAUjL,GACV,KACF,CAEA,IAAK,8BACHgI,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAI4B,MAC3C,MAAQ9C,OAAQoM,IAAkBX,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EAE9E,GAAIsJ,IAAkB3K,EAAOP,GAAI,OACjC,MAAMtB,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQwN,EAAe3K,EAAOsE,WAEhE,IAAKnG,EAAS,OAGd,IAAIyM,EAAAA,EAAAA,KAAezM,KAAa6B,EAAO6K,MAAO,OAE9C,MAAMC,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxClE,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B6N,wBAAyB,IAAKF,EAASE,yBAA2B,GAAK,CACrEvL,GAAI3B,KAAKmN,SACTC,eAAgBlL,EAAO6K,MACvBvG,UAAWtE,EAAOsE,aAEnBjD,EAAM,KAGX+G,EAAAA,EAAAA,IAAUjL,GAEV,MAGF,IAAK,sBAAuB,CAC1B,MAAM,OACJoB,EAAM,GAAEkB,EAAE,QAAEtB,EAAO,KAAEmL,GACnBtJ,EAEJ7C,EAASmF,EAAqBnF,EAAQoB,EAAQkB,EAAItB,GAAS,GAE3D,MAAMgN,GAAeC,EAAAA,EAAAA,KAAmBjO,EAAQoB,EAAQyG,EAAAA,KAAmB,GAC3E7H,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQyG,EAAAA,GAAgB,gBAAgBkE,EAAAA,EAAAA,IAAO,IAAIiC,EAAc1L,KAErG,MAAMwF,GAAW0C,EAAAA,EAAAA,KAA0BxK,EAAQgB,GACnD,GAAI8G,IAAaD,EAAAA,GAAgB,CAC/B,MAAMqG,GAAqBD,EAAAA,EAAAA,KAAmBjO,EAAQoB,EAAQ0G,IAAa,GAC3E9H,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQ0G,EAAU,gBAAgBiE,EAAAA,EAAAA,IAAO,IAAImC,EAAoB5L,IACvG,CAEI6J,IACFnM,GAASkN,EAAAA,EAAAA,KAAWlN,EAAQmM,EAAK7J,GAAI6J,IAGvCnM,GAASmO,EAAAA,EAAAA,KAAmBnO,EAAQoB,EAAQ,CAC1CgN,sBAAsB,KAGxBnD,EAAAA,EAAAA,IAAUjL,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OACJoB,EAAM,GAAEkB,EAAE,QAAEtB,EAAO,KAAEmL,GACnBtJ,EAEEyC,GAAiBR,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQkB,GACnDc,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAEhCpB,EAASmF,EAAqBnF,EAAQoB,EAAQkB,EAAItB,GAElD,MAAM6D,GAAaC,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQkB,GAEjDtB,EAAQM,WAAa8B,IACvBpD,EAASkD,EACPlD,EAAQmD,EAAS/B,EAAQkB,EAAItB,EAAQM,UAAW8B,EAAMyB,EAAWxB,WAAYiC,IAI7EtE,EAAQwE,SAAS6I,MAAMA,OAAS/I,GAAgBE,SAAS6I,MAAMA,OACjErO,GAASsO,EAAAA,EAAAA,KAAwBtO,EAAQoB,EAAQkB,IAG/C6J,IACFnM,GAASkN,EAAAA,EAAAA,KAAWlN,EAAQmM,EAAK7J,GAAI6J,KAGvClB,EAAAA,EAAAA,IAAUjL,GAEV,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OACJoB,EAAM,GAAEkB,EAAE,QAAEtB,EAAO,KAAEmL,GACnBtJ,EAEEyC,GAAiBC,EAAAA,EAAAA,KAAuBvF,EAAQoB,EAAQkB,GAC9D,IAAKgD,EACH,OAGFtF,EAASmF,EAAqBnF,EAAQoB,EAAQkB,EAAItB,GAAS,GAC3D,MAAMgJ,EAAMhC,OAAOuG,MAAKC,EAAAA,EAAAA,KAA4BxO,EAAQoB,IAAW,CAAC,GAAGqN,IAAI3D,QAAQpG,MAAK,CAACC,EAAGC,IAAMA,EAAID,IAC1G3E,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQyG,EAAAA,GAAgB,eAAgBmC,GAE5E,MAAMlC,GAAW0C,EAAAA,EAAAA,KAA0BxK,EAAQsF,GACnD,GAAIwC,IAAaD,EAAAA,GAAgB,CAC/B,MAAMqG,GAAqBD,EAAAA,EAAAA,KAAmBjO,EAAQoB,EAAQ0G,IAAa,GAC3E9H,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQ0G,EAAU,eAAgBoG,EAAmBxJ,MAAK,CAACC,EAAGC,IAAMA,EAAID,IAC9G,CACIwH,IACFnM,GAASkN,EAAAA,EAAAA,KAAWlN,EAAQmM,EAAK7J,GAAI6J,KAGvClB,EAAAA,EAAAA,IAAUjL,GAEV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,GAAEsC,EAAE,QAAEtB,EAAO,KAAEmL,GAAStJ,EAE9B7C,GAAS0O,EAAAA,EAAAA,KAAwB1O,EAAQsC,EAAItB,GAEzCmL,IACFnM,GAASkN,EAAAA,EAAAA,KAAWlN,EAAQmM,EAAK7J,GAAI6J,KAGvClB,EAAAA,EAAAA,IAAUjL,GAEV,KACF,CAEA,IAAK,2BAA4B,CAC/B,MAAM,WAAE2O,GAAe9L,EAEvB7C,GAAS4O,EAAAA,EAAAA,KAAyB5O,EAAQ2O,IAC1C1D,EAAAA,EAAAA,IAAUjL,GAEV,KACF,CAEA,IAAK,qBAAsB,CACzB,MAAM,aAAE6O,GAAiBhM,EACnBqG,GAAO4F,EAAAA,EAAAA,IAAqBD,EAAc,MAEhD7O,GAAS+O,EAAAA,EAAAA,KAAmB/O,EAAQkJ,IACpC+B,EAAAA,EAAAA,IAAUjL,GACV,KACF,CAEA,IAAK,mBACHA,GAASgP,EAAAA,EAAAA,KAAiBhP,EAAQ6C,EAAOoM,eACzChE,EAAAA,EAAAA,IAAUjL,GACV,MAGF,IAAK,+BAAgC,CACnC,MAAM,OACJoB,EAAM,QAAE8N,EAAO,sBAAEC,GACftM,EAEJ7C,GAASsL,EAAAA,EAAAA,KAAmBtL,EAAQoB,EAAQ,CAAC8N,IAC7ClP,GAASmO,EAAAA,EAAAA,KAAmBnO,EAAQoB,EAAQ,CAC1CgN,sBAAsB,KAGxBnD,EAAAA,EAAAA,IAAUjL,GAEVgI,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAI4B,MAC3C,MAAM0I,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAC5D,GAAI0I,GAAoBxL,SAAWA,EAAQ,OAE3C,MAAMsB,EAAMD,KAAKC,MACbA,EAAMO,EA/Q0B,MAkRpCA,EAAsCP,EAEtCS,EAAQiM,iBAAiB,CACvBpO,QAAS,CACPqO,IAAK,uBAEPC,MAAO,CACLD,IAAK,wBAEPnL,UAGFf,EAAQ2J,aAAa,CACnB1L,SACA+F,UAAWgI,EACXI,gBAAiB,YACjBrL,UACA,IAGJ,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OACJ9C,EAAM,QAAE8N,EAAO,QAAElO,EAAO,KAAEmL,GACxBtJ,EAEJ7C,EAASsH,EAA2BtH,EAAQmD,EAASnC,GAErD,MAAMsE,GAAiBR,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ8N,GAEzDlP,GAASsL,EAAAA,EAAAA,KAAmBtL,EAAQoB,EAAQ,CAAC8N,IAGzClO,EAAQqE,cACVrF,GAASwP,EAAAA,EAAAA,KAA4BxP,EAAQoB,EAAQ,CAAC8N,KAGxDlP,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQJ,EAAQsB,GAAI,IAClDgD,KACAtE,EACH2I,gBAAiBuF,IAGf/C,IACFnM,GAASkN,EAAAA,EAAAA,KAAWlN,EAAQmM,EAAK7J,GAAI6J,IAGvCnM,EAAS,IACJA,EACHyP,YAAa,CACXC,cAAcC,EAAAA,EAAAA,IAAK3P,EAAOyP,YAAYC,aAAc,EAAC3L,EAAAA,EAAAA,IAAc/C,OAIvE,MAAM6D,GAAaC,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQJ,EAAQsB,IAC7DtC,EAAS+I,EAAsB/I,EAAQoB,EAAQyD,GAE/C,MAAM+K,GAAS9I,EAAAA,EAAAA,KAAsB9G,EAAQgB,GAE7CgH,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAI4B,MAC3C,MAAQ9C,OAAQoM,EAAe1F,SAAU+H,IAAoBhD,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EACrGsJ,IAAkBpM,IAChBwO,GAAQ/I,YAAYiB,UAAYD,EAAAA,MAAoBgI,GAI1D1M,EAAQ2M,oBAAoB,CAAEC,MAAO/O,EAAQsB,GAAI4B,SAAQ,IAEvD0L,GAAQ/I,YAAYiB,WACtB9H,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQwO,EAAO/I,WAAWiB,SAAU,aAAc,IACjF8H,EAAO/I,WACVQ,cAAerG,EAAQsB,GACvB0N,uBAAwBhP,EAAQsB,MAIpCtC,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClC4O,uBAAwBhP,EAAQsB,KAGlC,MAAMc,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAMhC,GAJKgC,GAAM+J,cAAgBC,EAAAA,EAAAA,KAAmBpN,EAAQoB,IACpD+B,EAAQkK,gBAGNlM,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAAS,CACxC,MAAMmG,GAAgBC,EAAAA,EAAAA,KAA+BxH,EAAQ6E,GACzD0C,KAAkB6F,EAAAA,EAAAA,KAAmBpN,EAAQuH,EAAe,UAC9DpE,EAAQ0I,yBAAyB,CAAEzK,OAAQmG,GAE/C,EAEA0D,EAAAA,EAAAA,IAAUjL,GAEV,KACF,CAEA,IAAK,sCAAuC,CAC1C,MAAM,OACJoB,EAAM,QAAE8N,EAAO,QAAElO,EAAO,KAAEmL,GACxBtJ,EACEmL,GAAeC,EAAAA,EAAAA,KAAmBjO,EAAQoB,EAAQyG,EAAAA,KAAmB,GAC3E7H,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQyG,EAAAA,GAAgB,eAAgB,IAAImG,EAAchN,EAAQsB,KAEtG,MAAMwF,GAAW0C,EAAAA,EAAAA,KAA0BxK,EAAQgB,GACnD,GAAI8G,IAAaD,EAAAA,GAAgB,CAC/B,MAAMqG,GAAqBD,EAAAA,EAAAA,KAAmBjO,EAAQoB,EAAQ0G,IAAa,GAC3E9H,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQ0G,EAAU,eAAgB,IAAIoG,EAAoBlN,EAAQsB,IACxG,CAEA,MAAMgD,GAAiBC,EAAAA,EAAAA,KAAuBvF,EAAQoB,EAAQ8N,GAE9DlP,GAASwP,EAAAA,EAAAA,KAA4BxP,EAAQoB,EAAQ,CAAC8N,IACtDlP,GAASwG,EAAAA,EAAAA,KAAuBxG,EAAQoB,EAAQJ,EAAQsB,GAAI,IACvDgD,KACAtE,EACH2I,gBAAiBuF,IAGf/C,IACFnM,GAASkN,EAAAA,EAAAA,KAAWlN,EAAQmM,EAAK7J,GAAI6J,KAGvClB,EAAAA,EAAAA,IAAUjL,GACV,KACF,CAEA,IAAK,kBAAmB,CACtB,MAAM,OAAEoB,EAAM,SAAE6O,EAAQ,WAAEtB,GAAe9L,EAEnCqN,GAAWC,EAAAA,EAAAA,KAAWtG,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAASuN,GAC1DyB,EAA8C,CAClD,CAACvI,EAAAA,IAAiB8G,GAEpB3G,OAAOC,OAAOiI,GAAUhO,SAASlB,IAC/B,MAAM8G,GAAW0C,EAAAA,EAAAA,KAA0BxK,EAAQgB,GAInD,GAHAhB,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQJ,EAAQsB,GAAI,CACrD2N,aAEEnI,IAAaD,EAAAA,GAAgB,OACjC,MAAMwI,EAAyBD,EAAgBtI,IAAa,GAC5DuI,EAAuB3E,KAAK1K,EAAQsB,IACpC8N,EAAgBtI,GAAYuI,CAAsB,IAGpDrI,OAAOsI,QAAQF,GAAiBlO,SAAQ,EAAE4F,EAAUkC,MAClD,MAAMuG,GAAYC,EAAAA,EAAAA,KAAgBxQ,EAAQoB,EAAQyG,EAAAA,KAAmB,GAC/D4I,EAAeR,GACjBlE,EAAAA,EAAAA,IAAOwE,EAAUG,OAAO1G,IAAMtF,MAAK,CAACC,EAAGC,IAAMA,EAAID,IACjD4L,EAAUzO,QAAQQ,IAAQ0H,EAAI1F,SAAShC,KAC3CtC,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQ0J,OAAOhD,GAAW,YAAa2I,EAAa,KAE1FxF,EAAAA,EAAAA,IAAUjL,GAEV,KACF,CAEA,IAAK,mBAAoB,CACvB,MAAM,WACJ6G,GACEhE,EAEJ7C,GAAS2Q,EAAAA,EAAAA,KAAkB3Q,EAAQ,CAAC6G,IACpC,MAAM,OAAEzF,EAAM,SAAE0G,GAAajB,EAC7B,IAAKzF,IAAW0G,EAAU,OAE1B,MAAM1E,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BwP,GAAoBjG,EAAAA,EAAAA,KAAiB3K,EAAQoB,EAAQ0G,GAM3D,GALI1E,GAAMkG,SAAWzC,EAAWmJ,yBAA2BY,GAAmBZ,wBAC5E7M,EAAQ4H,cAAc,CAAE3J,SAAQ4J,QAASF,OAAOhD,MAI7C1E,GAAMkG,QAAS,CAClB,MAAM0G,EAAyB5M,GAAM4M,uBAC/Ba,EAAiChK,EAAWmJ,wBAA0BA,EACxEA,GAA0Ba,IAC5B7Q,GAAS6I,EAAAA,EAAAA,KAAiB7I,EAAQoB,EAAQ0G,EAAU,CAClDkI,uBAAwBrP,KAAKE,IAAIgQ,EAAgCb,KAGvE,EACA/E,EAAAA,EAAAA,IAAUjL,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAQsC,GAAIlB,GAAWyB,EACjBiO,GAAejH,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAEhD,GAAI0P,KAAiBC,EAAAA,EAAAA,KAAS3P,GAAS,CACrC,MAAM8C,GAAQC,EAAAA,EAAAA,MACdnE,GAASsL,EAAAA,EAAAA,KAAmBtL,EAAQoB,EAAQ4G,OAAOuG,KAAKuC,GAAcrC,IAAI3D,UAC1EG,EAAAA,EAAAA,IAAUjL,GACVmD,EAAQ6N,aAAa,CAAE5P,SAAQ4H,OAAO,IACtC7F,EAAQ8N,qBAAqB,CAAE7P,SAAQ0G,SAAUD,EAAAA,GAAgB3D,SACnE,CAEA,KACF,CAEA,IAAK,iBAAkB,CACrB,MAAM,IAAE8F,EAAG,OAAE5I,GAAWyB,EAExBkH,EAAe/J,EAAQoB,EAAQ4I,EAAK7G,GACpC,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAE6G,EAAG,OAAEkH,EAAM,OAAE9P,GAAWyB,EAE1BsO,EAAqBnH,GAAKoH,MAAM9O,IACpCiD,EAAAA,EAAAA,KAAuBvF,EAAQoB,EAAQkB,IAAK+O,2BAExCC,EAAmBJ,GAAQ1N,MAAMlB,IACrC,MAAMtB,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQkB,GAClD,OAAOtB,GAASwE,QAAQG,KAAK,IAG3BwL,GAAsBG,GACxBtJ,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAI4B,MAC3Cf,EAAQiM,iBAAiB,CACvBpO,QAAS,CACPqO,IAAK,uBAEPkC,WAAY,CACVlC,IAAK,uBAEP/E,OAAQ,CACNA,OAAQ,eACRkH,QAAS,CACPpQ,SACA+F,UAAWmK,EACXpN,UAGJA,SACA,IAmnBZ,SACE9C,EAAgB4I,EAAe7G,EAAgCnD,GAE/DgK,EAAI9H,SAASI,IACXtC,GAASwG,EAAAA,EAAAA,KAAuBxG,EAAQoB,EAAQkB,EAAI,CAClDoE,YAAY,GACZ,KAGJuE,EAAAA,EAAAA,IAAUjL,GAEV,MAAMkL,GAAoBC,EAAAA,EAAAA,KAA2BnL,GAErDoL,YAAW,KACTpL,GAASqL,EAAAA,EAAAA,MACTrL,GAASwP,EAAAA,EAAAA,KAA4BxP,EAAQoB,EAAQ4I,GACrD,MAAMyH,GAAoBjD,EAAAA,EAAAA,KAA4BxO,EAAQoB,GAC9DpB,GAAS0I,EAAAA,EAAAA,KACP1I,EAAQoB,EAAQyG,EAAAA,GAAgB,eAAgBG,OAAOuG,KAAKkD,GAAqB,CAAC,GAAGhD,IAAI3D,UAE3FG,EAAAA,EAAAA,IAAUjL,EAAO,GAChBkL,EAAoBlI,EAAuBD,EAChD,CAroBM2O,CAAwBtQ,EAAQ4I,EAAK7G,EAASnD,GAC9C,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OAAEoB,GAAWyB,EACb8O,EAAe3R,EAAOkQ,SAAS0B,SAASxQ,GAY9C,GAXIA,IAAWyQ,EAAAA,MACb7R,EAAS,IACJA,EACH8R,qBAAsB9R,EAAO8R,qBAAqBrD,KAAKsD,IAAY,IAC9DA,EACHC,WAAW,QAGf/G,EAAAA,EAAAA,IAAUjL,IAGR2R,EAAc,CAChB,MAAM3H,EAAMhC,OAAOuG,KAAKoD,EAAazI,MAAMuF,IAAI3D,QAE/Cf,EADA/J,GAASqL,EAAAA,EAAAA,MACcjK,EAAQ4I,EAAK7G,EACtC,MACEA,EAAQsH,kBAAkB,CAAErJ,WAG9BpB,GAASqL,EAAAA,EAAAA,MACTrL,GAASiS,EAAAA,EAAAA,KAAwBjS,EAAQoB,IACzC6J,EAAAA,EAAAA,IAAUjL,GAEV,KACF,CAEA,IAAK,qBAAsB,CACzB,MAAM,OAAEoB,GAAWyB,EACbZ,EAAgBjC,EAAOiC,cAC7BjC,GAASiS,EAAAA,EAAAA,KAAwBjS,EAAQoB,EAAQ,UACjD6J,EAAAA,EAAAA,IAAUjL,GA8aT,SACLA,EACAoB,EACA0G,EACA3E,GAEA,MAAM+F,GAAOW,EAAAA,EAAAA,KAAmB7J,EAAQoB,GACxC,IAAK8H,EACH,OAGF,MAAMyF,EAAa3G,OAAOC,OAAOiB,GAAMpH,QAAQd,IACrBwJ,EAAAA,EAAAA,KAA0BxK,EAAQgB,KAC/B8G,IAC1B2G,KAAKzN,GAAYA,EAAQsB,KAEvBqM,EAAW9M,QAIhBkI,EAAe/J,EAAQoB,EAAQuN,EAAYxL,EAC7C,CAhcM+O,CADAlS,GAASqL,EAAAA,EAAAA,MACYpJ,EAAeb,EAAQ+B,GAE5C,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAE6G,EAAG,cAAE5E,GAAkBvC,EAE/BmH,EAAI9H,SAASI,IACX,MAAMlB,GAASqK,EAAAA,EAAAA,KAAsBzL,EAAQsC,GACzClB,IACFpB,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI8C,GACjD,KAGF6F,EAAAA,EAAAA,IAAUjL,GAEV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,UAAEmS,EAAS,IAAEnI,EAAG,cAAE5E,GAAkBvC,EAE1CmH,EAAI9H,SAASI,IACXtC,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQmS,EAAW7P,EAAI8C,EAAc,KAGlE6F,EAAAA,EAAAA,IAAUjL,GAEV,KACF,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAEoS,EAAM,WAAEC,GAAexP,EAE/B7C,GAASkN,EAAAA,EAAAA,KAAWlN,EAAQoS,EAAQC,IAEpCpH,EAAAA,EAAAA,IAAUjL,GACV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,OAAEoS,EAAM,OAAEpQ,EAAM,QAAEsQ,GAAYzP,EACpC7C,GAASuS,EAAAA,EAAAA,KAAevS,EAAQoS,EAAQpQ,EAAQsQ,IAChDrH,EAAAA,EAAAA,IAAUjL,GAEV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,QAAEgB,GAAY6B,GAEhB2P,EAAAA,EAAAA,KAAyBxS,IAC3BmD,EAAQsP,0BAA0B,CAAEzR,YAGtC,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OAAEI,EAAM,GAAEkB,EAAE,UAAEhB,GAAcuB,EAC5B7B,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQkB,GAC5Cc,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQ6C,EAAOzB,QAEvC,IAAKgC,IAASpC,EAAS,OAEvBhB,EAASkD,EAAgBlD,EAAQmD,EAAS/B,EAAQkB,EAAIhB,EAAW8B,EAAMpC,EAAQqC,WAAYrC,IAC3FiK,EAAAA,EAAAA,IAAUjL,GACV,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OACJoB,EAAM,GAAEkB,EAAE,cAAEoQ,EAAa,SAAEC,GACzB9P,EACE7B,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQkB,GAGlD,KAFamF,EAAAA,EAAAA,KAAWzH,EAAQ6C,EAAOzB,UAEzBJ,EAAS,OAEvB,GAAIA,EAAQwE,QAAQoN,QAAS,CAC3B,MAAMC,EAAQH,EAAc,GAC5B,GAAI,cAAeG,GAA6B,yBAApBA,EAAMC,UAAsC,CACtE,IAAK9R,EAAQwE,QAAQoN,QAAS,OAC9B5S,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAC7CkD,QAAS,IACJxE,EAAQwE,QACXoN,QAAS,IACJ5R,EAAQwE,QAAQoN,QACnBF,cAAeG,OAIrB5H,EAAAA,EAAAA,IAAUjL,EACZ,KAAO,CACL,MAAMwF,EAAUqN,EAChB7S,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAC7CkD,QAAS,IACJA,MAGPyF,EAAAA,EAAAA,IAAUjL,EACZ,CACF,CAEA,GAAIgB,EAAQwE,QAAQuN,UAAW,CAC7B,MAAMC,EAAkBL,EAAW,CAAEA,WAAUD,iBAC3C,CAAEA,cAAeA,EAA4CC,cAAUnJ,GAE3ExJ,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAC7CkD,QAAS,IACJxE,EAAQwE,QACXuN,UAAW,IACN/R,EAAQwE,QAAQuN,aAChBC,OAIT/H,EAAAA,EAAAA,IAAUjL,EACZ,CAEA,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,gBAAEiT,EAAe,KAAE5E,EAAI,UAAE6E,GAAcrQ,EAE7C7C,EAAS,IACJA,EACHmT,eAAgB,IACXnT,EAAOmT,eACV,CAACF,GAAkB,IACbjT,EAAOmT,eAAeF,IAAoB,CAAC,EAC/CA,kBACA5E,OACA6E,gBAINjI,EAAAA,EAAAA,IAAUjL,GACV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAEoB,EAAM,QAAE8N,EAAO,MAAEkE,GAAUvQ,EAE/BuQ,EAAMC,MAAM,2BACdrL,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAI4B,MAC3Cf,EAAQmQ,oCAAoC,CAAElS,SAAQ8C,SAAQ,IAIlElE,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ8N,EAAS,CAAEqE,aAAc,+BACpEtI,EAAAA,EAAAA,IAAUjL,GACV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,OACJoB,EAAM,WAAEuN,EAAU,eAAE6E,EAAc,aAAEC,GAClC5Q,EAEJ7C,GAAS0T,EAAAA,EAAAA,KAA0B1T,EAAQoB,EAAQuN,EAAY6E,EAAgBC,IAE/ExI,EAAAA,EAAAA,IAAUjL,GACV,KACF,EACF,IC7pBF,MAEM2T,EAA0B,IAAIC,IAE9BC,GAA0BC,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,GAsf5DC,eAAeC,GAAiC,OAC9CjU,EAAM,OAAEoB,EAAM,SAAE0G,EAAQ,MAAEoM,EAAK,YAAEC,EAAW,kBAAEC,IAI9C,MAAMhR,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BiT,GAAOC,EAAAA,EAAAA,KAAWtU,EAAQoB,GAChC,IAAKgC,GAASiR,IAAQE,EAAAA,EAAAA,KAAcF,GAAQ,OAE5C,MAAM1N,GAAY6N,EAAAA,EAAAA,KAAuBxU,EAAQoB,EAAQ0G,EAAUoM,GAAOvN,WAEpE8N,EAAiCP,EAAQ,IAC1CA,EACHvN,YACA+N,KAAM/T,KAAK6B,MAAMC,KAAKC,MAAQ,KAC9B6J,SAAS,QACP/C,EAEJxJ,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQ0G,EAAU,QAAS2M,GAC1DL,IACHpU,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAEuT,UAAWF,GAAUC,SAG7DzJ,EAAAA,EAAAA,IAAUjL,GAENmU,UAEiBS,EAAAA,EAAAA,IAAQ,YAAa,CACxCxR,OACA8Q,MAAOO,KAGKA,IACZA,EAASlI,SAAU,GAGrBvM,GAASqL,EAAAA,EAAAA,MACTrL,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQ0G,EAAU,QAAS2M,GAC/DzU,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAEuT,UAAWF,GAAUC,QAE3DzJ,EAAAA,EAAAA,IAAUjL,GACZ,CAynBAgU,eAAe/C,EACbjR,EACAoD,EACA0E,EACA+M,EACAC,EACAC,GAAa,EACbC,GAAkB,EAClBC,MACI/Q,GAAQC,EAAAA,EAAAA,QAEZ,MAAM/C,EAASgC,EAAKd,GAEpB,IAAI4S,EACAC,EAAYC,EAAAA,IAChB,OAAQN,GACN,KAAKO,EAAAA,GAAkBC,UACjBT,GACFK,GAAa,EACbC,GAAa,GAEbD,OAAY1L,EAEd,MACF,KAAK6L,EAAAA,GAAkBE,OACrBL,IAAcvU,KAAK6U,MAAMJ,EAAAA,IAAqB,GAAK,GACnD,MACF,KAAKC,EAAAA,GAAkBI,SACrBP,IAAcE,EAAAA,IAAqB,GAC/BP,IACFM,GAAa,GAOnB,MAAMlT,GAFNjC,GAASqL,EAAAA,EAAAA,OAEoBpJ,cACvByT,GAAgB/J,EAAAA,EAAAA,KAAiBvK,EAAQ0G,EAAU7F,GACnD0T,EAAaD,EAAgB5J,OAAOhE,GAAY1G,EAEhDwU,QAAehB,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CxR,MAAMqE,EAAAA,EAAAA,KAAWzH,EAAQ2V,GACzBd,WACAK,YACAW,MAAOV,EACPrN,WACA4N,kBAGF,IAAKE,EACH,OAGF,MAAM,SACJ1F,EAAQ,MAAE4F,GACRF,EAEJ5V,GAASqL,EAAAA,EAAAA,MAET,MAAM0K,EAAgB3U,IAAWyQ,EAAAA,IAC7B7R,EAAO8R,qBAAqBhQ,QAAO,EAAGkQ,gBAAiBA,IAAWvD,KAAI,EAAGzN,aAAcA,IACvF,GACEgV,EAAe,GAAoBtF,OAAOR,EAAU6F,GACpD7M,GAAO4F,EAAAA,EAAAA,IAAqBkH,EAAa,MACzChM,EAAMhC,OAAOuG,KAAKrF,GAAMuF,IAAI3D,QAElC,GAAIhD,IAAaD,EAAAA,MAAmB8D,EAAAA,EAAAA,KAAiBvK,EAAQ0G,EAAU9H,EAAOiC,eAAgB,CAC5F,MAAMgU,GAAuBC,EAAAA,EAAAA,KAAqBlW,EAAQoB,EAAQ0G,GAC5DkC,EAAI,IAAMiM,IAAyBjM,EAAI,IAAOiM,IAAyBnO,GAC3EkC,EAAI3H,QAAQyI,OAAOhD,GAEvB,CAEA9H,GAASmW,EAAAA,EAAAA,KAAoBnW,EAAQoB,EAAQ8H,GAC7ClJ,EAAS+U,GACLqB,EAAAA,EAAAA,KAAoBpW,EAAQoB,EAAQ0G,EAAUkC,IAC9CjC,EAAAA,EAAAA,KAAgB/H,EAAQoB,EAAQ0G,EAAUkC,GAE9C,IAAIF,GAAYlC,EAAAA,EAAAA,KAAgB5H,EAAQoB,EAAQ0G,GAChD,MAAMuO,EAAexB,GAAWyB,EAAAA,EAAAA,KAA8BtW,EAAQoB,EAAQ0G,EAAU+M,QAAYrL,EAWpG,GATIuL,GAAcjL,GAAauM,IACxBA,EAAaxU,UAAU0U,EAAAA,EAAAA,IAA4BzM,EAAWuM,KACjErW,GAAS+H,EAAAA,EAAAA,KAAgB/H,EAAQoB,EAAQ0G,EAAUuO,GACnDvM,GAAYlC,EAAAA,EAAAA,KAAgB5H,EAAQoB,EAAQ0G,GAC5C9H,GAASwW,EAAAA,EAAAA,KAAmBxW,EAAQoB,EAAQ0G,EAAUuO,GACtDtB,GAAa,KAIZC,EAAiB,CACpB,MAAMyB,EAAa1B,GAAcsB,EAAeA,EAAevM,EAC/D,GAAI2M,EAAY,CACd,MAAM,eAAEjO,GAAmBkO,EAAiBD,EAAY5B,EAAUC,GAClE9U,GAAS2W,EAAAA,EAAAA,KAAuB3W,EAAQoB,EAAQ0G,EAAUU,EAAiBtE,EAC7E,CACF,CAEI4R,IACF9V,GAAS6I,EAAAA,EAAAA,KAAiB7I,EAAQoD,EAAKd,GAAIwF,EAAU,CACnDgB,cAAegN,MAInB7K,EAAAA,EAAAA,IAAUjL,GACViV,KACF,CA8CA,SAASyB,EACPE,EACA/B,EACAC,GAEA,MAAM,OAAEjT,GAAW+U,EACbC,EAAQhC,EArBhB,SAA0B+B,EAAqB/B,GAC7C,OAAIA,EAAW+B,EAAU,GAChB,EAGL/B,EAAW+B,EAAUA,EAAU/U,OAAS,GACnC+U,EAAU/U,OAAS,EAGrB+U,EAAUE,WAAU,CAACxU,EAAI4C,IAC9B5C,IAAOuS,GACHvS,EAAKuS,GAAY+B,EAAU1R,EAAI,GAAK2P,GAE5C,CAQ2BkC,CAAiBH,EAAW/B,IAAa,EAG5DmC,EAFclC,IAAcO,EAAAA,GAAkBC,UAEZuB,EAASA,EAAQ,GAAMhV,EACzDsT,EAFWL,IAAcO,EAAAA,GAAkBE,OAEpB5U,KAAK6U,MAAMJ,EAAAA,IAAqB,GAAKA,EAAAA,IAC5D6B,EAAOD,EAAoB7B,EAC3B+B,EAAKF,EAAoB7B,EAAY,EACrC3M,EAAiBoO,EAAUO,MAAMxW,KAAKE,IAAI,EAAGoW,GAAOC,EAAK,GAE/D,IAAIE,EACAC,EACJ,OAAQvC,GACN,KAAKO,EAAAA,GAAkBC,UACrB8B,EAAeJ,GAAqB,EACpCK,EAAcJ,GAAQ,EACtB,MACF,KAAK5B,EAAAA,GAAkBI,SACrB2B,EAAeJ,EAAoBnV,EACnCwV,EAAcH,GAAMrV,EAAS,EAC7B,MACF,KAAKwT,EAAAA,GAAkBE,OACvB,QACE6B,EAAe5O,EAAe3G,OAAS,EACvCwV,EAAc7O,EAAe3G,SAAWuT,EAAAA,IAI5C,MAAO,CAAE5M,iBAAgB4O,eAAcC,cACzC,CAEArD,eAAesD,GAAmCtX,EAAWuX,GAoB3D,IAAIC,EACJ,MAAMC,EAAmBF,EAAOG,WAAa,CAACC,EAAkB7T,KACzD6P,EAAwB/I,IAAI9G,KAC/B0T,EAAoB1T,EACpB6P,EAAwBiE,IAAI9T,EAAY2T,IAG1CzX,GAASqL,EAAAA,EAAAA,MACTrL,GAAS6X,EAAAA,EAAAA,IAAyB7X,EAAQ8D,EAAY6T,IACtD1M,EAAAA,EAAAA,IAAUjL,EAAO,OACfwJ,GAGA+N,EAAO5Q,WAAamR,EAAAA,WAChBC,EAAAA,EAAAA,YAGFnD,EAAAA,EAAAA,IAAQ,cAAe2C,EAAQE,GAEjCA,GAAoBD,IACtBxX,GAASqL,EAAAA,EAAAA,MACTrL,GAAS6X,EAAAA,EAAAA,IAAyB7X,EAAQwX,OAAmBhO,IAC7DyB,EAAAA,EAAAA,IAAUjL,GAEV2T,EAAwBqE,OAAOR,GAEnC,CA2MAxD,eAAeiE,GAA2CjY,EAAWoB,EAAgByT,GACnF,MAAMzR,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMwS,QAAehB,EAAAA,EAAAA,IAAQ,sBAAuB,CAAExR,OAAMyR,aAE5D,IAAKe,EAAQ,OAEb,MAAM,SAAE1F,GAAa0F,EAEf1M,GAAO4F,EAAAA,EAAAA,IAAqBoB,EAAU,MACtClG,EAAMhC,OAAOuG,KAAKrF,GAAMuF,IAAI3D,QAElC9K,GAASqL,EAAAA,EAAAA,MACTrL,GAASmW,EAAAA,EAAAA,KAAoBnW,EAAQoD,EAAKd,GAAI4G,GAC9ClJ,GAASkY,EAAAA,EAAAA,KAAkBlY,EAAQoB,EAAQgC,EAAM4G,IAEjDiB,EAAAA,EAAAA,IAAUjL,EACZ,EA9lDAgM,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,UACJsD,EAAYO,EAAAA,GAAkBE,OAAM,gBACpCP,GAAkB,EAAK,kBACvBmD,GAAoB,EAAK,SACzBlD,EAAQ,QACRmD,EAAO,MACPlU,GAAQC,EAAAA,EAAAA,OACNqN,GAAW,CAAC,EAEhB,IAAI,OAAEpQ,EAAM,SAAE0G,GAAa0J,GAAW,CAAC,EAEvC,IAAKpQ,IAAW0G,EAAU,CACxB,MAAM8E,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAC5D,IAAK0I,EAEH,YADAwL,MAIFhX,EAASwL,EAAmBxL,OAC5B0G,EAAW8E,EAAmB9E,QAChC,CAEA,MAAM1E,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAEhC,IAAKgC,GAAQA,EAAKiV,aAEhB,YADAD,MAIF,MAAME,GAAc7P,EAAAA,EAAAA,KAAkBzI,EAAQoB,EAAQ0G,EAAU5D,GAC1D4F,GAAYlC,EAAAA,EAAAA,KAAgB5H,EAAQoB,EAAQ0G,GAElD,GAAKwQ,GAAgBA,EAAYzW,QAAUiT,IAAcO,EAAAA,GAAkBE,OAuBpE,CACL,MAAMV,EAAWC,IAAcO,EAAAA,GAAkBC,UAAYgD,EAAY,GAAKA,EAAYA,EAAYzW,OAAS,GAG/G,IAAI4D,EAAAA,EAAAA,IAAiBoP,GAAW,OAGhC,GAAIA,IAAa/M,GAAYgN,IAAcO,EAAAA,GAAkBC,UAAW,OAExE,MAAMP,EAAawD,QAAQzO,IAAcA,EAAUxF,SAASuQ,IACtD4B,EAAc1B,GAChBuB,EAAAA,EAAAA,KAA8BtW,EAAQoB,EAAQ0G,EAAU+M,GAAY/K,EACxE,GAAI2M,GAAY5U,OAAQ,CACtB,MAAM,eACJ2G,EAAc,aAAE4O,EAAY,YAAEC,GAC5BX,EAAiBD,EAAY5B,EAAUC,GAEvCsC,IACFpX,GAAS2W,EAAAA,EAAAA,KAAuB3W,EAAQoB,EAAQ0G,EAAUU,EAAgBtE,KAG5Ea,EAAAA,EAAAA,KAAU,MAyBhBiP,eACEhU,EACAmD,EACAkU,EAAsBtC,EAAqBC,EAC3C5R,EAAe0E,EAAoBgN,EAA8BD,EACjEI,MACI/Q,GAAQC,EAAAA,EAAAA,QAEPkT,SACGpG,EACJjR,EAAQoD,EAAM0E,EAAU+M,EAAUC,EAAWC,EAAYC,EAAiBC,EAAU/Q,GAInF8Q,GACH7R,EAAQ8N,qBAAqB,CAC3B7P,OAAQgC,EAAKd,GAAIwF,WAAUgN,YAAWE,iBAAiB,EAAMC,WAAU/Q,SAG7E,CA3CasU,CACHxY,EACAmD,EACAkU,EACAtC,EACAC,EACA5R,EACA0E,EACAgN,EACAD,EACAI,EACA/Q,EACD,GAEL,CAEA,GAAI8Q,EACF,MAEJ,KAhEmF,CACjF,MAAMH,GAAW4D,EAAAA,EAAAA,KAAuBzY,EAAQoB,EAAQ8C,KAAUwU,EAAAA,EAAAA,KAAqB1Y,EAAQoB,EAAQ0G,GACjGiN,EAAawD,QAAQ1D,GAAY/K,IAAcA,EAAUxF,SAASuQ,IAClE4B,GAAc1B,GAChBuB,EAAAA,EAAAA,KAA8BtW,EAAQoB,EAAQ0G,EAAU+M,GACxD/K,IAAc,IACZ,eACJtB,EAAc,aAAE4O,EAAY,YAAEC,GAC5BX,EAAiBD,EAAY5B,EAAUQ,EAAAA,GAAkBE,QAEzD6B,IACFpX,GAAS2W,EAAAA,EAAAA,KAAuB3W,EAAQoB,EAAQ0G,EAAUU,EAAgBtE,IAGvEmT,EAOHpC,OANAlQ,EAAAA,EAAAA,KAAU,KACHkM,EACHjR,EAAQoD,EAAM0E,EAAW+M,EAAUQ,EAAAA,GAAkBE,OAAQR,EAAYC,EAAiBC,EAAU/Q,EACrG,GAKP,EA2CA+G,EAAAA,EAAAA,IAAUjL,EAAQ,CAAE2Y,sBAAuBR,GAAoB,KAwBjEnM,EAAAA,EAAAA,IAAiB,eAAegI,MAAOhU,EAAQmD,EAASqO,KACtD,MAAM,OACJpQ,EAAM,UAAE+F,EAAS,iBAAEyR,EAAgB,aAAExR,GACnCoK,EAEEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMpC,QA8nCRgT,eACEhU,EAAWoD,EAAe+D,EAAmByR,GAE7C,MAAMhD,QAAehB,EAAAA,EAAAA,IAAQ,eAAgB,CAAExR,OAAM+D,cACrD,GAAKyO,EAAL,CAIA,GAAIA,IAAWiD,EAAAA,GAkBf,OAJA7Y,GAASqL,EAAAA,EAAAA,MACTrL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoD,EAAKd,GAAI6E,EAAWyO,EAAO5U,UAC9DiK,EAAAA,EAAAA,IAAUjL,GAEH4V,EAAO5U,QAjBZ,GAAI4X,EAAkB,CACpB5Y,GAASqL,EAAAA,EAAAA,MACT,MAAMyN,GAAehU,EAAAA,EAAAA,KAAkB9E,EAAQoD,EAAKd,GAAIsW,GACxD5Y,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoD,EAAKd,GAAIsW,EAAkB,IACzDE,EACHnS,eAAW6C,KAEbyB,EAAAA,EAAAA,IAAUjL,EACZ,CAXF,CAqBF,CAzpCwBkH,CAAYlH,EAAQoD,EAAM+D,EAAWyR,GAC3D,GAAI5X,GAAWoG,EAAc,CAC3B,MAAM,cAAEC,EAAa,WAAEX,GAAeU,EACtCpH,GAASqL,EAAAA,EAAAA,MAETrL,GAASiH,EAAAA,EAAAA,KACPjH,EACAgB,EACAI,EACAiG,EACAX,IAEFuE,EAAAA,EAAAA,IAAUjL,EACZ,MAGFgM,EAAAA,EAAAA,IAAiB,eAAe,CAAChM,EAAQmD,EAASqO,KAChD,MAAM,YAAEuH,EAAW,MAAE7U,GAAQC,EAAAA,EAAAA,OAAsBqN,GAE7C,QAAE9E,EAAS1K,OAAQgX,IAAgBC,EAAAA,EAAAA,KAAyBjZ,EAAQkE,GACpEgV,EAAeX,QAAQ7L,GAAWsM,GAExC,IAAKD,IAAgBG,EACnB,OAGF,IAAI,OAAE9X,EAAM,SAAE0G,EAAQ,KAAE1F,GAAS2W,GAAe,CAAC,EASjD,GARIG,IACF9X,EAAS4X,EACTlR,EAAWD,EAAAA,GACXzF,EAAO,UAGToP,GAAU7B,EAAAA,EAAAA,IAAK6B,EAAS,CAAC,UAEZ,cAATpP,IAAyBoP,EAAQ2H,YACnC,OAAOvL,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BoZ,qBAAsB5H,GACrBtN,GAGL,MAAMd,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1B8S,GAAQmF,EAAAA,EAAAA,KAAYrZ,EAAQoB,EAAS0G,GACrCwR,GAAepZ,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOqV,iBAAiB5K,YAAY9M,OAE1E2X,EAAkBF,GAAiBJ,OAAkC1P,EAAnB0K,GAAOvN,UAEzDyF,EAAiB8M,EAAe,CACpC9W,KAAM,QACNJ,OAAQgX,EACRtM,QAASA,QAC0BlD,EAE/BiQ,GAAmBjF,EAAAA,EAAAA,KAAuBxU,EAAQoB,EAAS0G,EAAW0R,GAEtE7S,EAAYyF,GAAkBqN,EAC9BpS,GAAgB+B,EAAAA,EAAAA,KAAwBpJ,EAAQoB,GAEhDmW,EAAS,IACV/F,EACHpO,OACAuD,YACA+S,WAAWC,EAAAA,EAAAA,KAAgB3Z,EAAQoB,EAAS0G,GAC5C8R,QAAQlY,EAAAA,EAAAA,KAAa1B,EAAQoB,GAC7BiG,iBAGG6R,GACH/V,EAAQ0W,oBAAoB,CAAE3V,UAGhC,MAAM4V,GAAYtI,EAAQuI,aAAevI,EAAQuI,YAAYlY,QAAU,EACjEmY,GAAaF,GAAYtI,EAAQyI,oBAEvC,GAAIH,EAAU,CACZ,MAAM,YAAEC,KAAgBG,GAAe3C,EACvCD,GAAYtX,EAAQ,IACfka,EACHxC,WAAYqC,EAAcA,EAAY,QAAKvQ,EAC3C0C,WAAYqM,QAAQrE,IAExB,MAAO,GAAI8F,EAAW,CACpB,MAAM,KACJ3L,EAAI,SAAE8L,EAAQ,YAAEJ,KAAgBK,GAC9B7C,EACE8C,EA84DV,SAAgCN,GAC9B,OAAOA,EAAYO,QAAO,CAACC,EAAK7C,EAAYb,EAAO2D,IACnC,IAAV3D,GACF0D,EAAI7O,KAAK,CAACgM,IACH6C,IAGIE,GAAkB/C,KACV+C,GAAkBD,EAAI3D,EAAQ,IAEjD0D,EAAIA,EAAI1Y,OAAS,GAAG6J,KAAKgM,GAEzB6C,EAAI7O,KAAK,CAACgM,IAGL6C,IACN,GACL,CA/5DmBG,CAAuBX,GAEtC,IAAIY,GAAiB,EACrBN,EAAOnY,SAAQ,CAAC0Y,EAAOC,KACrB,MAAMC,GAAqBC,EAAAA,EAAAA,IAAMH,EAA0BI,EAAAA,KAC3D,IAAK,IAAI9V,EAAI,EAAGA,EAAI4V,EAAmBjZ,OAAQqD,IAAK,CAClD,MAAM+V,EAAa,GAAExY,KAAKC,QAAQmY,IAAa3V,IAEzCgW,EAAgB,IAANhW,GAA0B,IAAf2V,EACrBM,EAASjW,IAAM4V,EAAmBjZ,OAAS,GAAKgZ,IAAeR,EAAOxY,OAAS,EAErF,GAAI+Y,EAAM,GAAGQ,QAAUR,EAAM,GAAGS,iBAAkB,CAChD,MAAOC,KAAoBC,GAAmBT,EAAmB5V,GACjEoS,GAAYtX,EAAQ,IACfoa,EACH/L,KAAM6M,IAAYP,EAAiBtM,OAAO7E,EAC1C2Q,SAAUe,IAAYP,EAAiBR,OAAW3Q,EAClDkO,WAAY4D,EACZL,UAAWM,EAAgB1Z,OAAS,EAAIoZ,OAAYzR,EACpD0C,WAAYqM,QAAQrE,KAEtByG,GAAiB,EAEjBY,EAAgBrZ,SAASwV,IACvBJ,GAAYtX,EAAQ,IACfoa,EACH1C,aACAuD,aACA,GAEN,KAAO,CACL,MAAMO,EAAmBV,EAAmB5V,GAAGiS,MAAM,GAAI,GACnDsE,EAAiBX,EAAmB5V,GAAG4V,EAAmB5V,GAAGrD,OAAS,GAC5E2Z,EAAiBtZ,SAASwV,IACxBJ,GAAYtX,EAAQ,IACfoa,EACH1C,aACAuD,aACA,IAGJ3D,GAAYtX,EAAQ,IACfoa,EACH/L,KAAM8M,IAAWR,EAAiBtM,OAAO7E,EACzC2Q,SAAUgB,IAAWR,EAAiBR,OAAW3Q,EACjDkO,WAAY+D,EACZR,UAAWO,EAAiB3Z,OAAS,EAAIoZ,OAAYzR,EACrD0C,WAAYqM,QAAQrE,KAEtByG,GAAiB,CACnB,CACF,IAEJ,KAAO,CACL,MAAM,KACJtM,EAAI,SAAE8L,EAAQ,YAAEJ,EAAapT,UAAW+U,KAA2BtB,GACjE7C,EAEAlJ,GACFiJ,GAAYtX,EAAQ,IACfoa,EACH/L,OACA8L,WACAxT,UAAW+U,EACXxP,WAAYqM,QAAQrE,KAIxB6F,GAAa7X,SAASwV,IACpBJ,GAAYtX,EAAQ,IACfoa,EACH1C,cACA,GAEN,CAEgB,KAGlB1L,EAAAA,EAAAA,IAAiB,sBAAsBgI,MAAOhU,EAAQmD,EAASqO,KAC7D,MAAM,OAAEpQ,EAAM,QAAEua,EAAO,MAAEzX,GAAQC,EAAAA,EAAAA,OAAsBqN,EACjDoK,GAAeC,EAAAA,EAAAA,KAAmB7b,EAAQoB,GAChD,IAAKwa,GAAcE,WACjB,OAEF,MAAMC,EAA0B,GAehC,aAdMC,QAAQC,IAAIN,EAAQlN,KAAKyN,IAC7B,MAAM9Y,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQkc,GAChC,IAAK9Y,EACH,OAEF,MAAM+Y,GAAeC,EAAAA,EAAAA,MAAgB9H,EAAAA,EAAAA,KAAWtU,EAAQkc,IAIxD,OAHIC,GACFJ,EAAcrQ,KAAKyQ,GAEd7E,GAAYtX,EAAQ,CACzBoD,OACAiL,KAAMuN,EAAaE,YACnB,KAEG3Y,EAAQiM,iBAAiB,CAC9BpO,SAASqb,EAAAA,EAAAA,IAAa,yCAA0CN,EAAcO,KAAK,OACnFpY,SACA,KAGJ8H,EAAAA,EAAAA,IAAiB,eAAe,CAAChM,EAAQmD,EAASqO,KAChD,MAAM,YACJuH,EAAW,KAAE1K,EAAI,SAAE8L,EAAQ,YAAEJ,EAAW,MAAE7V,GAAQC,EAAAA,EAAAA,OAChDqN,EAEJ,IAAKuH,EACH,OAGF,IAAIvB,EACJ,MAAMC,EAAmBsC,EAAc,CAACpC,EAAkB7T,KACnD6P,EAAwB/I,IAAI9G,KAC/B0T,EAAoB1T,EACpB6P,EAAwBiE,IAAI9T,EAAY2T,IAG1CzX,GAASqL,EAAAA,EAAAA,MACTrL,GAAS6X,EAAAA,EAAAA,IAAyB7X,EAAQ8D,EAAY6T,IACtD1M,EAAAA,EAAAA,IAAUjL,EAAO,OACfwJ,GAEE,OAAEpI,EAAM,SAAE0G,EAAU1F,KAAMmN,GAAoBwJ,EAC9C3V,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BJ,GAAUub,EAAAA,EAAAA,KAAqBvc,EAAQoB,EAAQ0G,EAAUyH,GAC1DnM,GAASpC,IAIdmC,EAAQqZ,aAAa,CAAErV,eAAWqC,EAAWtF,UAE7C,iBACQ0Q,EAAAA,EAAAA,IAAQ,cAAe,CAC3BxR,OACApC,UACA0W,WAAYqC,EAAcA,EAAY,QAAKvQ,EAC3C6E,OACA8L,WACAT,WAAWC,EAAAA,EAAAA,KAAgB3Z,EAAQoB,EAAQ0G,IAC1C2P,GAECA,GAAoBD,IACtBxX,GAASqL,EAAAA,EAAAA,MACTrL,GAAS6X,EAAAA,EAAAA,IAAyB7X,EAAQwX,OAAmBhO,IAC7DyB,EAAAA,EAAAA,IAAUjL,GAEV2T,EAAwBqE,OAAOR,GAElC,EAjBD,GAiBI,KAGNxL,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,OAAEpQ,EAAM,UAAE+F,GAAcqK,EAExBxQ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ+F,GAClD,IAAKnG,EAAS,OAEd,MAAMyW,EAAmBzW,GAAW2S,EAAwBnT,KAAIuD,EAAAA,EAAAA,IAAc/C,IAC1EyW,IACFgF,EAAAA,EAAAA,IAAkBhF,IAGhB9O,EAAAA,EAAAA,KAAe3H,IACjBmC,EAAQuZ,UAAU,CAChB,QAAS,iBACT1S,IAAK,CAAC7C,GACN/F,UAEJ,KAGF4K,EAAAA,EAAAA,IAAiB,aAAa,CAAChM,EAAQmD,EAASqO,KAC9C,MAAM,OACJpQ,EAAM,SAAE0G,EAAQ,KAAEuG,GAChBmD,EACJ,IAAKnD,EACH,OAGF,MAAMsO,GAAetD,EAAAA,EAAAA,KAAYrZ,EAAQoB,EAAQ0G,GAQjDmM,EAAU,CACRjU,SAAQoB,SAAQ0G,WAAUoM,MAPD,CACzB7F,OACA1H,UAAWgW,GAAchW,UACzBiW,SAAUD,GAAcC,WAKxB,KAGJ5Q,EAAAA,EAAAA,IAAiB,cAAc,CAAChM,EAAQmD,EAASqO,KAC/C,MAAM,OACJpQ,EAAM,SAAE0G,EAAWD,EAAAA,GAAc,YAAEsM,EAAW,gBAAE0I,GAC9CrL,EACEmL,GAAetD,EAAAA,EAAAA,KAAYrZ,EAAQoB,EAAQ0G,GACjD,IAAK6U,EACH,OAGF,MAAMG,EAAmBH,EAAahW,UAMtCsN,EAAU,CACRjU,SAAQoB,SAAQ0G,WAAUoM,MALW2I,GAAmBC,EAAmB,CAC3EnW,UAAWmW,QACTtT,EAGyC2K,eAC3C,KAGJnI,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,SAAsBtB,GAAW2O,EAC3C5E,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAC5D,IAAK0I,EACH,OAGF,MAAM,OAAExL,EAAM,SAAE0G,GAAa8E,EAEvB+P,GAAetD,EAAAA,EAAAA,KAAYrZ,EAAQoB,EAAQ0G,GAE3CiV,EAAmB,CACvB3a,KAAM,aACHua,GAAchW,aACd9D,GAGAka,EAAiBhW,cAOtBkN,EAAU,CACRjU,SAAQoB,SAAQ0G,WAAUoM,MAND,IACtByI,EACHhW,UAAWoW,GAIgC5I,aAAa,EAAMC,mBAAmB,GACjF,KAGJpI,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5C5E,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAC5D,IAAK0I,EACH,OAEF,MAAM,OAAExL,EAAM,SAAE0G,GAAa8E,EAEvB+P,GAAetD,EAAAA,EAAAA,KAAYrZ,EAAQoB,EAAQ0G,GAC3C2M,EAAkCkI,GAActO,KAAmB,IACpEsO,EACHhW,eAAW6C,QAFgDA,EAK7DyK,EAAU,CACRjU,SAAQoB,SAAQ0G,WAAUoM,MAAOO,EAAUN,YAAaoE,QAAQ9D,IAChE,KAGJzI,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,OACJpQ,EAAM,SAAE0G,EAAQ,SAAE8U,GAChBpL,EASJyC,EAAU,CACRjU,SAAQoB,SAAQ0G,WAAUoM,MANX,KAFImF,EAAAA,EAAAA,KAAYrZ,EAAQoB,EAAQ0G,GAI/C8U,YAI2CzI,aAAa,EAAMC,mBAAmB,GACjF,KA8CJpI,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,OAAEpQ,EAAM,SAAE0G,EAAQ,UAAE4R,GAAclI,EAExC,OAAO9I,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQ0G,EAAU,YAAa4R,EAAU,KAG7E1N,EAAAA,EAAAA,IAAiB,cAAc,CAAChM,EAAQmD,EAASqO,KAC/C,MAAM,OACJpQ,EAAM,UAAE+F,EAAS,QAAE6V,EAAO,UAAEC,EAAS,SAAEC,GACrC1L,EAEEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC3BgC,IAIAwR,EAAAA,EAAAA,IAAQ,aAAc,CACzBxR,OAAM+D,YAAW6V,UAASC,YAAWC,YACrC,KAGJlR,EAAAA,EAAAA,IAAiB,oBAAoBgI,MAAOhU,EAAQmD,EAASqO,KAC3D,MAAM,OAAEpQ,EAAM,SAAE0G,GAAa0J,EACvBpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EACH,aAGIwR,EAAAA,EAAAA,IAAQ,mBAAoB,CAAExR,OAAM0E,aAE1C9H,GAASqL,EAAAA,EAAAA,MACT,MAAMkF,GAAYC,EAAAA,EAAAA,KAAgBxQ,EAAQoB,EAAQ0G,GAClDyI,GAAWrO,SAASI,IAClBtC,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQkB,EAAI,CAAE2N,UAAU,GAAQ,IAErEjQ,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoD,EAAKd,GAAIuF,EAAAA,GAAgB,YAAa,KAC1EoD,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,kBAAkB,CAAChM,EAAQmD,EAASqO,KACnD,MAAM,WAAE7C,EAAU,mBAAEwO,EAAkB,MAAEjZ,GAAQC,EAAAA,EAAAA,OAAsBqN,EAChE5E,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAC5D,IAAK0I,EACH,OAEF,MAAM,OAAExL,EAAM,SAAE0G,GAAa8E,EACvBxJ,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1Bgc,EAAqBzO,EAAW7M,QAAQQ,IAC5C,MAAMtB,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQkB,GAClD,OAAOtB,KAAY2H,EAAAA,EAAAA,KAAe3H,EAAQ,IAI5C,IAAKoc,EAAmBvb,QAAU8M,EAAW9M,OAE3C,YADAkI,EAAe/J,GAAQqd,EAAAA,EAAAA,KAAcja,GAAQhC,OAASoI,EAAWmF,EAAYxL,IAI1EyR,EAAAA,EAAAA,IAAQ,iBAAkB,CAAExR,OAAMuL,WAAYyO,EAAoBD,uBAEvE,MAAMG,GAAYC,EAAAA,EAAAA,KAAgBvd,EAAQoB,EAAQ0G,GAC9CwV,GAAa3O,EAAWrK,SAASgZ,IACnCna,EAAQqZ,aAAa,CAAErV,eAAWqC,EAAWtF,SAC/C,KAGF8H,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,WAAE7C,EAAU,MAAEzK,GAAQC,EAAAA,EAAAA,OAAsBqN,EAC5C5E,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAC5D,IAAK0I,EACH,OAGF,MAAM,OAAExL,GAAWwL,EACbxJ,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,IAE3BwT,EAAAA,EAAAA,IAAQ,0BAA2B,CAAExR,OAAMuL,eAEhD,MAAM2O,GAAYE,EAAAA,EAAAA,KAAyBxd,EAAQoB,GAC/Ckc,GAAa3O,EAAWrK,SAASgZ,IACnCna,EAAQqZ,aAAa,CAAErV,eAAWqC,EAAWtF,SAC/C,KAGF8H,EAAAA,EAAAA,IAAiB,iBAAiBgI,MAAOhU,EAAQmD,EAASqO,KACxD,MAAM,OAAEpQ,EAAM,mBAAE+b,EAAkB,MAAEjZ,GAAQC,EAAAA,EAAAA,OAAsBqN,EAC5DpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EACH,aAGIwR,EAAAA,EAAAA,IAAQ,gBAAiB,CAAExR,OAAM+Z,uBAEvCnd,GAASqL,EAAAA,EAAAA,MACT,MAAMoS,GAAa5Q,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAChDuZ,GAAcA,EAAWrc,SAAWA,GACtC+B,EAAQua,SAAS,CAAEpb,QAAIkH,EAAWtF,UAIpC,MAAMyZ,EAAU3d,EAAO4d,YAAY1U,KACnClB,OAAOC,OAAO0V,GAASzb,SAAS2b,IAC9B,GAAIA,EAAOC,gBAAgBxZ,SAASlD,IAAWyc,EAAOE,eAAezZ,SAASlD,GAAS,CACrF,MAAM4c,EAAqBH,EAAOC,gBAAgBhc,QAAQQ,GAAOA,IAAOlB,IAClE6c,EAAmBJ,EAAOE,eAAejc,QAAQQ,GAAOA,IAAOlB,IAE/D8c,EAAgB,IACjBL,EACHC,gBAAiBE,EACjBD,cAAeE,IAGjBrJ,EAAAA,EAAAA,IAAQ,iBAAkB,CACxBtS,GAAIub,EAAOvb,GACX6b,aAAcD,GAElB,IACA,KAGJlS,EAAAA,EAAAA,IAAiB,sBAAsBgI,MAAOhU,EAAQmD,EAASqO,KAC7D,MAAM,OAAEpQ,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsBqN,EACxCpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EACH,aAGIwR,EAAAA,EAAAA,IAAQ,qBAAsB,CAAExR,SAEtCpD,GAASqL,EAAAA,EAAAA,MACT,MAAMoS,GAAa5Q,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAChDuZ,GAAcA,EAAW3V,WAAa1G,GACxC+B,EAAQua,SAAS,CAAEpb,QAAIkH,EAAWtF,SACpC,KAGF8H,EAAAA,EAAAA,IAAiB,kBAAkBgI,MAAOhU,EAAQmD,EAASqO,KACzD,MAAM,WACJ7C,EAAU,YAAEyP,EAAc,GAAE,OAAEC,EAAS,GAAE,OAAEjd,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OACzDqN,EACEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAE1Bkd,QAAiB1J,EAAAA,EAAAA,IAAQ,iBAAkB,CAC/C2J,KAAMnb,EAAMuL,aAAYyP,cAAaC,WAGvC,IAAKC,EAAU,OAEf,MAAM,OAAE1I,EAAM,MAAExC,GAAUkL,EAE1B,GAAIlL,IAAUoL,EAAAA,IAMZ,OALArb,EAAQiM,iBAAiB,CACvBpO,SAASqb,EAAAA,EAAAA,IAAa,qCACtBnY,eAEFf,EAAQsb,iBAAiB,CAAEva,UAI7B,GAAK0R,EAAL,CAEA,GAAoB,aAAhBA,EAAOxT,KAQT,OAPAe,EAAQiM,iBAAiB,CACvBpO,QAAS4U,GACLyG,EAAAA,EAAAA,IAAa,2BACb,2EACJnY,eAEFf,EAAQsb,iBAAiB,CAAEva,UAI7B,GAAoB,iBAAhB0R,EAAOxT,KAAyB,CAClCpC,GAASqL,EAAAA,EAAAA,MACT,MAAMqT,GAAcxe,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOya,aAAaC,SACzDC,EAAiBH,IAAcA,EAAY7c,OAAS,IAAIyQ,SAAS9O,MAAMsb,GAAMA,EAAET,SAAWA,IAC1FU,EAAa,CACjBzP,MAAOsG,EAAOtG,MACdgD,QAASsD,EAAOtD,QAChB0M,SAAUH,GAAgBxQ,MAE5BrO,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B2e,YAAa,CACXvd,SACAuN,aACAyP,cACAa,QAAS,UACTL,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzD7a,IACH+G,EAAAA,EAAAA,IAAUjL,EACZ,CAEA,GAAoB,YAAhB4V,EAAOxT,KAAoB,CAC7BpC,GAASqL,EAAAA,EAAAA,MACT,MAAMqT,GAAcxe,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOya,aAAaC,SACzDC,EAAiBH,IAAcA,EAAY7c,OAAS,IAAIyQ,SAAS9O,MAAMsb,GAAMA,EAAET,SAAWA,IAC1FU,EAAa,CACjBG,WAAYtJ,EAAOsJ,WACnBb,OAAQzI,EAAOyI,OACf/O,MAAOuP,GAAgBxQ,MAEzBrO,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B2e,YAAa,CACXvd,SACAuN,aACAyP,cACAa,QAAS,UACTL,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzD7a,IACH+G,EAAAA,EAAAA,IAAUjL,EACZ,CArDmB,CAqDnB,KAGFgM,EAAAA,EAAAA,IAAiB,qBAAqBgI,MAAOhU,EAAQmD,EAASqO,KAC5D,MAAM,OAAElH,EAAM,OAAElJ,EAAM,SAAE0G,GAAa0J,EACrC,GAA+B,yBAA3BxR,EAAOmf,gBAA4C,OACvD,IAAIhe,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAAS,OAE1C,MAAMgC,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EAAM,OACX,MAAMiR,GAAOC,EAAAA,EAAAA,KAAWtU,EAAQoB,GAC5BiT,KAAS+K,EAAAA,EAAAA,KAAU/K,KAASE,EAAAA,EAAAA,KAAcF,WAExCO,EAAAA,EAAAA,IAAQ,oBAAqB,CACjC2J,KAAMnb,EAAM0E,WAAUwC,UACtB,KAGJ0B,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,cAAE6N,EAAa,OAAEje,EAAM,WAAEuN,GAAe6C,EACxC+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQqf,GAC1Bjc,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC3Bmd,GAASnb,IAITwR,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE2J,OAAMnb,OAAMuL,cAAa,KAG/D3C,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,MAAEzB,EAAK,MAAE7L,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEvC5E,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAC5D,IAAK0I,EACH,OAGF,MAAM,OAAExL,EAAM,SAAE0G,GAAa8E,EACvBxJ,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,IAAQuI,EAAAA,EAAAA,KAAiBvK,EAAQ0G,EAAU9H,EAAOiC,eACrD,OAGF4R,GAAwB,MACjBe,EAAAA,EAAAA,IAAQ,sBAAuB,CAClCxR,OAAM0E,WAAUiI,SAChB,IAGA3O,IAAWyQ,EAAAA,MACb7R,EAAS,IACJA,EACH8R,qBAAsB9R,EAAO8R,qBAAqBrD,KAAKsD,GAC9CA,EAAanO,UAAYmO,EAAazP,IAAMyN,EAAQ,IAAKgC,EAAcnO,UAAU,GAAUmO,MAKxG,MAAMuG,GAAc7P,EAAAA,EAAAA,KAAkBzI,EAAQoB,EAAQ0G,EAAU5D,GAC1Dqb,GAAQlX,EAAAA,EAAAA,KAAoBrI,EAAQoB,EAAQ0G,GAElD,GAAIA,IAAaD,EAAAA,KAAmBzE,EAAKkG,QAIvC,OAHST,EAAAA,EAAAA,KAAiB7I,EAAQoB,EAAQ0G,EAAU,CAClDkI,uBAAwBD,IAK5B,IAAKuI,IAAgBiH,IAAUnc,EAAKuE,YAClC,OAAO3H,EAGT,MAAMwf,EA0xCR,SAAwBxV,EAAeiN,EAAcC,GAEnD,GAAmB,IAAflN,EAAInI,QAAgBoV,EAAOjN,EAAI,IAAMkN,EAAKlN,EAAIA,EAAInI,OAAS,GAAI,OAEnE,IAAIiU,EAAQ,EAEZ,IAAK,IAAI5Q,EAAI,EAAGua,EAAIzV,EAAInI,OAAQqD,EAAIua,IAC9BzV,EAAI9E,IAAM+R,GAAQjN,EAAI9E,IAAMgS,GAC9BpB,MAGE9L,EAAI9E,IAAMgS,IALuBhS,KAUvC,OAAO4Q,CACT,CA3yCoB4J,CAAepH,EAAaiH,EAAOxP,GACrD,IAAKyP,EACH,OAAOxf,EAGT,MAAMqJ,GAAQe,EAAAA,EAAAA,KAAYpK,EAAQoB,EAAQ0G,GAC1C,GAAI1E,EAAKkG,SAAWD,EAAO,CACzBrJ,GAAS6I,EAAAA,EAAAA,KAAiB7I,EAAQoB,EAAQ0G,EAAU,CAClDkI,uBAAwBD,IAE1B,MAAM4P,EAAsBhf,KAAKE,IAAI,EAAGwI,EAAM1B,YAAc6X,GAM5D,OAL4B,IAAxBG,IACF3f,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClCuG,YAAahH,KAAKE,IAAI,EAAGuC,EAAKuE,YAAc,OAGzC8B,EAAAA,EAAAA,KAAYzJ,EAAQoB,EAAQ0J,OAAOhD,GAAW,CACnDH,YAAagY,GAEjB,CAEA,OAAO7c,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAChC4O,uBAAwBD,EACxBpI,YAAahH,KAAKE,IAAI,EAAGuC,EAAKuE,YAAc6X,IAC5C,KAGJxT,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,WAAE7C,EAAU,MAAEzK,GAAQC,EAAAA,EAAAA,MAAiB,2BAAEyb,GAA+BpO,EAExEpO,GAAOyc,EAAAA,EAAAA,KAAkB7f,EAAQkE,GAClCd,IAIAwR,EAAAA,EAAAA,IAAQ,mBAAoB,CAAExR,OAAMuL,eACtCmR,MAAK,KACAF,GACFzc,EAAQ4c,qBAAqB,CAAE3e,OAAQgC,EAAKd,IAC9C,GACA,KAGN0J,EAAAA,EAAAA,IAAiB,sBAAsBgI,MAAOhU,EAAQmD,EAASqO,KAC7D,MAAM,KAAEnD,EAAI,MAAEnK,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEtCwO,QAAuBpL,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEvG,SAE9DrO,GAASqL,EAAAA,EAAAA,MACTrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BggB,kBACC9b,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,IAAKtR,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO8b,eAInC,OAAOpS,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BggB,oBAAgBxW,GACftF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,gBAAgB,CAAChM,EAAQmD,EAASqO,KACjD,MAAM,OAAEpQ,EAAM,UAAE+F,EAAS,QAAEmL,GAAYd,EACjCpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAE5BgC,IACGwR,EAAAA,EAAAA,IAAQ,eAAgB,CAAExR,OAAM+D,YAAWmL,WAClD,KAGFtG,EAAAA,EAAAA,IAAiB,kBAAkB,CAAChM,EAAQmD,EAASqO,KACnD,MAAM,OAAEpQ,EAAM,UAAE+F,GAAcqK,EACxBpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAE5BgC,IACGwR,EAAAA,EAAAA,IAAQ,eAAgB,CAAExR,OAAM+D,YAAWmL,QAAS,IAC3D,KAGFtG,EAAAA,EAAAA,IAAiB,aAAa,CAAChM,EAAQmD,EAASqO,KAC9C,MAAM,OAAEpQ,EAAM,UAAE+F,GAAcqK,EACxBpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BJ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ+F,GAC5CgF,EAAOnL,IAAWif,EAAAA,EAAAA,KAAsBjgB,EAAQgB,GAClDoC,GAAQ+I,IACLyI,EAAAA,EAAAA,IAAQ,YAAa,CAAExR,OAAM+D,YAAWgF,QAC/C,KAGFH,EAAAA,EAAAA,IAAiB,yBAAyBgI,MAAOhU,EAAQmD,EAASqO,KAChE,MAAM,KACJpO,EAAI,UAAE+D,EAAS,OAAEkX,EAAM,OAAE6B,EAAM,MAAErK,EAAK,kBAAEsK,EAAiB,MAAEjc,GAAQC,EAAAA,EAAAA,OACjEqN,EAEEoE,QAAehB,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDxR,OAAM+D,YAAWkX,SAAQ6B,SAAQrK,UAGnC,IAAKD,EACH,OAGF5V,GAASqL,EAAAA,EAAAA,MAET,MAAMsC,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,IAClC,YAAEkc,GAAgBzS,GAClB,OAAE0S,GAAW1S,EAASyS,YAE5BpgB,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BogB,YAAa,IACRA,EACHC,OAAQ,IACHA,EACH,CAAChC,IAAStS,EAAAA,EAAAA,IAAO,KACVoU,GAAqBE,IAAShC,GAAUgC,EAAOhC,GAAU,MAC3DzI,EAAO0K,MAAM7R,KAAK8R,GAASA,EAAKve,YAGvCwe,QAAS,IACHJ,EAAYI,QAAUJ,EAAYI,QAAU,CAAC,EACjD,CAACnC,GAASzI,EAAO6K,YAAc,MAGlCvc,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,OAAEpQ,EAAM,IAAE4I,GAAQwH,EAClBpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC5BgC,IACGwR,EAAAA,EAAAA,IAAQ,qBAAsB,CAAExR,OAAM4G,OAC7C,KAGFgC,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,SACJ0L,EAAQ,YAAE/D,EAAW,MAAEjV,GAAQC,EAAAA,EAAAA,OAC7BqN,GAEE,WACJkP,EAAU,WAAE/R,EAAU,SAAEgS,EAAQ,YAAEC,EAAW,UAAEC,EAAS,WAAEC,EAAU,WAAEC,EAAalZ,EAAAA,KACjF3H,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOqV,gBAE5ByH,GAAuBC,EAAAA,EAAAA,KAA2BjhB,GAClDkhB,EAAiBH,IAAelZ,EAAAA,GAEhCsZ,EAAWT,GAAajZ,EAAAA,EAAAA,KAAWzH,EAAQ0gB,QAAclX,EACzD4X,EAAST,GAAWlZ,EAAAA,EAAAA,KAAWzH,EAAQ2gB,QAAYnX,EAEnD0G,EAAWwQ,GAAc/R,EAC3BA,EACCjK,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IACnB6J,KAAKnM,IAAOwC,EAAAA,EAAAA,KAAkB9E,EAAQ0gB,EAAYpe,KAAKR,OAAOyW,cAC/D/O,EAEJ,IAAK2X,IAAaC,IAAWlR,GAAa6Q,IAAeG,IAAmBE,EAAO9X,QACjF,OAGF,MAAMsQ,GAASlY,EAAAA,EAAAA,KAAa1B,EAAQ2gB,GAC9BzM,GAAQmF,EAAAA,EAAAA,KAAYrZ,EAAQ2gB,EAAWI,GAAclZ,EAAAA,IACrDR,GAAgB+B,EAAAA,EAAAA,KAAwBpJ,EAAQohB,EAAO9e,KAEtD+e,EAAcC,IAAmBC,EAAAA,EAAAA,IAAUrR,GAAWsR,KAAOC,EAAAA,EAAAA,KAA6BD,KAC3FE,EAA0BL,EAAavf,QAAQd,IAAY2gB,EAAAA,EAAAA,KAAwB3hB,EAAQgB,KACjG,GAAI0gB,EAAwB7f,OAAQ,CAClC,MAAM+f,EAAiB5hB,EAAO6hB,QAAQC,mBAClCC,EAAAA,EAAAA,KAA2BL,EAAyB1hB,EAAO6hB,OAAOC,mBAClE,CAACJ,GACL,iBACQ3J,EAAAA,EAAAA,MACN6J,EAAe1f,SAAS8f,KACtBpN,EAAAA,EAAAA,IAAQ,kBAAmB,CACzBuM,WACAC,SACAL,aACA7Q,SAAU8R,EACV9E,WACA/D,cACAS,SACAgH,cACAC,YACAC,aACAE,uBACA9U,WAAYqM,QAAQrE,GACpB7M,iBACA,GAEL,EAnBD,EAoBF,CAEAia,EACGpf,SAASlB,IACR,MAAM,KAAEqN,EAAI,SAAE8L,GAAanZ,EAAQwE,QAAQ6I,MAAQ,CAAC,GAC9C,QAAEzI,GAAY5E,EAAQwE,QAEtBmB,GAAY6N,EAAAA,EAAAA,KAAuBxU,EAAQohB,EAAO9e,GAAIye,GAEvDzJ,GAAYtX,EAAQ,CACvBoD,KAAMge,EACNza,YACA0H,OACA8L,WACAvU,UACAsX,WACA/D,cACAS,SACAvS,iBACA,IAGNrH,GAASqL,EAAAA,EAAAA,MACTrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BuZ,gBAAiB,CAAC,EAClB0I,0BAA0B,GACzB/d,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,wBAAwBgI,MAAOhU,EAAQmD,EAASqO,KAC/D,MAAM,OAAEpQ,GAAWoQ,EACbpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMwS,QAAehB,EAAAA,EAAAA,IAAQ,wBAAyB,CAAExR,SACxD,IAAKwS,EACH,OAGF,MAAM,SAAE1F,GAAa0F,EAEf1M,GAAO4F,EAAAA,EAAAA,IAAqBoB,EAAU,MACtClG,EAAMhC,OAAOuG,KAAKrF,GAAMuF,IAAI3D,QAAQpG,MAAK,CAACC,EAAGC,IAAMA,EAAID,IAS7D,GAPA3E,GAASqL,EAAAA,EAAAA,MACTrL,GAASkiB,EAAAA,EAAAA,KAAwBliB,EAAQoD,EAAKd,GAAI4G,GAClDlJ,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoD,EAAKd,GAAIuF,EAAAA,GAAgB,eAAgBmC,GACxEA,EAAInI,SACP7B,GAASmO,EAAAA,EAAAA,KAAmBnO,EAAQoD,EAAKd,GAAI,CAAE8L,sBAAsB,KAGnEhL,GAAMkG,QAAS,CACjB,MAAM6Y,EAAiD,CAAC,EACxDjS,EAAShO,SAASlB,IAChB,MAAM8G,GAAW0C,EAAAA,EAAAA,KAA0BxK,EAAQgB,GAC7CohB,EAAoBD,EAAmBra,IAAa,GAC1Dsa,EAAkB1W,KAAK1K,EAAQsB,IAC/B6f,EAAmBra,GAAYsa,CAAiB,IAGlDpa,OAAOsI,QAAQ6R,GAAoBjgB,SAAQ,EAAE4F,EAAUkG,MACrDhO,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoD,EAAKd,GAAIwI,OAAOhD,GAAW,eAAgBkG,EAAa,GAEhG,EACA/C,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,OACJpQ,EAAM,GAAEkB,GACNkP,EAEEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAE3BgC,IAIAwR,EAAAA,EAAAA,IAAQ,wBAAyB,CACpCxR,OACA4G,IAAK,CAAC1H,IACN,KAGJ0J,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,OACJpQ,EAAM,UAAE+F,EAAS,YAAEgS,GACjB3H,EAEEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BJ,EAAUoC,IAAQmC,EAAAA,EAAAA,KAAuBvF,EAAQoD,EAAKd,GAAI6E,GAC3D/D,GAASpC,IAIT4T,EAAAA,EAAAA,IAAQ,oBAAqB,CAChCxR,OACApC,UACAmY,eACA,KAGJnN,EAAAA,EAAAA,IAAiB,mBAAmBgI,MAAOhU,EAAQmD,EAASqO,KAC1D,MAAM,UAAErK,EAAS,OAAE/F,GAAWoQ,EAExBpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAEhC,IAAKgC,EAAM,OAEXpD,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ+F,EAAW,CACpD8L,gBAAiB,MAGnBhI,EAAAA,EAAAA,IAAUjL,GAEV,MAAM4V,QAAehB,EAAAA,EAAAA,IAAQ,kBAAmB,CAAExR,OAAM+D,cAExDnH,GAASqL,EAAAA,EAAAA,MACTrL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ+F,EAAW,CACpD8L,gBAAiB2C,EACjByM,sBAAuBzM,KAGzB3K,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,oBAAoBgI,MAAOhU,EAAQmD,EAASqO,KAC3D,MAAM,IAAExH,EAAG,YAAEsY,GAAgB9Q,EACvB+Q,EAAoBD,EAActY,GACpC+B,EAAAA,EAAAA,IAAO/B,EAAIlI,QAAQ0gB,IAAgBxiB,EAAOyiB,aAAavZ,KAAKsZ,MAC1DE,QAAoB9N,EAAAA,EAAAA,IAAQ,mBAAoB,CACpD4N,WAAYD,IAETG,IAEL1iB,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHyiB,aAAc,IACTziB,EAAOyiB,aACVvZ,KAAM,IACDlJ,EAAOyiB,aAAavZ,SACpB4F,EAAAA,EAAAA,IAAqB4T,EAAa,UAI3CzX,EAAAA,EAAAA,IAAUjL,GAAO,KAgPnBgM,EAAAA,EAAAA,IAAiB,sBAAsBgI,MAAOhU,EAAQmD,EAASqO,KAC7D,MAAM,OAAEpQ,EAAM,SAAE0G,GAAa0J,EACvBpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,IAAQuI,EAAAA,EAAAA,KAAiBvK,EAAQ0G,EAAU9H,EAAOiC,eACrD,OAGF,MAAM2T,QAAehB,EAAAA,EAAAA,IAAQ,sBAAuB,CAAExR,OAAM0E,aAC5D,IAAK8N,EACH,OAGF,MAAM,SAAE1F,GAAa0F,EAEf1M,GAAO4F,EAAAA,EAAAA,IAAqBoB,EAAU,MACtClG,EAAMhC,OAAOuG,KAAKrF,GAAMuF,IAAI3D,QAAQpG,MAAK,CAACC,EAAGC,IAAMA,EAAID,IAE7D3E,GAASqL,EAAAA,EAAAA,MACTrL,GAASmW,EAAAA,EAAAA,KAAoBnW,EAAQoD,EAAKd,GAAI4G,GAC9ClJ,GAAS2iB,EAAAA,EAAAA,KAAqB3iB,EAAQoD,EAAKd,GAAIwF,EAAUkC,IACzDiB,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,cAAcgI,MAAOhU,EAAQmD,EAASqO,KACrD,MAAM,OAAEpQ,EAAM,UAAE+F,GAAcqK,EACxBpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMwS,QAAehB,EAAAA,EAAAA,IAAQ,cAAe,CAAExR,OAAM+D,cAC/CyO,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ+F,EAAW,CACpDyb,YAAahN,KAEf3K,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,OAAEpQ,EAAM,SAAEyhB,GAAarR,EACvBpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1B0hB,GAAarb,EAAAA,EAAAA,KAAWzH,EAAQ6iB,KAAavO,EAAAA,EAAAA,KAAWtU,EAAQ6iB,GACtE,GAAKzf,GAAS0f,EAMd,OAFKlO,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEgF,OAAQkJ,EAAY1f,UAEjD2f,EAAAA,EAAAA,KAAmB/iB,EAAQoB,EAAQ,CAAEyhB,YAAW,KAGzD7W,EAAAA,EAAAA,IAAiB,cAAcgI,MAAOhU,EAAQmD,EAASqO,KACrD,MAAM,OAAEpQ,GAAWoQ,EACbpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMwS,QAAehB,EAAAA,EAAAA,IAAQ,cAAe,CAAExR,SAC9C,IAAKwS,EAOH,OANA5V,GAASqL,EAAAA,EAAAA,MACTrL,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClC4hB,cAAe,UAEjB/X,EAAAA,EAAAA,IAAUjL,GAKZA,GAASqL,EAAAA,EAAAA,MACTrL,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAE4hB,cAAepN,EAAOgE,UAC5D3O,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,yBAAyBgI,MAAOhU,EAAQmD,EAASqO,KAChE,MAAM,OAAExP,GAAWwP,EACb+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EACH,OAGF,IAAI0E,EAAAA,EAAAA,IAAc1E,KAAS2E,EAAAA,EAAAA,KAA0BljB,EAAQue,EAAKjc,IAChE,OAGF,MAAMsT,QAAehB,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE2J,SACpD3I,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAASmjB,EAAAA,EAAAA,KAAuBnjB,EAAQgC,EAAQ4T,EAAO1F,SAAS,KAChEjF,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,OAAExP,GAAWwP,EACb+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAC1BhB,GAAUoiB,EAAAA,EAAAA,KAAuBpjB,EAAQgC,GAC1Cuc,GAASvd,IAIT4T,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE2J,OAAMzQ,OAAQ9M,EAAQqiB,UAAW,KAG1ErX,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,OAAExP,EAAM,QAAEshB,EAAO,aAAEC,GAAiB/R,EACpC+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAC1BhB,GAAUoiB,EAAAA,EAAAA,KAAuBpjB,EAAQgC,GAC1Cuc,GAASvd,IAIT4T,EAAAA,EAAAA,IAAQ,wBAAyB,CACpC2J,OAAMzQ,OAAQ9M,EAAQqiB,SAAUC,UAASC,gBACzC,KAGJvX,EAAAA,EAAAA,IAAiB,0BAA0BgI,MAAOhU,EAAQmD,EAASqO,KACjE,MAAM,OACJxP,EAAM,SAAEqhB,EAAQ,OAAEhF,EAAS,GAAE,MAAEna,GAAQC,EAAAA,EAAAA,OACrCqN,EACE+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EACH,OAGF,MAAM3I,QAAehB,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE2J,OAAM8E,WAAUhF,WAEzE,GAAKzI,EAAL,CAEA,GAAoB,oBAAhBA,EAAOxT,KAGT,OAFAe,EAAQqgB,iBAAiB,CAAEC,eAAgB,SAAUvf,eACrDf,EAAQugB,mBAAmB,CAAExf,UAI/B,GAAoB,aAAhB0R,EAAOxT,MAAuC,WAAhBwT,EAAOxT,KAUvC,OATAe,EAAQiM,iBAAiB,CACvBpO,SAASqb,EAAAA,EAAAA,IAA6B,aAAhBzG,EAAOxT,KAAsB,aAAe,YAClE8B,UAEFf,EAAQugB,mBAAmB,CAAExf,UAE7BlE,GAASqL,EAAAA,EAAAA,MACTrL,GAAS2jB,EAAAA,EAAAA,KAAuB3jB,EAAQgC,QACxCiJ,EAAAA,EAAAA,IAAUjL,GAIZ,GAAoB,iBAAhB4V,EAAOxT,KAAyB,CAClCpC,GAASqL,EAAAA,EAAAA,MACT,MAAMqT,GAAcxe,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO0f,eAAehF,SAC3DC,EAAiBH,IAAcA,EAAY7c,OAAS,IAAIyQ,QAAQ9O,MAAMsb,GAAMA,EAAET,SAAWA,IACzFU,EAAa,CACjBzP,MAAOsG,EAAOtG,MACdgD,QAASsD,EAAOtD,QAChB0M,SAAUH,GAAgBxQ,MAE5BrO,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B4jB,cAAe,CACbxiB,OAAQY,EACRqhB,WACAzE,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzD7a,IACH+G,EAAAA,EAAAA,IAAUjL,EACZ,CAtCmB,CAsCnB,KAGFgM,EAAAA,EAAAA,IAAiB,yBAAyBgI,MAAOhU,EAAQmD,EAASqO,KAChE,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GACrByP,EAAAA,EAAAA,KAA2BjhB,SAMnC4U,EAAAA,EAAAA,IAAQ,0BAA2B,CAAEiP,SAAS,MAEnE7jB,GAASqL,EAAAA,EAAAA,MACTrL,GAAS8jB,EAAAA,EAAAA,KAAmB9jB,EAAQA,EAAOiC,cAAgB,CACzD8hB,eAAe,KAEjB9Y,EAAAA,EAAAA,IAAUjL,GACVmD,EAAQiM,iBAAiB,CACvBpO,SAASqb,EAAAA,EAAAA,IAAa,YACtBnY,WAbAf,EAAQqgB,iBAAiB,CAAEC,eAAgB,SAAUvf,SAcrD,KAGJ8H,EAAAA,EAAAA,IAAiB,uBAAuBgI,MAAOhU,EAAQmD,EAASqO,KAC9D,MAAM,OAAEpQ,EAAM,SAAEyT,GAAarD,QACvByG,GAAoBjY,EAAQoB,EAAQyT,EAAS,KAuBrD7I,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,WAAE7C,EAAU,MAAEzK,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE5CpO,GAAOyc,EAAAA,EAAAA,KAAkB7f,EAAQkE,GAClCd,IAELpD,GAASgkB,EAAAA,EAAAA,KAAqBhkB,EAAQoD,EAAKd,GAAIc,EAAMuL,GAAY,IACjE1D,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQ8gB,iBAAiB,CAAEtV,aAAYzK,UAAQ,KAGjD8H,EAAAA,EAAAA,IAAiB,oBAAoBgI,MAAOhU,EAAQmD,EAASqO,KAC3D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,IAAIpO,GAAOyc,EAAAA,EAAAA,KAAkB7f,EAAQkE,GAErC,GAAKd,EAAL,CAEA,IAAKA,EAAK8gB,eAAgB,OAClBjM,GAAoBjY,EAAQoD,EAAKd,IACvCtC,GAASqL,EAAAA,EAAAA,MACT,MAAM8Y,EAAiB/gB,EAAKd,GAE5B,GADAc,GAAOyc,EAAAA,EAAAA,KAAkB7f,EAAQkE,IAC5Bd,GAAM8gB,gBAAkBC,IAAmB/gB,EAAKd,GAAI,MAC3D,CAEAa,EAAQ2J,aAAa,CAAE1L,OAAQgC,EAAKd,GAAI6E,UAAW/D,EAAK8gB,eAAe,GAAIhgB,SAV1D,CAUkE,KAGrF8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAE5CpO,GAAOyc,EAAAA,EAAAA,KAAkB7f,EAAQkE,GACvC,GAAKd,EAIL,OAFAwR,EAAAA,EAAAA,IAAQ,kBAAmB,CAAExR,UAEtBN,EAAAA,EAAAA,KAAW9C,EAAQoD,EAAKd,GAAI,CACjC8hB,yBAAqB5a,EACrB0a,oBAAgB1a,GAChB,KAGJwC,EAAAA,EAAAA,IAAiB,WAAW,CAAChM,EAAQmD,EAASqO,KAC5C,MAAM,IACJ6S,EAAG,gBAAEC,EAAe,gBAAEC,EAAe,MAAErgB,GAAQC,EAAAA,EAAAA,OAC7CqN,EACEgT,GAAkBC,EAAAA,EAAAA,GAAeJ,GAEvC,IAAKE,IAAmBG,EAAAA,EAAAA,IAAWF,GAKjC,OAJArhB,EAAQwhB,iBAAiB,CAAEzgB,UAC3Bf,EAAQyhB,kBAAkB,CAAE1gB,eAE5Bf,EAAQ0hB,iBAAiB,CAAER,MAAKngB,UAIlC,MAAM,UAAE4gB,EAAS,OAAEjD,GAAW7hB,EAC9B,GAAI8kB,EAAW,CACb,MAAMC,EAAY,IAAIC,IAAIR,GAE1B,GAAI3C,GAAQoD,gBAAkBH,EAAUI,iBAAiB5gB,SAASygB,EAAUI,UAG1E,OAFAJ,EAAUK,aAAaxN,IArqDD,kBAqqD0BiK,EAAOoD,qBACvDI,OAAOC,KAAKP,EAAUQ,KAAM,SAAU,YAIxC,GAAIT,EAAUU,eAAelhB,SAASygB,EAAUI,UAI9C,OAHAhiB,EAAQwhB,iBAAiB,CAAEzgB,eAE3Bf,EAAQsiB,mBAAmB,CAAEpB,MAAKngB,SAGtC,CAE4BsgB,EAAgBnR,MAAMqS,EAAAA,MAAsBpB,EAKtEe,OAAOC,KAAKd,EAAiB,SAAU,YAFvCrhB,EAAQwiB,oBAAoB,CAAEtB,IAAKG,EAAiBtgB,SAGtD,KAoCF8H,EAAAA,EAAAA,IAAiB,mCAAmC,CAAChM,EAAQmD,EAASqO,KACpE,MAAQpQ,OAAQuf,EAAQ,QAAE3V,EAAO,MAAE9G,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEjExR,GAASqL,EAAAA,EAAAA,MAET,MACMua,GADW1lB,EAAAA,EAAAA,KAAeF,EAAQkE,GACV2hB,gBAE9B7lB,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BiiB,0BAA0B,EAC1B4D,gBAAiB,CAAC,GACjB3hB,IACH+G,EAAAA,EAAAA,IAAUjL,GACVA,GAASqL,EAAAA,EAAAA,MAET,MAAMya,GAAcjG,EAAAA,EAAAA,KAAkB7f,EAAQkE,GACxC2L,GAAkBhD,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAQ4D,SAEjE,IAAKge,IAAgBjW,EAAiB,OAEtC,MAAM/H,EAAWkD,GAAWnD,EAAAA,GACtB2F,EAAgBsY,EAAYxjB,GAE5ByjB,EAAe,CACnB3jB,KAAM,UACN2E,aAAc6e,EAAaze,UAC3B6e,aAAcJ,EAAa7E,WAC3BkF,cAAezY,EACf0Y,UAAWN,EAAaM,WAGpBpJ,EAAmB8I,EAAaze,UAClC4e,GAAe1M,EAAAA,EAAAA,KAAYrZ,EAAQwN,EAAeqC,IAAkBlJ,UACxE,IAAKmW,EAAkB,OAEvB,KAAKqJ,EAAAA,EAAAA,KAA2BnmB,EAAQ2gB,EAAUnT,EAAesP,GAE/D,YADA3Z,EAAQiM,iBAAiB,CAAEpO,SAASqb,EAAAA,EAAAA,IAAa,2BAA4BnY,UAI/E,IAAK4Y,EAAiBmJ,eAAiBtF,IAAamF,EAAYxjB,GAAI,OAEpE,MAIM2jB,EAHCnJ,GAAkBmJ,cAChBnJ,EAAiBmJ,gBAAkBtF,OAAWnX,EAAYsT,EAAiBmJ,cADrCzY,GA9DjD,SACExN,EACA8H,EACAnB,EACAga,GAEA,MAAMhE,GAAetD,EAAAA,EAAAA,KAAYrZ,EAAQ2gB,EAAU7Y,GAE9CnB,EAAUI,cAOfkN,EAAU,CACRjU,SAAQoB,OAAQuf,EAAU7Y,WAAUoM,MANX,IACtByI,EACHhW,aAIqDwN,aAAa,EAAMC,mBAAmB,GAE/F,CAsDEgS,CAAoBpmB,EAAQ8H,EANe,IACtCgV,EACHmJ,gBACA7jB,KAAM,WAGwCue,GAChDxd,EAAQkjB,WAAW,CAAEjlB,OAAQuf,EAAU7Y,WAAU5D,UACjDf,EAAQmjB,iBAAiB,CAAEpiB,UAC3Bf,EAAQojB,sBAAsB,CAAEriB,UAChCf,EAAQqjB,WAAW,CAAEplB,OAAQoM,EAAe1F,SAAU+H,GAAkB,KAG1E7D,EAAAA,EAAAA,IAAiB,yBAAyBgI,MAAOhU,EAAQmD,EAASqO,KAChE,MAAM,OAAEpQ,EAAM,QAAE4J,EAAO,MAAE9G,GAAQC,EAAAA,EAAAA,OAAsBqN,EACjD6C,GAAOC,EAAAA,EAAAA,KAAWtU,EAAQoB,IACaqlB,EAAAA,EAAAA,IAAmCzmB,EAAQkE,IAC5CmQ,UAjG9CL,eACEhU,EACAqU,EACAjT,GAEA,IAAIslB,GAAWC,EAAAA,EAAAA,KAAmB3mB,EAAQoB,GAC1C,IAAKslB,EAAU,CACb,MAAM,WAAEE,GAAevS,EACjBuB,QAAehB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEtS,GAAIlB,EAAQwlB,eAC5DF,EAAW9Q,GAAQ8Q,QACrB,CACA,OAAOnO,SAASmO,GAAUG,gBAC5B,CAqF6DC,CAA4B9mB,EAAQqU,EAAMjT,GACnG+B,EAAQ4jB,WAAW,CACjBC,KAAM,CACJhmB,SAASqb,EAAAA,EAAAA,IAAa,oCAAoCD,EAAAA,EAAAA,KAAgB/H,KAE5EnQ,WAIJlE,GAASqL,EAAAA,EAAAA,OAEJ4b,EAAAA,EAAAA,IAA8BjnB,EAAQoB,EAAQ8C,IAKnDlE,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BuZ,gBAAiB,KACZrZ,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOqV,gBACjCoH,SAAUvf,EACV2f,WAAY/V,GAEdiX,0BAA0B,GACzB/d,IACH+G,EAAAA,EAAAA,IAAUjL,GACVmD,EAAQkjB,WAAW,CAAEjlB,SAAQ0G,SAAUkD,GAAWnD,EAAAA,GAAgB3D,UAClEf,EAAQmjB,iBAAiB,CAAEpiB,UAC3Bf,EAAQojB,sBAAsB,CAAEriB,WAf9Bf,EAAQmQ,oCAAoC,CAAElS,SAAQ8C,UAehB,KAG1C8H,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClDxR,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BuZ,gBAAiB,KACZrZ,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOqV,gBACjCoH,SAAU3gB,EAAOiC,gBAElBiC,IACH+G,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQojB,sBAAsB,CAAEriB,UAChCf,EAAQoW,gBAAgB,CAAE2D,UAAU,EAAMhZ,SAAQ,KAGpD8H,EAAAA,EAAAA,IAAiB,gBAAgB,CAAChM,EAAQmD,EAASqO,KACjD,MAAM,SAAEmP,EAAQ,MAAEzc,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GAEtD,WAAEkP,EAAU,QAAEhU,IAAYxM,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOqV,gBACxD4H,EAAWT,GAAajZ,EAAAA,EAAAA,KAAWzH,EAAQ0gB,QAAclX,EACzD4X,EAAST,GAAWlZ,EAAAA,EAAAA,KAAWzH,EAAQ2gB,QAAYnX,EACnD0d,EAAQxG,GAAchU,GACxBya,EAAAA,EAAAA,KAAgBnnB,EAAQ0gB,EAAYhU,QACpClD,EAEJ,IAAK2X,IAAaC,IAAW8F,GAAS,cAAeA,EACnD,OAGF,MAAM7f,GAAgB+B,EAAAA,EAAAA,KAAwBpJ,EAAQ2gB,IAEhD,KAAEtS,EAAI,SAAE8L,GAAc+M,EAAmB1hB,QAAQ6I,MAAQ,CAAC,EAC3DiJ,GAAYtX,EAAQ,CACvBoD,KAAMge,EACN/S,OACA8L,WACA+M,QACA7f,kBAGFrH,GAASqL,EAAAA,EAAAA,MACTrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BuZ,gBAAiB,CAAC,EAClB0I,0BAA0B,GACzB/d,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,6BAA6B,CAAChM,EAAQmD,EAASqO,KAC9D,MAAM,OACJpQ,EAAM,GAAEkB,EAAE,eAAEkR,GAAiB4T,EAAAA,EAAAA,KAA0BpnB,GAAO,MAAEkE,GAAQC,EAAAA,EAAAA,OACtEqN,EAOJ,OALAxR,GAASqnB,EAAAA,EAAAA,KAAkCrnB,EAAQoB,EAAQkB,EAAIkR,EAAgBtP,IACtEojB,EAAAA,EAAAA,KAAgBtnB,EAAQ,CAC/BunB,oBAAqB/T,GAGV,KAGfxH,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,OACJpQ,EAAM,GAAEkB,EAAE,MAAE4B,GAAQC,EAAAA,EAAAA,OAClBqN,EAIJ,OAFSgW,EAAAA,EAAAA,KAAkCxnB,EAAQoB,EAAQkB,EAAI4B,EAElD,KAGf8H,EAAAA,EAAAA,IAAiB,kCAAkC,CAAChM,EAAQmD,EAASqO,KACnE,MAAM,OACJpQ,EAAM,WAAEuN,EAAU,eAAE6E,GAAiBiU,EAAAA,EAAAA,KAAmBznB,IACtDwR,EAQJ,OANA7C,EAAWzM,SAASI,IAClBtC,GAAS0nB,EAAAA,EAAAA,KAAyB1nB,EAAQoB,EAAQkB,EAAIkR,EAAgB,CACpEN,WAAW,GACX,IAGGlT,CAAM,KAGfgM,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,OACJpQ,EAAM,WAAEuN,EAAU,eAAE6E,GAAiBiU,EAAAA,EAAAA,KAAmBznB,IACtDwR,EAEEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,GAAKgC,EAUL,OARAD,EAAQwkB,+BAA+B,CAAEvmB,SAAQuN,aAAY6E,oBAE7DoB,EAAAA,EAAAA,IAAQ,gBAAiB,CACvBxR,OACAuL,aACA6E,mBAGKxT,CAAM,IAKf,IAAI4nB,GACAC,GAAmD,CAAC,EAExD,SAASC,KACHF,KACFG,aAAaH,IACbA,QAAwBpe,GAI1B,MAAM,iBAAEwe,IAAqBC,EAAAA,EAAAA,MAC7BjgB,OAAOsI,QAAQuX,IAAqB3lB,SAAQ,EAAEd,EAAQ4I,MACpDge,EAAiB,CAAE5mB,SAAQ4I,IAAKke,MAAMjR,KAAKjN,GAAMme,iBAAiB,GAAO,IAG3EN,GAAsB,CAAC,CACzB,CA8MA,SAASpN,GAAkB/C,GACzB,MAAM,iBACJ2D,EAAgB,SAAE+M,GAChB1Q,EACJ,OAAI2Q,EAAAA,IAA8Bzd,IAAIwd,GAAkB,QACpD/M,EAAyB,OACzB+M,IAAaE,EAAAA,IAAsB,MACnCC,EAAAA,IAA8B3d,IAAIwd,IAAaI,EAAAA,IAA8B5d,IAAIwd,GAAkB,QACnG1Q,EAAW+Q,MAAc,QACtB,MACT,EAvNAzc,EAAAA,EAAAA,IAAiB,6BAA6B,CAAChM,EAAQmD,EAASqO,KAC9D,MAAM,IAAExH,EAAG,OAAE5I,GAAWoQ,EAEnBoW,IACHxc,WAAW0c,GAtBY,KAyBpBD,GAAoBzmB,KACvBymB,GAAoBzmB,GAAU,IAAI8I,KAGpCF,EAAI9H,SAASI,IACXulB,GAAoBzmB,GAAQ+I,IAAI7H,EAAG,GACnC,KAGJ0J,EAAAA,EAAAA,IAAiB,oBAAoBgI,MAAOhU,EAAQmD,EAASqO,KAC3D,MAAM,OAAEpQ,EAAM,IAAE4I,EAAG,gBAAEme,GAAoB3W,EAEnCpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMwS,QAAehB,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDxR,OACA4G,MACAme,oBAGGvS,IAEL5V,GAASqL,EAAAA,EAAAA,MACTuK,EAAO8S,UAAUxmB,SAASW,IACxB7C,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQyB,EAAOP,GAAI,CACpDqmB,WAAY9lB,EAAO+lB,MACnBC,cAAehmB,EAAOimB,WACrB,GAECjmB,EAAOgE,aACT7G,GAAS6I,EAAAA,EAAAA,KAAiB7I,EAAQoB,EAAQyB,EAAOP,GAAIO,EAAOgE,YAC9D,KAGFoE,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,kBAAkBgI,MAAOhU,EAAQmD,EAASqO,KACzD,MAAM,OAAEpQ,EAAM,IAAE4I,GAAQwH,EAElBpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMwS,QAAehB,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9CxR,OACA4G,QAGG4L,IAEL5V,GAASqL,EAAAA,EAAAA,MACTuK,EAAO1T,SAAQ,CAAC6mB,EAAW7jB,KACzBlF,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ4I,EAAI9E,GAAI,CACjD6jB,aACA,KAGJ9d,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,2BAA2B,MAC1C4I,EAAAA,EAAAA,IAAQ,2BACQ,KAGlB5I,EAAAA,EAAAA,IAAiB,sBAAsBgI,MAAOhU,EAAQmD,EAASqO,KAC7D,MAAM,OAAEpQ,EAAM,UAAE+F,GAAcqK,EAExBpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,GAAKgC,EAEL,IACE,MAAMwS,QAAehB,EAAAA,EAAAA,IAAQ,sBAAuB,CAAExR,OAAM+D,cACxDyO,GAAQlB,OACV1U,GAASqL,EAAAA,EAAAA,MACTrL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ+F,EAAW,CAAE6hB,SAAUpT,EAAOlB,QACzEzJ,EAAAA,EAAAA,IAAUjL,GAEd,CAAE,MAAOoT,GACP,MAAM,QAAEpS,GAAYoS,EAEpB,GAAgB,4BAAZpS,GAAqD,4BAAZA,EAAuC,CAIlF,GAHAhB,GAASqL,EAAAA,EAAAA,QAEIiJ,EAAAA,EAAAA,KAAWtU,EAAQoB,GACrB,OACX,MAAM6nB,GAAaC,EAAAA,EAAAA,KAAiBlpB,EAAQoB,GAC5C,IAAK6nB,EAAY,OAEjB,MAAME,EAA2B,4BAAZnoB,EACjB,CAAEooB,sBAAsB,GACxB,CAAEC,0BAA0B,GAEhCrpB,GAASspB,EAAAA,EAAAA,KAAoBtpB,EAAQ,CACnC,CAACoB,GAAS,IAAK6nB,KAAeE,KAGhCnpB,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ+F,EAAW,CAAE6hB,cAAUxf,KAClEyB,EAAAA,EAAAA,IAAUjL,EACZ,CACF,MAGFgM,EAAAA,EAAAA,IAAiB,oBAAoBgI,UACnC,MAAM4B,QAAehB,EAAAA,EAAAA,IAAQ,qBACxBgB,IAEL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAASupB,EAAAA,EAAAA,KAAyBvpB,GAAQ8O,EAAAA,EAAAA,IAAqB8G,EAAO1F,SAAU,OAChFlQ,GAAS+O,EAAAA,EAAAA,KAAmB/O,EAAQ4V,EAAO/G,eAE3C5D,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,kBAAkB,CAAChM,EAAQmD,EAASqO,KACnD,MAAM,OAAEpQ,EAAM,aAAE6N,GAAiBuC,EAC3BpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,OAAKgC,IACLwR,EAAAA,EAAAA,IAAQ,iBAAkB,CACxBxR,OACAomB,WAAYva,IAGPjP,GANWA,CAML,KAGfgM,EAAAA,EAAAA,IAAiB,mBAAmBgI,MAAOhU,EAAQmD,EAASqO,KAC1D,MAAM,OACJpQ,EAAM,UAAE+F,EAAS,oBAAEsiB,EAAmB,qBAAEC,EAAoB,MAAExlB,GAAQC,EAAAA,EAAAA,OACpEqN,EACEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EAKH,YAJAD,EAAQiM,iBAAiB,CACvBpO,SAASqb,EAAAA,EAAAA,IAAa,iBACtBnY,UAIJ,MAAMylB,EAAgCA,IAAMxmB,EAAQiM,iBAAiB,CACnEpO,SAASqb,EAAAA,EAAAA,IAAa,iBACtBnY,UAGF,KAAKmZ,EAAAA,EAAAA,KAAcja,MAAUwmB,EAAAA,EAAAA,KAAiBxmB,GAE5C,YADAumB,IAGF,MAIME,GAAkCjV,EAAAA,EAAAA,IAAQ,oBAAqB,CACnExR,OAAMd,GAAI6E,EAAWsiB,sBAAqBC,+BAEtCI,EAAAA,EAAAA,IACJD,GARiCE,IAAM5mB,EAAQiM,iBAAiB,CAChEpO,SAASqb,EAAAA,EAAAA,IAAa,cACtBnY,WAM6DylB,EAC9D,I,0BCzsEH,MAGMK,IAAkBC,EAAAA,EAAAA,KAAUlW,GAAOA,KAAM,KAAK,GAigBpDC,eAAekW,GAA0ClqB,EAAWmqB,GAClE,MAAMC,QAAuBxV,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEuV,SACzDC,IAILpqB,GAASqL,EAAAA,EAAAA,MAETrL,EAAS,IACJA,EACHqqB,SAAU,IACLrqB,EAAOqqB,SACVC,OAAQF,KAGZnf,EAAAA,EAAAA,IAAUjL,GACZ,CAEAgU,eAAeuW,GACbvqB,EACAmD,EACAqnB,GAEA,IAAIC,EACJ,IACEA,QAAmB7V,EAAAA,EAAAA,IACjB,gBACA,CAAE4V,kBAEN,CAAE,MAAOpX,GACP,GAAoC,uBAA/BA,EAAmBpS,QAetB,YAdAgH,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAI4B,MAC3Cf,EAAQiM,iBAAiB,CACvBpO,SAASqb,EAAAA,EAAAA,IAAa,6BACtBnY,UAGE,cAAesmB,IACdtqB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOwmB,4BAA8BF,EAAeG,YAC9E3qB,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B0qB,+BAA2BlhB,GAC1BtF,IACH+G,EAAAA,EAAAA,IAAUjL,GACZ,GAIN,CAGA,GAFAA,GAASqL,EAAAA,EAAAA,OAEJof,EAEH,OAGF,MAAM,IAAE7S,EAAG,SAAEyS,EAAQ,MAAEO,GAAUH,EAI3BI,GAFN7qB,GAAS8qB,EAAAA,EAAAA,KAAiB9qB,EAAQ4X,EAAItV,GAAI,IAAKsV,EAAKyS,WAAUO,WAElCP,SAASU,SAASrd,MAC1Cmd,GAAgBD,EAAMC,KACxB7qB,GAASgrB,EAAAA,EAAAA,KAAwBhrB,KAGnCiL,EAAAA,EAAAA,IAAUjL,EACZ,CAmLAgU,eAAeiX,GAAkCjrB,EAAWkrB,EAAeC,EAAsBjL,MAC3Fhc,GAAQC,EAAAA,EAAAA,QACZ,MAAMyR,QAAehB,EAAAA,EAAAA,IAAQ,aAAc,CAAEsW,QAAOhL,SAAQkL,SAAUD,IACjEvV,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAASqrB,EAAAA,EAAAA,KAAgBrrB,GAASkgB,EAAQtK,EAAO0V,KAAM1V,EAAO6K,WAAYvc,IAC1E+G,EAAAA,EAAAA,IAAUjL,GACZ,EA7vBAgM,EAAAA,EAAAA,IAAiB,mBAAmBgI,MAAOhU,EAAQmD,KACjD,MAAOooB,EAAeC,SAA2BxP,QAAQC,IAAI,EAC3DrH,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEuV,KAAMnqB,EAAOqqB,SAASoB,MAAMtB,QAC1DvV,EAAAA,EAAAA,IAAQ,uBAAwB,CAAEuV,KAAMnqB,EAAOyiB,aAAagJ,MAAMtB,SAE/DqB,GAAsBD,IAI3BvrB,GAASqL,EAAAA,EAAAA,MAETrL,GAAS0rB,EAAAA,EAAAA,KACP1rB,EACA,QACAurB,EAAcpB,KACdoB,EAAcI,MAGhB3rB,GAAS4rB,EAAAA,EAAAA,KACP5rB,EACAwrB,EAAkBrB,KAClBqB,EAAkBG,OAGpB1gB,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQ0oB,iBAAiB,CACvB7hB,IAAKhK,EAAO8rB,qBACZ,KAGJ9f,EAAAA,EAAAA,IAAiB,qBAAqBgI,MAAOhU,EAAQmD,KACnD,MACEsoB,OACEM,OAAQC,EAAc,IAExBC,SAAUC,GACRlsB,EAAOqqB,UAEToB,OACEM,OAAQI,EAAoB,KAE5BnsB,EAAOyiB,aACL2J,EAAe,IAAIJ,KAAgBG,GACzC,GAAKC,EAAavqB,OAIlB,IAAK,IAAIqD,EAAI,EAAGA,EAAIknB,EAAavqB,OAAQqD,IAAK,CAC5C,MAAM5C,EAAK8pB,EAAalnB,GACpBgnB,EAAO5pB,IAAK+nB,WAGhBlnB,EAAQonB,aAAa,CACnBC,eAAgB,CAAEloB,KAAIskB,WAAYsF,EAAO5pB,GAAIskB,cAG3C1hB,EA7D0B,IA6DQ,GAAKA,EAAI,SACvCmnB,EAAAA,EAAAA,IA/DgB,KAiE1B,MAGFrgB,EAAAA,EAAAA,IAAiB,sBAAuBhM,IACtC,MAAM,KAAEmqB,GAASnqB,EAAOqqB,SAASC,QAAU,CAAC,EACvCJ,GAAmBlqB,EAAQmqB,EAAK,KAGvCne,EAAAA,EAAAA,IAAiB,wBAAwBgI,UACvC,MAAM,KAAEmW,GAASnqB,EAAOqqB,SAASiC,UAAY,CAAC,EAExCC,QAAyB3X,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEuV,SAC7DoC,IAILvsB,GAASqL,EAAAA,EAAAA,MAETrL,EAAS,IACJA,EACHqqB,SAAU,IACLrqB,EAAOqqB,SACViC,SAAUC,KAGdthB,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,uBAAuBgI,UACtC,MAAM,KAAEmW,GAASnqB,EAAOqqB,SAASmC,SAAW,CAAC,EAEvC5W,QAAehB,EAAAA,EAAAA,IAAQ,wBAAyB,CAAElH,MAAO,OAAQyc,SAClEvU,IAIL5V,GAASqL,EAAAA,EAAAA,MAETrL,EAAS,IACJA,EACHqqB,SAAU,IACLrqB,EAAOqqB,SACVmC,QAAS,CACPrC,KAAMvU,EAAOuU,KACbE,SAAUzU,EAAOyU,aAIvBpf,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,wBAAwBgI,UACvC,MAAM,KAAEmW,GAASnqB,EAAOqqB,SAASoC,UAAY,CAAC,EAExCA,QAAiB7X,EAAAA,EAAAA,IAAQ,wBAAyB,CAAElH,MAAO,OAAQyc,SACpEsC,IAILzsB,GAASqL,EAAAA,EAAAA,MAETrL,EAAS,IACJA,EACHqqB,SAAU,IACLrqB,EAAOqqB,SACVoC,SAAU,CACRtC,KAAMsC,EAAStC,KACfE,SAAUoC,EAASpC,SAASvoB,QAAQ8D,GAA8B,OAAlBA,EAAQ8H,YAI9DzC,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,wBAAwBgI,UACvC,MAAM,KAAEmW,GAASnqB,EAAOqqB,SAASqC,UAAY,CAAC,EACxCC,QAAyB/X,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEuV,SAC7DwC,IAIL3sB,GAASqL,EAAAA,EAAAA,MAETrL,GAAS0rB,EAAAA,EAAAA,KACP1rB,EACA,WACA2sB,EAAiBxC,KACjBwC,EAAiBhB,OAEnB1gB,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,oBAAoBgI,UACnC,MAAMyW,QAAmB7V,EAAAA,EAAAA,IAAQ,qBACjC,IAAK6V,EACH,OAGF,MAAM,IAAE7S,EAAG,SAAEyS,GAAaI,EAE1BzqB,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACH4sB,aAAc,IAAKhV,EAAKyS,cAE1Bpf,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,yBAAyBgI,UACxC,MAAMyW,QAAmB7V,EAAAA,EAAAA,IAAQ,0BACjC,IAAK6V,EACH,OAEFzqB,GAASqL,EAAAA,EAAAA,MAET,MAAM,IAAEuM,EAAG,SAAEyS,GAAaI,EAEpBoC,EAAU,IAAKjV,EAAKyS,YAE1BrqB,GAAS8qB,EAAAA,EAAAA,KAAiB9qB,EAAQ6sB,EAAQvqB,GAAIuqB,GAC9C7sB,EAAS,IACJA,EACH8sB,oBAAqBD,EAAQvqB,KAE/B2I,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,0BAA0BgI,UACzC,MAAMyW,QAAmB7V,EAAAA,EAAAA,IAAQ,4BACjC,IAAK6V,EACH,OAEFzqB,GAASqL,EAAAA,EAAAA,MAET,MAAM,IAAEuM,EAAG,SAAEyS,GAAaI,EACpBoC,EAAU,IAAKjV,EAAKyS,YAE1BrqB,GAAS8qB,EAAAA,EAAAA,KAAiB9qB,EAAQ6sB,EAAQvqB,GAAIuqB,GAC9C7sB,EAAS,IAAKA,EAAQ+sB,qBAAsBF,EAAQvqB,KACpD2I,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,gBAAgB,CAAChM,EAAQmD,EAASqO,KACjD,MAAM,eAAEgZ,GAAmBhZ,EACrBwb,GAAYC,EAAAA,EAAAA,KAAiBjtB,EAAQwqB,GACvCwC,GAAaA,EAAUlX,QAAUkX,GAAW3C,UAAUxoB,QACrD0oB,GAAavqB,EAAQmD,EAASqnB,EAAe,KAGpDxe,EAAAA,EAAAA,IAAiB,sBAAsBgI,UACrC,MAAOkZ,EAAQC,SAAiBnR,QAAQC,IAAI,EAC1CrH,EAAAA,EAAAA,IAAQ,wBACRA,EAAAA,EAAAA,IAAQ,+BAELsY,GAAWC,IAIhBntB,GAASqL,EAAAA,EAAAA,MAETrL,GAASotB,EAAAA,EAAAA,KAAsBptB,EAAQ,IAAKktB,EAAOtV,IAAKyS,SAAU6C,EAAO7C,WACzErqB,EAAS,IACJA,EACHqtB,qBAAsB,IAAKF,EAAQvV,IAAKyS,SAAU8C,EAAQ9C,YAG5Dpf,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,+BAA+BgI,UAC9C,MAAMkZ,QAAetY,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C4V,eAAgB,CACdG,UAAW2C,EAAAA,OAGVJ,IAILltB,GAASqL,EAAAA,EAAAA,MAETrL,EAAS,IACJA,EACHutB,gBAAiB,IAAKL,EAAOtV,IAAKyS,SAAU6C,EAAO7C,YAGrDpf,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,+BAA+BgI,UAC9C,MAAMkZ,QAAetY,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C4V,eAAgB,CACdG,UAAW6C,EAAAA,OAGVN,IAILltB,GAASqL,EAAAA,EAAAA,MAETrL,EAAS,IACJA,EACHytB,gBAAiB,IAAKP,EAAOtV,IAAKyS,SAAU6C,EAAO7C,YAGrDpf,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,2BAA2BgI,UAC1C,MAAMyW,QAAmB7V,EAAAA,EAAAA,IAAQ,4BACjC,IAAK6V,EACH,OAEFzqB,GAASqL,EAAAA,EAAAA,MAET,MAAM,IAAEuM,EAAG,SAAEyS,GAAaI,EAE1BzqB,EAAS,IACJA,EACH0tB,oBAAqB,IAAK9V,EAAKyS,cAEjCpf,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,iBAAiBgI,UAChC,MAAM,KAAEmW,GAASnqB,EAAOsrB,KAAKqC,MAEvBC,QAAkBhZ,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEuV,SAC/CyD,IAIL5tB,GAASqL,EAAAA,EAAAA,MAETrL,EAAS,IACJA,EACHsrB,KAAM,IACDtrB,EAAOsrB,KACVqC,MAAOC,KAGX3iB,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,WAAWgI,MAAOhU,EAAQmD,EAASqO,KAClD,MAAM,IACJqc,EAAG,aAAEC,EAAY,MACjB5pB,GAAQC,EAAAA,EAAAA,OACNqN,EACE3P,EAAS7B,EAAOsrB,KAAKqC,MAAMrC,MAAMzpB,OAEjCgU,GAAQkY,EAAAA,GAAAA,GAAmB/tB,EAAQ,aACnCguB,GAAeC,EAAAA,GAAAA,GAAmBjuB,EAAQ,aAC1CkuB,GAAYjN,EAAAA,EAAAA,KAA2BjhB,GAoB7C,IAlBK8tB,GAAgBjsB,GAAUA,GAAUgU,GACvC1S,EAAQiM,iBAAiB,CACvBE,MAAO6e,EAAAA,GAA0B,2BAA4BtY,EAAMuY,YACnEptB,QAASktB,EAAYC,EAAAA,GAA0B,2CAC3CA,EAAAA,GAA0B,mCAC1BH,EAAaI,gBACZF,GAAa,CAChB5jB,OAAQ,CACNA,OAAQ,mBACRkH,QAAS,CAAEtN,WAGfmqB,UAAW,YACXnqB,iBAIiB0Q,EAAAA,EAAAA,IAAQ,UAAW,CAAEiZ,MAAKC,iBAE7C,OAGF9tB,GAASqL,EAAAA,EAAAA,MACT,MAAMigB,EAAOtrB,EAAOsrB,KAAKqC,MAAMrC,MAAMxpB,QAAO,EAAGQ,QAASA,IAAOurB,EAAIvrB,MAAO,GACpEgsB,EAAUR,EAAexC,EAAO,CAACuC,KAAQvC,GAE/CtrB,EAAS,IACJA,EACHsrB,KAAM,IACDtrB,EAAOsrB,KACVqC,MAAO,IACF3tB,EAAOsrB,KAAKqC,MACfrC,KAAMgD,MAIZrjB,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,eAAe,CAAChM,EAAQmD,EAASqO,KAChD,MAAM,QAAE5L,EAAO,MAAE1B,GAAQC,EAAAA,EAAAA,OAAsBqN,EACzC+c,EAAUvuB,EAAOqqB,SAASiC,SAASjC,SAASxoB,OAC5CgU,GAAQkY,EAAAA,GAAAA,GAAmB/tB,EAAQ,iBACnCguB,GAAeC,EAAAA,GAAAA,GAAmBjuB,EAAQ,iBAC1CkuB,GAAYjN,EAAAA,EAAAA,KAA2BjhB,GAEzCuuB,GAAW1Y,GACb1S,EAAQiM,iBAAiB,CACvBE,MAAO6e,EAAAA,GAA0B,+BAAgCtY,EAAMuY,YACvEptB,QAASktB,EAAYC,EAAAA,GAA0B,+CAC3CA,EAAAA,GAA0B,uCAC1BH,EAAaI,gBACZF,GAAa,CAChB5jB,OAAQ,CACNA,OAAQ,mBACRkH,QAAS,CAAEtN,WAGfmqB,UAAW,YACXnqB,UAIA0B,IACGgP,EAAAA,EAAAA,IAAQ,cAAe,CAAEhP,WAChC,KAGFoG,EAAAA,EAAAA,IAAiB,iBAAiB,CAAChM,EAAQmD,EAASqO,KAClD,MAAM,QAAE5L,GAAY4L,EAEhB5L,IACF5F,GAASqL,EAAAA,EAAAA,MAITrL,EAAS,IACJA,EACHqqB,SAAU,IACLrqB,EAAOqqB,SACViC,SAAU,IACLtsB,EAAOqqB,SAASiC,SACnBjC,SAAUrqB,EAAOqqB,SAASiC,SAASjC,SAASvoB,QAAO,EAAGQ,QAASA,IAAOsD,EAAQtD,SAIpF2I,EAAAA,EAAAA,IAAUjL,IAEL4U,EAAAA,EAAAA,IAAQ,cAAe,CAAEhP,UAAS4oB,QAAQ,IACjD,KAGFxiB,EAAAA,EAAAA,IAAiB,uBAAuBgI,MAAOhU,EAAQmD,EAASqO,KAC9D,MAAM,QAAE5L,GAAY4L,QAECoD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEhP,aAKtDskB,IADS7e,EAAAA,EAAAA,MACiB,KAG5BW,EAAAA,EAAAA,IAAiB,uBAAuBgI,gBACjBY,EAAAA,EAAAA,IAAQ,yBAI7B5U,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHqqB,SAAU,IACLrqB,EAAOqqB,SACVC,OAAQ,CACND,SAAU,OAIhBpf,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,aAAEid,GAAiBjd,EACnBiZ,GAAawC,EAAAA,EAAAA,KAAiBjtB,EAAQyuB,GAC5C,IAAKhE,EACH,OAGF,MAAM,WAAE7D,EAAU,cAAE8H,EAAa,WAAEC,GAAelE,EAC5CmE,GAAeD,GAAcpW,QAAQmW,IAEtC9Z,EAAAA,EAAAA,IAASga,EAAoC,sBAAtB,oBAA6C,CAAEH,eAAc7H,cAAa,KAGxG5a,EAAAA,EAAAA,IAAiB,qBAAqBgI,MAAOhU,EAAQmD,EAASqO,KAC5D,MAAM,SAAEqd,GAAard,EAErB,IAAIsd,EAAuB9uB,EAAO+uB,cAAcF,GAChD,GAAIC,GAAsBE,UACxB,OAGFhvB,EAAS,IACJA,EACH+uB,cAAe,IACV/uB,EAAO+uB,cACV,CAACF,GAAW,IACPC,EACHE,WAAW,MAIjB/jB,EAAAA,EAAAA,IAAUjL,GAEV,MAAM+uB,QAAsBna,EAAAA,EAAAA,IAAQ,qBAAsB,CACxDia,WACAI,YAAaH,EAAuBA,EAAqBI,QAAU,IAMrE,GAFAJ,GADA9uB,GAASqL,EAAAA,EAAAA,OACqB0jB,cAAcF,IAEvCE,EAaH,OAZA/uB,EAAS,IACJA,EACH+uB,cAAe,IACV/uB,EAAO+uB,cACV,CAACF,GAAW,IACPC,EACHE,WAAW,UAIjB/jB,EAAAA,EAAAA,IAAUjL,GAKZA,EAAS,IACJA,EACH+uB,cAAe,IACV/uB,EAAO+uB,cACV,CAACF,GAAW,CACVG,WAAW,EACXE,QAASH,EAAcG,QACvBC,SAAU,IACJL,GAAsBK,YACvBJ,EAAcI,cAKzBlkB,EAAAA,EAAAA,IAAUjL,EAAO,KAsEnBgM,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,MAAE0Z,EAAK,MAAEhnB,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEzC0Z,GACGlB,IAAgBhW,UACnB,MAAM4B,QAAehB,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEsW,UACjD,IAAKtV,EACH,OAGF5V,GAASqL,EAAAA,EAAAA,MACT,MAAM,SAAE4gB,EAAQ,MAAER,GAAUzrB,EAAOqqB,SAE7B+E,EAAYxZ,EAAO+V,KAAKld,KAAI,EAAGnM,QAASA,IAE1CmpB,EAAMM,QACRN,EAAMM,OAAO7pB,SAASI,IACpB,IAAK8sB,EAAU9qB,SAAShC,GAAK,CAC3B,MAAM,MAAEgN,GAAU2c,EAAS3pB,IAAO,CAAC,EAC/BgN,IAAS+f,EAAAA,GAAAA,GAAY/f,EAAO4b,IAC9BkE,EAAU/sB,QAAQC,EAEtB,KAIJtC,GAAS0rB,EAAAA,EAAAA,KACP1rB,EACA,SACA4V,EAAOuU,KACPvU,EAAO+V,MAGT3rB,GAASsvB,EAAAA,EAAAA,IAAoBtvB,EAAQ4V,EAAOuU,KAAMiF,EAAWlrB,IAC7D+G,EAAAA,EAAAA,IAAUjL,EAAO,GAErB,KAGFgM,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,MAAE0Z,EAAK,MAAEhnB,GAAQC,EAAAA,EAAAA,OAAsBqN,EAExB,iBAAV0Z,GACJlB,IAAgB,KAEnBiB,GADAjrB,GAASqL,EAAAA,EAAAA,MACU6f,EAAOlrB,EAAO6hB,QAAQ0N,uBAAmB/lB,EAAWtF,EAAM,GAEjF,KAGF8H,EAAAA,EAAAA,IAAiB,kBAAkB,CAAChM,EAAQmD,EAASqO,KACnD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GAC5C,MAAE0Z,EAAK,OAAEhL,IAAWhgB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOsrB,UAEnC,iBAAVtE,GACJlB,IAAgB,KAEnBiB,GADAjrB,GAASqL,EAAAA,EAAAA,MACU6f,EAAOlrB,EAAO6hB,QAAQ0N,kBAAmBrP,EAAQhc,EAAM,GAE9E,KAGF8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,MAAE9D,GAAU8D,GACZ,KAAE2Y,GAASnqB,EAAOqqB,SAASU,SAE5Bf,IAAgBhW,UACnBhU,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHqqB,SAAU,IACLrqB,EAAOqqB,SACVU,SAAU,IACL/qB,EAAOqqB,SAASU,SACnBrd,YAINzC,EAAAA,EAAAA,IAAUjL,GAEV,MAAM4V,QAAehB,EAAAA,EAAAA,IAAQ,wBAAyB,CAAElH,QAAOyc,SAE/DnqB,GAASqL,EAAAA,EAAAA,MAEJuK,GAAU5V,EAAOqqB,SAASU,SAASrd,QAAUA,IAIlD1N,GAASyvB,EAAAA,EAAAA,KAAuBzvB,EAAQ0N,EAAOkI,EAAOyU,SAAUzU,EAAOuU,OAEvElf,EAAAA,EAAAA,IAAUjL,GAAO,GACjB,KAGJgM,EAAAA,EAAAA,IAAiB,yBAA0BhM,IAClC,IACFA,EACHqqB,SAAU,IACLrqB,EAAOqqB,SACVU,SAAU,CAAC,QAKjB/e,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,MAAE9D,GAAU8D,EAElB,OAAOke,EAAAA,EAAAA,KAA0B1vB,EAAQ0N,EAAM,KAGjD1B,EAAAA,EAAAA,IAAiB,4BAA6BhM,IACrC,IACFA,EACHyiB,aAAc,IACTziB,EAAOyiB,aACVsI,SAAU,CAAC,QAKjB/e,EAAAA,EAAAA,IAAiB,6BAA6BgI,UAC5C,MAAM2Y,QAAyB/X,EAAAA,EAAAA,IAAQ,8BAClC+X,IAIL3sB,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHyiB,aAAc,IACTziB,EAAOyiB,aACVkN,YAAahD,EAAiBhB,KAAKld,KAAI,EAAGnM,QAASA,IACnD4G,KAAM,IACDlJ,EAAOyiB,aAAavZ,SACpB4F,EAAAA,EAAAA,IAAqB6d,EAAiBhB,KAAKiE,SAAShY,GAAQA,EAAIyS,UAAY,KAAK,QAGxFA,SAAU,IACLrqB,EAAOqqB,SACV4B,SAAU,IACLjsB,EAAOqqB,SAAS4B,aAChBnd,EAAAA,EAAAA,IAAqB6d,EAAiBhB,KAAM,UAIrD1gB,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,kBAAkBgI,MAAOhU,EAAQmD,EAASqO,KACzD,MAAM,eAAEgZ,EAAc,kBAAEqF,EAAiB,MAAE3rB,GAAQC,EAAAA,EAAAA,OAAsBqN,GACrEqe,IAAsB5C,EAAAA,EAAAA,KAAiBjtB,EAAQwqB,UAC3CD,GAAavqB,EAAQmD,EAASqnB,GAGtCxqB,GAASqL,EAAAA,EAAAA,MACT,MAAMuM,GAAMqV,EAAAA,EAAAA,KAAiBjtB,EAAQwqB,GAChC5S,GAAK+S,YAIV3qB,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B0qB,0BAA2B9S,EAAI+S,WAC9BzmB,IACH+G,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,2BAA2BgI,UAC1C,MAAM4B,QAAehB,EAAAA,EAAAA,IAAQ,4BACxBgB,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAAS8vB,EAAAA,EAAAA,KAA+B9vB,EAAQ4V,EAAOuU,KAAMvU,EAAOma,gBACpE9kB,EAAAA,EAAAA,IAAUjL,GAAO,I,4BC5vBnB,MAAMgqB,IAAkBC,EAAAA,EAAAA,KAAUlW,GAAOA,KAAM,KAAK,GA6QpDC,eAAegc,GAA6BhwB,EAAqBoD,EAAe+D,GAC9E,KAAK8oB,EAAAA,GAAAA,IAAY7sB,MAAUia,EAAAA,GAAAA,IAAcja,GACvC,OAEF,MAAM8sB,GAAeprB,EAAAA,EAAAA,KAAkB9E,EAAQoD,EAAKd,GAAI6E,GACxD,GAAI+oB,EACF,OAAOA,EAET,MAAMta,QAAehB,EAAAA,EAAAA,IAAQ,eAAgB,CAAExR,OAAM+D,cACrD,MAAkB,oBAAXyO,OAA+BpM,EAAYoM,GAAQ5U,OAC5D,EArRAgL,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,MAAE0Z,EAAK,MAAEhnB,GAAQC,EAAAA,EAAAA,OAAsBqN,GACvC,OAAEpQ,IAAWlB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOisB,aAE7CjF,IAAU9pB,GACP4oB,IAAgBhW,UACnB,MAAM4B,QAAehB,EAAAA,EAAAA,IAAQ,cAAe,CAAEsW,UAE9ClrB,GAASqL,EAAAA,EAAAA,MACT,MAAM+kB,GAAqBC,EAAAA,EAAAA,KAA+BrwB,EAAQkE,GAClE,IAAK0R,IAAWwa,GAAuBlF,IAAUkF,EAG/C,OAFApwB,GAASswB,EAAAA,EAAAA,KAAiCtwB,EAAQ,CAAEiJ,OAAO,GAAS/E,QACpE+G,EAAAA,EAAAA,IAAUjL,GAIZ,MAAM,iBACJuwB,EAAgB,gBAAEC,GAChB5a,EAEJ5V,GAASswB,EAAAA,EAAAA,KAAiCtwB,EAAQ,CAAEiJ,OAAO,GAAS/E,GACpElE,GAASywB,EAAAA,EAAAA,KAAmBzwB,EAAQ,CAClC0wB,aAAc,CACZC,QAASJ,GAEXK,cAAe,KACV1wB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOisB,aAAaS,cAC9CD,QAASH,IAEVtsB,IAEH+G,EAAAA,EAAAA,IAAUjL,EAAO,GAErB,KAGFgM,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,KAAEkD,EAAI,MAAExQ,GAAQC,EAAAA,EAAAA,OAAsBqN,EACtCqf,EAAUnc,GAAOoc,EAAAA,GAAAA,IAAiBpc,GAAQA,EAEhD1U,GAASywB,EAAAA,EAAAA,KAAmBzwB,EAAQ,CAClC+wB,QAASrc,EACTmc,UACA3F,MAAO,GACP8F,cAAe,KACV9wB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOisB,aAAaa,cAC9C3iB,KAAM,CACJ4iB,gBAAYznB,EACZ0nB,SAAU,GACVC,aAAc,KAGjBjtB,IACH+G,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQiuB,qBAAqB,CAAEhvB,KAAM,OAAQ8B,SAAQ,KAGvD8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,KAAEpP,EAAI,MAAE8B,GAAQC,EAAAA,EAAAA,OAAsBqN,GACtC,MACJ0Z,EAAK,cAAE8F,EAAa,OAAE5vB,IACpBlB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOisB,cAC5B,WACJc,EAAU,SAAEC,EAAQ,aAAEC,EAAY,iBAAEE,EAAgB,eAAEC,GACpDN,IAAgB5uB,IAAS,CAAC,EAG9B,QAAmBoH,IAAfynB,KAA8BA,GAAeC,GAAYA,EAASrvB,QAAUovB,GAC9E,OAGF,MAAM7tB,EAAOhC,GAASke,EAAAA,EAAAA,KAAWtf,EAAQoB,QAAUoI,GA2CrDwK,eAA2DhU,EAAWuX,GAWpE,MAAM,MACJ2T,EAAQ,GAAE,KAAE9oB,EAAI,WAAEmvB,EAAU,SAAE1c,EAAQ,WAAE2c,EAAU,KAAEjT,EAAI,QAAEsS,EAAO,QAAEE,EAAO,MAAE7sB,GAAQC,EAAAA,EAAAA,OAClFoT,EACJ,IAAI3B,EAWA6b,EAEJ,GAAIlT,EAAM,CACR,MAAMmT,GAAsB9c,EAAAA,EAAAA,IAAQ,uBAAwB,CAC1D2J,OACA2M,QACA9oB,OACAyT,MAAO8b,EAAAA,IACP9c,WACAkc,UACAF,YAGIe,GADSC,EAAAA,EAAAA,IAActT,IACGA,EAAKjV,SAAUsL,EAAAA,EAAAA,IAAQ,cAAe,CACpExR,KAAMmb,EACN2M,QACArV,MAAOic,EAAAA,WACJtoB,GAEEuoB,EAAcC,SAAgBhW,QAAQC,IAAI,CAACyV,EAAqBE,IAEvE,GAAIG,EAAc,CAChB,MAAM,SACJ7hB,EAAQ,WAAE+gB,EAAU,aAAEE,GACpBY,GAEIC,OAAQC,EAAW,MAAEnc,GAAUkc,GAAU,CAAC,EAElDpc,EAAS,CACPoc,OAAQC,EACRC,iBAAkBpc,EAClB5F,WACA+gB,aACAE,eAEJ,CACF,MAWE,GAVAvb,QAAehB,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7CsW,QACAqG,aACA1c,WACA2c,aACA3b,MAAO8b,EAAAA,IACPvvB,OACAyuB,UACAE,aAEErM,EAAAA,EAAAA,IAAWwG,GAAQ,CACrB,MAAMiH,GAAOC,EAAAA,EAAAA,IAAiBlH,GACX,sBAAfiH,GAAM/vB,KACRqvB,QAsDRzd,eAAsChU,EAAqBmyB,GACzD,MAAM,SAAE/G,EAAQ,UAAEjkB,GAAcgrB,EAC1BE,GAAYC,EAAAA,EAAAA,KAAqBtyB,EAAQorB,GAC/C,GAAIiH,EACF,OAAOrC,GAA6BhwB,EAAQqyB,EAAWlrB,GAEzD,MAAM,KAAE/D,SAAewR,EAAAA,EAAAA,IAAQ,oBAAqBwW,IAAa,CAAC,EAClE,OAAKhoB,EAGE4sB,GAA6BhwB,EAAQoD,EAAM+D,QAHlD,CAIF,CAjE4BorB,CAAuBvyB,EAAQmyB,GAC3B,uBAAfA,GAAM/vB,OACfqvB,QAiER,SAAiCzxB,EAAqBmyB,GACpD,MAAM,UAAEhgB,EAAS,UAAEhL,GAAcgrB,EAC3BK,GAAoBC,EAAAA,GAAAA,IAAYtgB,GAChC/O,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQwyB,GAChC,GAAKpvB,EAGL,OAAO4sB,GAA6BhwB,EAAQoD,EAAM+D,EACpD,CAzE4BurB,CAAwB1yB,EAAQmyB,GAExD,CAGFnyB,GAASqL,EAAAA,EAAAA,MACT,MAAM+kB,GAAqBC,EAAAA,EAAAA,KAA+BrwB,EAAQkE,GAClE,IAAK0R,GAAqB,KAAVsV,GAAgBA,IAAUkF,EAGxC,OAFApwB,GAASswB,EAAAA,EAAAA,KAAiCtwB,EAAQ,CAAEkQ,UAAU,GAAShM,QACvE+G,EAAAA,EAAAA,IAAUjL,GAIRyxB,IACF7b,EAAOqb,WAAarb,EAAO1F,SAAS7N,QAAQovB,IAG9C,MAAM,SACJvhB,EAAQ,iBAAEyiB,EAAgB,WAAE1B,EAAU,eAAEK,EAAc,aAAEH,EAAY,iBAAEE,GACpEzb,EAEA+c,IACF3yB,GAAS4yB,EAAAA,EAAAA,KAAgB5yB,EAAQ2yB,IAG/BziB,EAASrO,SACX7B,GAASuN,EAAAA,EAAAA,KAAYvN,EAAQkQ,IAG/BlQ,GAAS6yB,EAAAA,EAAAA,KACP7yB,EACAkQ,EACA+gB,EACA7uB,EACAkvB,EACAH,EACAE,EACAntB,GAGE0R,EAAOoc,SACThyB,GAAS8yB,EAAAA,EAAAA,KAAa9yB,EAAQue,EAAMjc,GAAIsT,EAAOsc,iBAAmBtc,EAAOoc,SAG3E,MAAMe,EAAend,EAAOoc,QAAQvjB,KAAI,EAAGnM,QAASA,IAAIoC,MAAK,CAACC,EAAGC,IAAMA,EAAID,IAC3E3E,GAASywB,EAAAA,EAAAA,KAAmBzwB,EAAQ,CAClCgzB,cAAeD,GACd7uB,IAEH+G,EAAAA,EAAAA,IAAUjL,EACZ,CAvKEoxB,CAAqBpxB,EAAQ,CAC3BkrB,QACA9oB,OACAmvB,WAAYD,EACZzc,SAAUsc,EACVK,WAPiBH,GAAmB/R,EAAAA,EAAAA,KAAWtf,EAAQqxB,QAAoB7nB,EAQ3E+U,KAAMnb,EACNc,SACA,KAGJ8H,EAAAA,EAAAA,IAAiB,wBAAwBgI,MAAOhU,EAAQmD,EAASqO,KAC/D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5CyhB,GAAiB/yB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOisB,aAAa8C,eAC5D/S,EAAS+S,GAAgBxS,WAC/B,GAAIwS,GAAgBtC,UAAYzQ,EAAQ,OAExClgB,GAASswB,EAAAA,EAAAA,KAAiCtwB,EAAQ,CAAEkzB,SAAS,GAAQhvB,IACrE+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAM4V,QAAehB,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEsL,WAGtD,GADAlgB,GAASqL,EAAAA,EAAAA,OACJuK,EAGH,OAFA5V,GAASswB,EAAAA,EAAAA,KAAiCtwB,EAAQ,CAAEkzB,SAAS,GAAShvB,QACtE+G,EAAAA,EAAAA,IAAUjL,GAIZA,GAASywB,EAAAA,EAAAA,KAAmBzwB,EAAQ,CAClCizB,eAAgB,CACdtC,QAAS,IAAKsC,GAAgBtC,SAAW,MAAQ/a,EAAO+a,SACxDlQ,WAAY7K,EAAO6K,aAEpBvc,GACHlE,GAASswB,EAAAA,EAAAA,KAAiCtwB,EAAQ,CAAEkzB,SAAS,GAAShvB,IAEtE+G,EAAAA,EAAAA,IAAUjL,EAAO,I,gBCqInBgU,eAAemf,GACbnzB,EACAue,EACAzW,EACA1F,EACAyS,EACAG,GAAkB,EAClBU,MACIxR,GAAQC,EAAAA,EAAAA,QAEZ,MAAMivB,EAAe1d,EAAgB1V,EAAOiC,cAAiBsc,EAAKjc,GAE5DsT,QAAehB,EAAAA,EAAAA,IAAQ,uBAAwB,CACnD2J,OACAnc,OACAyT,MAA4B,EAArBwd,EAAAA,GACPvrB,WACA+M,WACAa,kBAGF,IAAKE,EACH,OAGF,MAAM,iBACJ+c,EAAgB,SAAEziB,EAAQ,WAAE+gB,EAAU,aAAEE,GACtCvb,EAEE1M,GAAO4F,EAAAA,EAAAA,IAAqBoB,EAAU,MACtCojB,EAActrB,OAAOuG,KAAKrF,GAAMuF,IAAI3D,QAE1C9K,GAASqL,EAAAA,EAAAA,OAEakoB,EAAAA,EAAAA,KAA+BvzB,EAAQkE,KAK7DlE,GAAS4yB,EAAAA,EAAAA,KAAgB5yB,EAAQ2yB,GACjC3yB,GAASmW,EAAAA,EAAAA,KAAoBnW,EAAQozB,EAAclqB,GACnDlJ,GAASwzB,EAAAA,EAAAA,KACPxzB,EAAQozB,EAActrB,EAAU1F,EAAMkxB,EAAarC,EAAYE,EAAcjtB,IAE/E+G,EAAAA,EAAAA,IAAUjL,GAELgV,GACEme,GAAkBnzB,EAAQue,EAAMzW,EAAU1F,EAAM+uB,GAAc,EAAMzb,EAAexR,GAE5F,EA1RA8H,EAAAA,EAAAA,IAAiB,uBAAuBgI,MAAOhU,EAAQmD,EAASqO,KAC9D,MAAM,MACJ0Z,EAAK,OAAE9pB,EAAM,SAAE0G,EAAWD,EAAAA,GAAc,MAAE3D,GAAQC,EAAAA,EAAAA,OAChDqN,GAAW,CAAC,EAEhB,IAAKpQ,EAAQ,OAEb,MAAMa,EAAgBjC,EAAOiC,cACvByT,GAAgB/J,EAAAA,EAAAA,KAAiBvK,EAAQ0G,EAAU7F,GACnD0T,EAAaD,EAAgB5J,OAAOhE,GAAY1G,EAEhDmd,EAAO5I,GAAa2J,EAAAA,EAAAA,KAAWtf,EAAQ2V,QAAcnM,EAC3D,IAAIiqB,GAAgBC,EAAAA,EAAAA,KAA0B1zB,EAAQkE,GACtD,IAAKqa,EACH,OAGGkV,IACHzzB,GAAS2zB,EAAAA,EAAAA,KAAmB3zB,EAAQ2V,EAAY7N,EAAU,CAAC,EAAG5D,IAC9D+G,EAAAA,EAAAA,IAAUjL,GACVA,GAASqL,EAAAA,EAAAA,OAEXooB,GAAgBC,EAAAA,EAAAA,KAA0B1zB,EAAQkE,GAElD,MAAM,QACJ3C,EAAO,SAAEqyB,EAAQ,KAAExxB,EAAI,UAAEyxB,GACvBJ,EACE5e,EAAWtT,GAAS4vB,aACpBI,EAAahwB,GAAS+vB,eACtBwC,EAAevyB,GAAS8vB,iBACxBG,EAAasC,GAAersB,EAAAA,EAAAA,KAAWzH,EAAQ8zB,QAAgBtqB,EAGrE,IADwBqqB,IAAcD,KACd1I,EAKtB,OAJAlrB,GAAS2zB,EAAAA,EAAAA,KAAmB3zB,EAAQ2V,EAAY7N,EAAU,CACxDisB,mBAAevqB,GACdtF,QACH+G,EAAAA,EAAAA,IAAUjL,GASZ,IAAI4V,EAmCJ,GAxCA5V,GAAS2zB,EAAAA,EAAAA,KAAmB3zB,EAAQ2V,EAAY7N,EAAU,CACxDisB,cAAe7I,GACdhnB,IACH+G,EAAAA,EAAAA,IAAUjL,GAGG,SAAToC,IACFwT,QAAehB,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7C2J,OACAnc,KAAM,OACN8oB,MAAO2I,EAAa,IAAG3I,IAAUA,EACjCpjB,WACA+N,MAAOme,EAAAA,IACPnf,WACAa,gBACAke,cAIS,YAATxxB,IACFwT,QAAehB,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7CxS,KAAM,OACN8oB,MAAO2I,EAAa,IAAG3I,IAAUA,EACjCrV,MAAOme,EAAAA,IACPnf,WACA0c,aACAC,gBAIS,aAATpvB,IACFwT,QAAehB,EAAAA,EAAAA,IAAQ,qBAAsB,CAC3Cqf,QAAS/I,EACTrV,MAAOme,EAAAA,IACPnf,WACA2c,aACAD,iBAIC3b,EACH,OAGF,MAAM,iBACJ+c,EAAgB,SAAEziB,EAAQ,WAAE+gB,EAAU,aAAEE,EAAY,eAAEG,EAAc,iBAAED,GACpEzb,EAEE0d,EAAcpjB,EAASzB,IAAIylB,GAAAA,GAEjCl0B,GAASqL,EAAAA,EAAAA,MAETooB,GAAgBC,EAAAA,EAAAA,KAA0B1zB,EAAQkE,GAClD,MAAMiwB,EAAgBV,GAAeG,YAAaQ,EAAAA,EAAAA,KAAeR,EAAUH,EAAcG,UAEzF,IAAKH,GADoBA,GAAeM,gBAAkB7I,GAChBiJ,EACxC,OAGF,MAAMf,EAAe1d,EAAgBzT,EAAgBsc,EAAKjc,GAE1DtC,GAAS4yB,EAAAA,EAAAA,KAAgB5yB,EAAQ2yB,GACjC3yB,GAASuN,EAAAA,EAAAA,KAAYvN,EAAQkQ,GAC7BlQ,GAAS2zB,EAAAA,EAAAA,KAAmB3zB,EAAQozB,EAActrB,EAAU,CAC1DisB,mBAAevqB,GACdtF,GACHlE,GAASq0B,EAAAA,EAAAA,KAA0Br0B,EAAQozB,EAActrB,EAAU,CACjEopB,SAAUoC,EACVrC,aACAE,eACAG,iBACAD,mBACAnG,MAAOA,GAAS,IACfhnB,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,iBAAiB,CAAChM,EAAQmD,EAASqO,KAClD,MAAM,QAAEyiB,EAAO,MAAE/vB,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEzCuH,GAAclM,EAAAA,EAAAA,KAAyB7M,EAAQkE,GACrD,IAAK6U,EACH,OAGF,MAAMub,EAAaL,EAAQM,QAAQ,KAAM,IAEzCpxB,EAAQwwB,mBAAmB,CACzBvyB,OAAQ2X,EAAY3X,OACpB0G,SAAUiR,EAAYjR,SACtBjF,OAAQ,CACNgxB,WAAW,EACXW,eAAgBF,GAElBpwB,SACA,KAGJ8H,EAAAA,EAAAA,IAAiB,6BAA6B,CAAChM,EAAQmD,EAASqO,KAC9D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GAC5C,OAAEpQ,EAAM,SAAE0G,IAAa+E,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EACzE,IAAK9C,IAAW0G,EACd,OAGF,MAAM4N,GAAgB/J,EAAAA,EAAAA,KAAiBvK,EAAQ0G,EAAU9H,EAAOiC,eAC1D0T,EAAaD,EAAgB5J,OAAOhE,GAAY1G,EAEhDmd,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQ2V,GAC1B8d,GAAgBF,EAAAA,EAAAA,KAA+BvzB,EAAQkE,GAE7D,IAAKqa,IAASkV,EACZ,OAGF,MAAQgB,YAAaryB,EAAI,cAAE4uB,GAAkByC,EACvCiB,EAAiBtyB,GAAQ4uB,GAAiBA,EAAc5uB,GACxDyS,EAAW6f,GAAgBvD,aAE5B/uB,GAIA+wB,GAAkBnzB,EAAQue,EAAMzW,EAAU1F,EAAMyS,OAAUrL,EAAWkM,EAAexR,EAAM,KAEjG8H,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,OACJpQ,EAAM,SAAE0G,EAAQ,sBAAE6sB,EAAqB,MAAE9e,EAAK,UAAEf,EAAS,MAAE5Q,GAAQC,EAAAA,EAAAA,OACjEqN,EACJ,IAAKpQ,IAAW0G,IAAa6sB,EAC3B,OAGF,MAAMjf,GAAgB/J,EAAAA,EAAAA,KAAiBvK,EAAQ0G,EAAU9H,EAAOiC,eAC1D0T,EAAaD,EAAgB5J,OAAOhE,GAAY1G,EAEhDgC,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQ2V,GAChC,IAAKvS,EACH,OAEF,IAAIqwB,GAAgBmB,EAAAA,EAAAA,KAA6B50B,EAAQkE,GAEzD,IAAKuvB,EAAe,CAIlB,GAHAzzB,GAAS60B,EAAAA,EAAAA,KAAiC70B,EAAQoB,EAAQ0G,EAAU5D,IACpE+G,EAAAA,EAAAA,IAAUjL,GACVyzB,GAAgBmB,EAAAA,EAAAA,KAA6B50B,EAAQkE,IAChDuvB,EACH,OAEFzzB,GAASqL,EAAAA,EAAAA,KACX,EAwLF2I,eACEhU,EACAue,EACAzW,EACA6sB,EACAG,EACAhgB,EACAY,EACAG,EAAQkf,EAAAA,QACJ7wB,GAAQC,EAAAA,EAAAA,QAEZ,MAAM,SAAE6wB,GAAah1B,EACrB,IAAKg1B,GAAYF,EAAsB9F,UACrC,OAEF,IAAIiG,EA1GN,SACE1d,EACAod,GAEA,IAAIO,EAAAA,EAAAA,IAAyBP,EAAuBpd,EAAO0d,eAAe/D,UACxE,OAAO3Z,EAAO0d,eAEhB,MAAMpe,EAAQU,EAAO4d,SAASre,WAC3Bse,IAAYF,EAAAA,EAAAA,IAAyBP,EAAuBS,EAAQlE,YAGvE,IAAe,IAAXra,EAIF,YAHIU,EAAO0d,gBAAkB1d,EAAO0d,eAAe/D,SAASrvB,QAC1D0V,EAAO4d,SAASzpB,KAAK6L,EAAO0d,iBAIhC,MAAMrf,EAAS2B,EAAO4d,SAASE,OAAOxe,EAAO,GAAG,GAEhD,OADAU,EAAO4d,SAASzpB,KAAK6L,EAAO0d,gBACrBrf,CACT,CAsFuB0f,CAAoCR,EAAuBH,GAMhF,QAJkBnrB,IAAdsL,IACFA,EAnEJ,SAA+BygB,EAA0BN,GACvD,IAAKA,EAAgB,OAAO5f,EAAAA,GAAkBE,OAC9C,MAAMigB,EAA8BP,EAAe/D,SAASrvB,OAEtD4zB,EAAmBR,EAAe/D,SAASwE,QAAQH,GACzD,IAA0B,IAAtBE,EAAyB,OAAOpgB,EAAAA,GAAkBE,OAEtD,GAAI0f,EAAeU,aAAaC,4BAC3BX,EAAeU,aAAaE,0BAC/B,OAGF,MAEMC,EAtVqB,EAoVJn1B,KAAK6B,MAAMgzB,EAA8B,GAEF,EAtVnC,EAuVrBO,EAAiBP,EAA8B,EAErD,GAAIC,GAAoBK,EAAe,CACrC,GAAIb,EAAeU,aAAaC,2BAA4B,OAC5D,OAAOvgB,EAAAA,GAAkBC,SAC3B,CACA,GAAImgB,GAAoBM,EAAiBD,EAAe,CACtD,GAAIb,EAAeU,aAAaE,0BAA2B,OAC3D,OAAOxgB,EAAAA,GAAkBI,QAC3B,CAEF,CAyCgBugB,CAAsBrB,EAAuBM,SAGzCzrB,IAAdsL,EACF,OAGF,MAAMD,EArFR,SACEC,EACAygB,EACAH,GAEA,OAAKA,EACDtgB,IAAcO,EAAAA,GAAkBC,UAAkB8f,EAAQlE,SAAS,GACnEpc,IAAcO,EAAAA,GAAkBI,SAAiB2f,EAAQlE,SAASkE,EAAQlE,SAASrvB,OAAS,GACzF0zB,EAHcA,CAIvB,CA4EmBU,CAA4BnhB,EAAW6f,EAAuBM,GACzE/f,EA/FR,SACEJ,EACAe,GAEA,OAAIf,IAAcO,EAAAA,GAAkBC,UAAkB,EAClDR,IAAcO,EAAAA,GAAkBI,WAAmBI,EAAQ,KACtDlV,KAAK6U,MAAMK,EAAQ,GAAK,EACnC,CAwFoBqgB,CAA6BphB,EAAWe,GAEpDud,EAAe1d,EAAgB1V,EAAOiC,cAAiBsc,EAAKjc,GAElEtC,GAASm2B,EAAAA,EAAAA,KAA0Bn2B,EAAQozB,EAActrB,GAAU,EAAM5D,IACzE+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAM4V,QAAehB,EAAAA,EAAAA,IAAQ,uBAAwB,CACnD2J,OACAnc,KAAM,QACNyT,QACA/N,WACA+M,WACAa,gBACAR,cAKF,GAFAlV,GAASqL,EAAAA,EAAAA,OAEJuK,EAGH,OAFA5V,GAASm2B,EAAAA,EAAAA,KAA0Bn2B,EAAQozB,EAActrB,GAAU,EAAO5D,QAC1E+G,EAAAA,EAAAA,IAAUjL,GAIZ,MAAM,SACJkQ,EAAQ,iBAAEyiB,GACR/c,EAEE1M,GAAO4F,EAAAA,EAAAA,IAAqBoB,EAAU,MACtCojB,EAActrB,OAAOuG,KAAKrF,GAAMuF,IAAI3D,QAE1C9K,GAAS4yB,EAAAA,EAAAA,KAAgB5yB,EAAQ2yB,GACjC3yB,GAASmW,EAAAA,EAAAA,KAAoBnW,EAAQozB,EAAclqB,GAEnD,MAAMysB,EAlFR,SACE7gB,EACAe,EAAgBugB,EAChBnB,GAEA,IAAIY,EAA4Btd,QAAQ0c,GAAgBU,aAAaE,2BACjED,EAA6Brd,QAAQ0c,GAAgBU,aAAaC,4BAStE,OAPIQ,EAAmBvgB,IACjBf,IAAcO,EAAAA,GAAkBI,SAClCogB,GAA4B,EACnB/gB,IAAcO,EAAAA,GAAkBC,YACzCsgB,GAA6B,IAG1B,CACLC,4BACAD,6BAEJ,CA+DuBS,CAAiBvhB,EAAWe,EAAOyd,EAAYzxB,OAAQozB,GAEtEqB,GAAcC,EAAAA,EAAAA,KAAuBrtB,EAAMoqB,GAAa,GAC9D2B,GAAiBuB,EAAAA,EAAAA,KACfF,EACAX,EACAV,GAGFj1B,GAASy2B,EAAAA,EAAAA,KACPz2B,EAAQozB,EAActrB,EAAUmtB,EAAgBH,EAAuB5wB,GAEzElE,GAASm2B,EAAAA,EAAAA,KAA0Bn2B,EAAQozB,EAActrB,GAAU,EAAO5D,IAC1E+G,EAAAA,EAAAA,IAAUjL,EACZ,CAjQO02B,CAAgB12B,EACnBoD,EACA0E,EACA6sB,EACAlB,EACA3e,EACAY,EACAG,EACA3R,EAAM,KAGV8H,EAAAA,EAAAA,IAAiB,wBAAwBgI,MAAOhU,EAAQmD,EAASqO,KAC/D,MAAM,UAAEmlB,EAAS,MAAEzyB,GAAQC,EAAAA,EAAAA,OAAsBqN,GAE3C,OAAEpQ,IAAWyL,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EAC/D,IAAK9C,EACH,OAGF,MAAMgC,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAM+D,QAAkByN,EAAAA,EAAAA,IAAQ,8BAA+B,CAC7DxR,OACAuzB,cAGGxvB,GAILhE,EAAQ2J,aAAa,CACnB1L,OAAQgC,EAAKd,GACb6E,YACAjD,SACA,KC/PJ8H,EAAAA,EAAAA,IAAiB,mBAAmBgI,MAAOhU,EAAQmD,EAASqO,KAC1D,MAAM,SAAE4Z,EAAQ,MAAElnB,GAAQC,EAAAA,EAAAA,OAAsBqN,GAE1C,OAAEpQ,IAAWyL,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EAC/D,IAAK9C,EACH,OAIF,IAAIlB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO0yB,WAAWjf,WAAakf,EAAAA,GAAmBC,WAC3E,OAGF92B,GAAS+2B,EAAAA,EAAAA,KACP/2B,EAAQoB,EAAQ,CAAE41B,yBAAqBxtB,EAAWytB,qBAAiBztB,GAAatF,IAElF+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAM,OAAE4V,EAAM,MAAExC,SAAiBwB,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEwW,aAEhEprB,GAASqL,EAAAA,EAAAA,MACTrL,GAASk3B,EAAAA,EAAAA,KACPl3B,GAAmB,IAAX4V,EAAkBihB,EAAAA,GAAmBM,SAAWN,EAAAA,GAAmBO,MAAOlzB,GAEpFlE,GAAS+2B,EAAAA,EAAAA,KAAiB/2B,EAAQoB,EAAQ,CACxC41B,qBAAgC,IAAXphB,EACrBqhB,gBAAiB7L,EACjBhY,SACClP,IACH+G,EAAAA,EAAAA,IAAUjL,QAEKwJ,IAAXoM,GACFzS,EAAQk0B,sBAAsB,CAAExhB,MAAO,iBAAkB3R,SAC3D,KAGF8H,EAAAA,EAAAA,IAAiB,oBAAoBgI,MAAOhU,EAAQmD,EAASqO,KAC3D,MAAM,SAAE4Z,EAAQ,uBAAEkM,EAAsB,MAAEpzB,GAAQC,EAAAA,EAAAA,OAAsBqN,GAElE,OAAEpQ,IAAWyL,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EAC/D,IAAK9C,EACH,OAGF,MAAMgC,QAAam0B,EAAAA,EAAAA,IAAmBv3B,EAAQmD,EAAS/B,EAAQ8C,GAC/D,IAAKd,EAAM,OAEXpD,GAASqL,EAAAA,EAAAA,MAETrL,GAASk3B,EAAAA,EAAAA,KAAyBl3B,EAAQ62B,EAAAA,GAAmBC,WAAY5yB,IACzE+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAM4V,QAAehB,EAAAA,EAAAA,IAAQ,kBAAmB,CAAExR,OAAMgoB,aACpDkM,SACI1iB,EAAAA,EAAAA,IAAQ,yBAA0B,CAAExR,SAG5CpD,GAASqL,EAAAA,EAAAA,MACTrL,GAASk3B,EAAAA,EAAAA,KAAyBl3B,EAAQ4V,EAASihB,EAAAA,GAAmBM,SAAWN,EAAAA,GAAmBO,MAAOlzB,GAC3GlE,GAAS+2B,EAAAA,EAAAA,KAAiB/2B,EAAQoD,EAAKd,GAAI,CACzC00B,yBAAqBxtB,EACrBytB,qBAAiBztB,EACjB4J,WAAO5J,GACNtF,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GAC5C,OAAEpQ,IAAWyL,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EACzDd,EAAOhC,IAAUqG,EAAAA,EAAAA,KAAWzH,EAAQoB,GACrCA,GAAWgC,IAIhBwR,EAAAA,EAAAA,IAAQ,oBAAqB,CAAExR,QAAO,KAGxC4I,EAAAA,EAAAA,IAAiB,4BAA4B,CAAChM,EAAQmD,EAASqO,KAC7D,MAAM,OAAEpQ,EAAM,OAAEo2B,EAAM,MAAEtzB,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEtDxR,GAAS+2B,EAAAA,EAAAA,KAAiB/2B,EAAQoB,EAAQ,CAAEq2B,cAAeD,GAAUtzB,IACrE+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,OAAEpQ,EAAM,OAAEo2B,EAAM,MAAEtzB,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEhD3O,EAAS20B,EAAS,CAAEE,WAAY,CAAEF,WAAa,CAAEE,gBAAYluB,GAEnExJ,GAAS+2B,EAAAA,EAAAA,KAAiB/2B,EAAQoB,EAAQyB,EAAQqB,IAClD+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,2BAA2BgI,MAAOhU,EAAQmD,EAASqO,KAClE,MAAM,OACJpQ,EAAM,QAAEu2B,EAAO,UAAEC,EAAS,MAAE/hB,EAAK,MAAE3R,GAAQC,EAAAA,EAAAA,OACzCqN,EACE+M,GAAO9W,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1By2B,GAAQvjB,EAAAA,EAAAA,KAAWtU,EAAQ23B,GAAW33B,EAAOiC,eACnD,IAAKsc,IAASsZ,EAAO,OAErB,MAAMjiB,QAAehB,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD2J,OAAMsZ,QAAOD,YAAW/hB,UAE1B,IAAKD,EACH,OAEF5V,GAASqL,EAAAA,EAAAA,MACT,MAAM,QAAEysB,GAAYliB,EAEd/S,EAAS+0B,EAAY,CAAEG,eAAgBD,GAAY,CAAEA,WAC3D93B,GAAS+2B,EAAAA,EAAAA,KAAiB/2B,EAAQoB,EAAQyB,EAAQqB,IAClD+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,0BAA0BgI,MAAOhU,EAAQmD,EAASqO,KACjE,MAAM,OACJpQ,EAAM,KAAE+wB,EAAI,UAAEyF,EAAS,WAAEI,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAE5oB,EAAK,MAAEpL,GAAQC,EAAAA,EAAAA,OAC/EqN,EACE+M,GAAO9W,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKmd,EAAM,OAEX,MAAM3I,QAAehB,EAAAA,EAAAA,IAAQ,yBAA0B,CACrD2J,OACA4T,OACAyF,YACAI,aACAC,aACAC,kBACA5oB,UAEF,IAAKsG,EACH,OAGF,MAAM,UAAEuiB,EAAS,UAAEC,GAAcxiB,EAEjC5V,GAASqL,EAAAA,EAAAA,MACT,MAAM,WAAEurB,IAAe12B,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC4zB,GAAWlB,EAAWhlB,SAASxQ,GAAQ02B,SAAW,IACrDh2B,QAAQysB,GAAYA,EAAQ4D,OAASgG,EAAUhG,OAC5C4F,EAAiB,IAAKnB,EAAWhlB,SAASxQ,GAAQ22B,gBAAkB,IAEtEK,EAAUR,UACZG,EAAe11B,QAAQ+1B,GAEvBN,EAAQpsB,KAAK0sB,GAGfp4B,GAAS+2B,EAAAA,EAAAA,KAAiB/2B,EAAQoB,EAAQ,CACxC02B,UACAC,kBACC7zB,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,oBAAoBgI,MAAOhU,EAAQmD,EAASqO,KAC3D,MAAM,OACJpQ,EAAM,WAAE42B,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAE5oB,EAAK,MAAEpL,GAAQC,EAAAA,EAAAA,OAC9DqN,EACE+M,GAAO9W,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKmd,EAAM,OAEX,MAAM3I,QAAehB,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/C2J,OACAyZ,aACAC,aACAC,kBACA5oB,UAEF,IAAKsG,EACH,OAGF5V,GAASqL,EAAAA,EAAAA,MACT,MAAMysB,GAAU53B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO0yB,WAAWhlB,SAASxQ,GAAQ02B,SAAW,GACrF93B,GAAS+2B,EAAAA,EAAAA,KAAiB/2B,EAAQoB,EAAQ,CACxC02B,QAAS,IAAIA,EAASliB,IACrB1R,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,4BAA4BgI,MAAOhU,EAAQmD,EAASqO,KACnE,MAAM,OACJpQ,EAAM,KAAE+wB,EAAI,MAAEjuB,GAAQC,EAAAA,EAAAA,OACpBqN,EACE+M,GAAO9W,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKmd,EAAM,OAMX,UAJqB3J,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD2J,OACA4T,SAGA,OAGFnyB,GAASqL,EAAAA,EAAAA,MACT,MAAMgtB,GAAkBn4B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO0yB,WAAWhlB,SAASxQ,GAC1EpB,GAAS+2B,EAAAA,EAAAA,KAAiB/2B,EAAQoB,EAAQ,CACxC02B,QAASO,GAAiBP,SAASh2B,QAAQ01B,GAAWA,EAAOrF,OAASA,IACtE4F,eAAgBM,GAAiBN,gBAAgBj2B,QAAQ01B,GAAWA,EAAOrF,OAASA,KACnFjuB,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,oCAAoCgI,MAAOhU,EAAQmD,EAASqO,KAC3E,MAAM,OACJpQ,EAAM,QAAEu2B,EAAO,MAAEzzB,GAAQC,EAAAA,EAAAA,OACvBqN,EACE+M,GAAO9W,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1By2B,GAAQvjB,EAAAA,EAAAA,KAAWtU,EAAQ23B,GAAW33B,EAAOiC,eAC9Csc,GAASsZ,SAEOjjB,EAAAA,EAAAA,IAAQ,mCAAoC,CAC/D2J,OACAsZ,YAMF73B,GAASqL,EAAAA,EAAAA,MACTrL,GAAS+2B,EAAAA,EAAAA,KAAiB/2B,EAAQoB,EAAQ,CACxC22B,eAAgB,IACf7zB,IACH+G,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,2BAA2BgI,MAC1ChU,EAAQmD,EAASqO,KAEjB,MAAM,OACJpQ,EAAM,KAAE+wB,EAAI,WAAEmG,EAAU,aAAEC,EAAY,MAAE1iB,EAAK,MAAE3R,GAAQC,EAAAA,EAAAA,OACrDqN,EACE+M,GAAO9W,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1Bo3B,EAAaD,GAAejkB,EAAAA,EAAAA,KAAWtU,EAAQu4B,QAAgB/uB,EACrE,IAAK+U,GAASga,IAAiBC,EAAa,OAE5C,MAAM5iB,QAAehB,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD2J,OACA4T,OACAmG,aACAE,aACA3iB,UAEF,IAAKD,EACH,OAEF,MAAM,UAAE6iB,GAAc7iB,EAEtB5V,GAASqL,EAAAA,EAAAA,MACT,MAAMqtB,GAAoBx4B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO0yB,WAAWhlB,SAASxQ,IAASs2B,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAOrF,OAASA,IAIpEnyB,GAAS+2B,EAAAA,EAAAA,KAAiB/2B,EAAQoB,EAAQ,CACxCs2B,WAAY,IACPgB,EACHD,cAEDv0B,IACH+G,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,4BAA4BgI,MAC3ChU,EAAQmD,EAASqO,KAEjB,MAAM,OACJpQ,EAAM,KAAE+wB,EAAI,WAAEmG,EAAU,aAAEC,EAAY,MAAE1iB,EAAK,MAAE3R,GAAQC,EAAAA,EAAAA,OACrDqN,EACE+M,GAAO9W,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1Bo3B,EAAaD,GAAejkB,EAAAA,EAAAA,KAAWtU,EAAQu4B,QAAgB/uB,EACrE,IAAK+U,GAASga,IAAiBC,EAAa,OAE5C,MAAM5iB,QAAehB,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD2J,OACA4T,OACAmG,aACAE,aACA3iB,QACA8iB,aAAa,IAEf,IAAK/iB,EACH,OAEF,MAAM,UAAE6iB,GAAc7iB,EAEtB5V,GAASqL,EAAAA,EAAAA,MACT,MAAMqtB,GAAoBx4B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO0yB,WAAWhlB,SAASxQ,IAASs2B,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAOrF,OAASA,IAGpEnyB,GAAS+2B,EAAAA,EAAAA,KAAiB/2B,EAAQoB,EAAQ,CACxCs2B,WAAY,IACPgB,EACHE,WAAYH,IAEbv0B,IACH+G,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,wBAAwBgI,MAAOhU,EAAQmD,EAASqO,KAC/D,MAAM,OACJpQ,EAAM,WAAEk3B,EAAa,EAAC,aAAEC,EAAY,MAAE1iB,EAAQ,GAC5CrE,EACE+M,GAAO9W,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1Bo3B,EAAaD,GAAejkB,EAAAA,EAAAA,KAAWtU,EAAQu4B,QAAgB/uB,EACrE,IAAK+U,GAASga,IAAiBC,EAAa,OAE5C,MAAM5iB,QAAehB,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD2J,OACA+Z,aACAE,aACA3iB,QACA8iB,aAAa,IAEf,IAAK/iB,EACH,OAEF,MAAM,UAAE6iB,GAAc7iB,EAEtB5V,GAASqL,EAAAA,EAAAA,MACTrL,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAEy3B,aAAcJ,KACpDxtB,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,uBAAuBgI,MAAOhU,EAAQmD,EAASqO,KAC9D,MAAM,OACJpQ,EAAM,OAAE8a,EAAM,WAAE4c,GACdtnB,EACE+M,GAAO9W,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BiT,GAAOC,EAAAA,EAAAA,KAAWtU,EAAQkc,GAChC,IAAKqC,IAASlK,EAAM,OAOpB,UALqBO,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD2J,OACAlK,OACAykB,eAEW,OAEb94B,GAASqL,EAAAA,EAAAA,MACT,MAAM0tB,GAAatxB,EAAAA,EAAAA,KAAWzH,EAAQoB,GACjC23B,IAEL/4B,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClCy3B,aAAcE,EAAWF,cAAc/2B,QAAQk3B,GAAaA,EAAS9c,SAAWA,OAElFjR,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,2BAA2BgI,MAAOhU,EAAQmD,EAASqO,KAClE,MAAM,OACJpQ,EAAM,WAAE03B,EAAU,KAAE3G,GAClB3gB,EACE+M,GAAO9W,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC3Bmd,SAEgB3J,EAAAA,EAAAA,IAAQ,0BAA2B,CACtD2J,OACAua,aACA3G,WAIFnyB,GAASqL,EAAAA,EAAAA,OACU5D,EAAAA,EAAAA,KAAWzH,EAAQoB,KAGtCpB,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAEy3B,aAAc,KACpD74B,GAAS+iB,EAAAA,EAAAA,KAAmB/iB,EAAQoB,EAAQ,CAC1C63B,mBAAoB,GACpBC,gBAAiB,KAEnBjuB,EAAAA,EAAAA,IAAUjL,IAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,sBAAsBgI,MAAOhU,EAAQmD,EAASqO,KAC7D,MAAM,OAAEpQ,GAAWoQ,EACbpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC3BgC,SAEgBwR,EAAAA,EAAAA,IAAQ,qBAAsBxR,KAGnDpD,GAASqL,EAAAA,EAAAA,MACTrL,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClC+3B,cAAU3vB,KAEZyB,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,6BAA6BgI,MAAOhU,EAAQmD,EAASqO,KACpE,MAAM,OACJ0K,EAAM,KAAEkd,EAAI,UAAEC,EAAS,MAAEn1B,GAAQC,EAAAA,EAAAA,OAC/BqN,EAEE6C,GAAOC,EAAAA,EAAAA,KAAWtU,EAAQkc,GAChC,IAAK7H,EAAM,OAWX,GATArU,GAASk3B,EAAAA,EAAAA,KAAyBl3B,EAAQ62B,EAAAA,GAAmBC,WAAY5yB,IACzE+G,EAAAA,EAAAA,IAAUjL,UAEW4U,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDP,OACA+kB,OACAC,cAQA,OAJAr5B,GAASqL,EAAAA,EAAAA,MACTrL,GAASk3B,EAAAA,EAAAA,KAAyBl3B,EAAQ62B,EAAAA,GAAmBO,MAAOlzB,QACpE+G,EAAAA,EAAAA,IAAUjL,GAKZA,GAASqL,EAAAA,EAAAA,OACTJ,EAAAA,EAAAA,IAAUjL,GAEV,MAAM,GAAEsC,EAAE,WAAEskB,GAAevS,EAE3B,UADsBO,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEtS,KAAIskB,eAKnD,OAHA5mB,GAASqL,EAAAA,EAAAA,MACTrL,GAASk3B,EAAAA,EAAAA,KAAyBl3B,EAAQ62B,EAAAA,GAAmBO,MAAOlzB,QACpE+G,EAAAA,EAAAA,IAAUjL,GAIZmD,EAAQm2B,sBAAsB,CAAEt3B,OAAQka,EAAQqd,uBAAuB,IAEvEv5B,GAASqL,EAAAA,EAAAA,MACTrL,GAASk3B,EAAAA,EAAAA,KAAyBl3B,EAAQ62B,EAAAA,GAAmBM,SAAUjzB,IACvE+G,EAAAA,EAAAA,IAAUjL,GAENo5B,IAASC,GACXl2B,EAAQiM,iBAAiB,CACvBpO,QAASmtB,EAAAA,GAA0B,4CAA4CqL,EAAAA,EAAAA,KAAuBnlB,IACtGnQ,SAEJ,KAGF8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,OAAEpQ,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAE1D,OAAOulB,EAAAA,EAAAA,KAAiB/2B,EAAQoB,EAAQ,CAAEgS,WAAO5J,GAAatF,EAAM,I,4BCtatE,IAAIu1B,GA4PAC,GAjBJ,SAASC,GAAuC35B,EAAWoB,EAAgB0G,GACzE,MAAM7F,EAAgBjC,EAAOiC,cACvByT,GAAgB/J,EAAAA,EAAAA,KAAiBvK,EAAQ0G,EAAU7F,GACnD0T,EAAaD,EAAgB5J,OAAOhE,GAAY1G,EAEhDgC,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQ2V,GAEhC,OAAOf,EAAAA,EAAAA,IAAQ,gBAAiB,CAC9BxR,OACA0E,WACA+M,SAAWa,OAA8ClM,EAA9BpG,EAAK4M,uBAChCkF,YAAavU,KAAK6U,MAAMJ,EAAAA,IAAqB,GAAK,GAClDS,MAAOT,EAAAA,IACPM,iBAEJ,EAxPA1J,EAAAA,EAAAA,IAAiB,QAAQ,CAAChM,EAAQmD,KAC5By2B,EAAAA,KAEFC,QAAQC,IAAI,kBAGVL,IACF1R,aAAa0R,IAGfz5B,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IAAKA,EAAQ+5B,WAAW,IACjC9uB,EAAAA,EAAAA,IAAUjL,GAGVy5B,GAAuBpU,OAAOja,YAAW,KACvCpL,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IAAKA,EAAQ+5B,WAAW,IACjC9uB,EAAAA,EAAAA,IAAUjL,GACVy5B,QAAuBjwB,CAAS,GAvBL,MA0B7B,MAAM,aACJwwB,EAAY,uBAAEC,EAAsB,eAAEC,EAAc,qBAAEC,GACpDh3B,GAEJi3B,EAAAA,GAAAA,MAEAJ,EAAa,CACXK,SAAU,SACVC,mBAAoBtmB,gBA0BxBA,eAA6DhU,EAAWmD,GACtE,IAAIo3B,GAAoB,EAExBv6B,GAASqL,EAAAA,EAAAA,MAET,IAAImvB,GAAW,EAGf,MAEMC,EAFezyB,OAAOuG,KAAKvO,EAAOkQ,SAAS0B,UAEb0I,QAAwD,CAACC,EAAKnZ,KAChGmZ,EAAInZ,GAAU4G,OACXuG,KAAKvO,EAAOkQ,SAAS0B,SAASxQ,GAAQs5B,aACtCpgB,QAAwC,CAACqgB,EAAM7yB,KAC9C6yB,EAAK7vB,OAAOhD,KAAa8yB,EAAAA,EAAAA,IAAc,CACrC1mB,OAAOmF,EAAAA,EAAAA,KAAYrZ,EAAQoB,EAAQ0J,OAAOhD,IAC1CwV,WAAWC,EAAAA,EAAAA,KAAgBvd,EAAQoB,EAAQ0J,OAAOhD,IAClD+yB,cAAcC,EAAAA,EAAAA,KAAmB96B,EAAQoB,EAAQ0J,OAAOhD,MAGnD6yB,IACN,CAAC,GACCpgB,IACN,CAAC,GAIEwgB,EAAe/yB,OAAOsI,QAAQtQ,EAAOiJ,MAAM+xB,eAAe/e,KAAO,CAAC,GAAGxN,KAAI,EAAErN,EAAQ+F,MACvFrC,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ0J,OAAO3D,MACxCrF,OAAOyW,SACJ0iB,EAAoBjzB,OAAOC,OAAOjI,EAAOiJ,MAAM+xB,eAAerN,OAAS,CAAC,GAAGlf,KAAKtH,IACpFrC,EAAAA,EAAAA,KAAkB9E,EAAQA,EAAOiC,cAAgB6I,OAAO3D,MACvDrF,OAAOyW,SAEV,IAAK,MAAQjW,GAAI4B,KAAW8D,OAAOC,OAAOjI,EAAOkI,SAAU,CACzDlI,GAASqL,EAAAA,EAAAA,MACT,MAAQjK,OAAQoM,EAAe1F,SAAU+H,IAAoBhD,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EACnGg3B,EAAiBrrB,GAAmBhI,EAAAA,GACpChB,EAAa2G,GAAiBqC,GAChClF,EAAAA,EAAAA,KAAiB3K,EAAQwN,EAAeqC,QAAmBrG,EACzDsc,EAActY,EAAgBxN,EAAOiJ,MAAMC,KAAKsE,QAAiBhE,EACvE,GAAIgE,GAAiBsY,EAAa,CAChC,MAAOlQ,EAAQulB,SAA0Bnf,QAAQC,IAAI,CACnD0d,GACE35B,EACAwN,EACA0tB,GAEFA,IAAmBrzB,EAAAA,KAAmB8D,EAAAA,EAAAA,KAAiBma,EAAYxjB,GAAI44B,EAAgBl7B,EAAOiC,oBAIvFuH,GAHHoL,EAAAA,EAAAA,IAAQ,yBAA0B,CAClCxR,KAAM0iB,EACN3e,UAAW2D,OAAOowB,OAGxBl7B,GAASqL,EAAAA,EAAAA,MACT,MAAQjK,OAAQg6B,IAAqBvuB,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EAEjF,GAAI0R,GAAUwlB,IAAqB5tB,EAAe,CAChD,MAAM6tB,GAAsBxxB,EAAAA,EAAAA,KAAmB7J,EAAQwN,GACjDuI,EAAgBvI,IAAkBqE,EAAAA,IACpC7R,EAAO8R,qBAAqBhQ,QAAO,EAAGkQ,gBAAiBA,IAAWvD,KAAI,EAAGzN,aAAcA,IACvF,GACEgxB,GAASsJ,EAAAA,EAAAA,KAAat7B,EAAQwN,GAC9B+tB,EAAoBvJ,EAAShqB,OAAOC,OAAO+pB,GAC9CvjB,KAAI,EAAGpH,mBAAoBg0B,EAAoBh0B,KAC/CvF,OAAOyW,SACN,GAEEijB,EAAmB5lB,EAAO1F,SAASzB,KAAI,EAAGnM,QAASA,IACnDm5B,GAAsBC,EAAAA,EAAAA,IAAK17B,EAAOkQ,SAAS0B,SAASpE,GAAektB,YAAac,GAKhFxlB,KAH2BJ,EAAO1F,SAASrO,QAC5C+T,EAAO1F,SAASkB,MAAK,EAAG9O,QAASA,IAAO64B,GAAkBQ,mBACPR,GAAkBS,aAAgB,IAClDlrB,OAAOkF,EAAO1F,SAAU6F,GAC1D8lB,EAAmC7lB,EAAYtF,OAAO6qB,GACtDryB,GAAO4F,EAAAA,EAAAA,IAAqB+sB,EAAkC,MAC9D/xB,GAAYiC,EAAAA,EAAAA,IAAOiK,EAAYvH,KAAI,EAAGnM,QAASA,KAEhDk4B,IACHx6B,EAAS,IACJA,EACHkQ,SAAU,IACLlQ,EAAOkQ,SACV0B,SAAU,CAAC,IAIf5J,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAIw5B,MAC3C97B,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B+7B,WAAY,CAAC,GACZD,EAAW,IAEhBtB,GAAW,GAGbx6B,GAASmW,EAAAA,EAAAA,KAAoBnW,EAAQwN,EAAetE,GACpDlJ,GAAS+H,EAAAA,EAAAA,KAAgB/H,EAAQwN,EAAe0tB,EAAgBpxB,GAGhE9B,OAAOsI,QAAQmrB,GAAqBv5B,SAAQ,EAAEI,EAAIsN,MAC3CA,GAAQ/I,aACb7G,GAAS6I,EAAAA,EAAAA,KAAiB7I,EAAQwN,EAAelL,EAAIsN,EAAO/I,YAAW,IAGrEA,IAAeA,EAAWm1B,gBAAkBd,IAAmBrzB,EAAAA,KACjE7H,GAAS6I,EAAAA,EAAAA,KAAiB7I,EAAQwN,EAAe0tB,EAAgB,KAC5DQ,EAAAA,EAAAA,IAAK70B,EAAY,CAAC,gBAAiB,qBAI1CmB,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAIw5B,MAC3C,MAAQ16B,OAAQ66B,EAAan0B,SAAUo0B,IAAkBrvB,EAAAA,EAAAA,KAAyB7M,EAAQ87B,IAAe,CAAC,EACtGG,IAAgBzuB,GAAiB0uB,IAAkBhB,IACrDl7B,GAAS2W,EAAAA,EAAAA,KAAuB3W,EAAQwN,EAAe0tB,EAAgBpxB,EAAWgyB,GACpF,IAEF97B,GAASm8B,EAAAA,EAAAA,KAAYn8B,GAAQ8O,EAAAA,EAAAA,IAAqB8G,EAAO3M,MAAO,OAChEjJ,GAASo8B,EAAAA,EAAAA,KAAYp8B,GAAQ8O,EAAAA,EAAAA,IAAqB8G,EAAOymB,MAAO,OAEhE9B,GAAoB,CACtB,CACF,EAEAtvB,EAAAA,EAAAA,IAAUjL,GAEN8lB,GAAaxc,UACfnG,EAAQm5B,WAAW,CAAEl7B,OAAQoM,EAAgBxE,OAAO,IAChD6G,GAAmBA,IAAoBhI,EAAAA,IACzC1E,EAAQ4H,cAAc,CACpB3J,OAAQoM,EAAgBxC,QAASF,OAAO+E,GAAkB0sB,wBAAwB,IAI1F,CAEAv8B,GAASqL,EAAAA,EAAAA,MAEJkvB,IACHv6B,EAAS,IACJA,EACHkQ,SAAU,IACLlQ,EAAOkQ,SACV0B,SAAU,CAAC,IAIf5J,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAIw5B,MAC3C97B,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B+7B,WAAY,CAAC,GACZD,EAAW,KAMlB9zB,OAAOuG,KAAKksB,GAAgBv4B,SAASd,IACnC,MAAMo7B,EAAU/B,EAAer5B,GAC/B4G,OAAOuG,KAAKiuB,GAASt6B,SAAS4F,IAC5B9H,GAASy8B,EAAAA,EAAAA,KAAaz8B,EAAQoB,EAAQ0J,OAAOhD,GAAW2yB,EAAer5B,GAAQ0J,OAAOhD,IAAW,GACjG,IAIJ9H,GAASuN,EAAAA,EAAAA,KAAYvN,EAAQ+6B,GAC7B/6B,GAASuN,EAAAA,EAAAA,KAAYvN,EAAQi7B,IAE7BhwB,EAAAA,EAAAA,IAAUjL,GAEVgI,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAI4B,MAC3C,MAAQ9C,OAAQs7B,EAAav1B,UAAWw1B,IAAmBz8B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO04B,YACrFF,GAAeC,KAAmB73B,EAAAA,EAAAA,KAAkB9E,EAAQ08B,EAAaC,IAC3Ex5B,EAAQ05B,iBAAiB,CAAE34B,SAC7B,GAEJ,CAxMY44B,CAAuB98B,EAAQmD,GAErCnD,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACH+5B,WAAW,EACX/E,UAAU,EACV+H,sBAAsB,IAExB9xB,EAAAA,EAAAA,IAAUjL,GAEN45B,EAAAA,KAEFC,QAAQC,IAAI,mBAGdE,EAAa,CAAEK,SAAU,aACzBL,EAAa,CAAEK,SAAU,UACzBJ,IACAC,IACAC,GAAsB,GAExB,KAuMJ6C,EAAAA,GAAAA,KAAah9B,IACX,MAAM,gBAAEmf,EAAe,UAAE8d,EAAS,SAAEjI,GAAah1B,GAC3C,YAAEk9B,IAAgBh9B,EAAAA,EAAAA,KAAeF,IAClCk9B,GAAelI,GAAa0E,IAAgBva,kBAAoBA,GAChEua,IAAgBuD,YAAcA,GAKX,yBAApB9d,GAA4D,4BAAd8d,IAEhDhV,EAAAA,EAAAA,MAAakV,OANbzD,GAAiB15B,CASI,KCjTzBgM,EAAAA,EAAAA,IAAiB,cAAcgI,MAAOhU,EAAQmD,EAASqO,KACrD,MAAM,OACJpQ,EAAM,OACNg8B,EAAM,YACNhf,EAAW,MACXla,GAAQC,EAAAA,EAAAA,OACNqN,EACJ,IAAKpQ,EACH,OAGF,MAAMgC,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMwS,QAAehB,EAAAA,EAAAA,IAAQ,aAAc,CACzC2J,KAAMnb,EACNg6B,SACAhf,gBAGFjb,EAAQiM,iBAAiB,CACvBpO,QAAS4U,GACLyG,EAAAA,EAAAA,IAAa,2BACb,2EACJnY,SACA,KAGJ8H,EAAAA,EAAAA,IAAiB,sBAAsBgI,MAAOhU,EAAQmD,EAASqO,KAC7D,MAAM,OACJpQ,EAAM,OACNg8B,EAAM,YACNhf,EAAW,MACX1Y,EAAK,MACLxB,GAAQC,EAAAA,EAAAA,OACNqN,EACJ,IAAKpQ,EACH,OAGF,MAAMgC,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,IAASsC,EACZ,OAGF,MAAMkQ,QAAehB,EAAAA,EAAAA,IAAQ,qBAAsB,CACjD2J,KAAMnb,EACNsC,QACA03B,SACAhf,gBAGFjb,EAAQiM,iBAAiB,CACvBpO,QAAS4U,GACLyG,EAAAA,EAAAA,IAAa,2BACb,2EACJnY,SACA,KAGJ8H,EAAAA,EAAAA,IAAiB,sBAAsBgI,UACrC,MAAM4B,QAAehB,EAAAA,EAAAA,IAAQ,uBACxBgB,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHq9B,eAAgB,CACdC,OAAQ1nB,EAAO2nB,eACfC,cAAex1B,OAAOuG,KAAKqH,EAAO2nB,gBAClCE,QAAS7nB,EAAO6nB,WAGpBxyB,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,0BAA0BgI,MAAOhU,EAAQmD,EAASqO,KACjE,MAAM,KAAE2Y,GAAS3Y,EAGjB,UADqBoD,EAAAA,EAAAA,IAAQ,yBAA0BuV,GAErD,OAGFnqB,GAASqL,EAAAA,EAAAA,MAET,MAAQ,CAAC8e,GAAOuT,KAAoBC,GAAgB39B,EAAOq9B,eAAeC,OAE1Et9B,EAAS,IACJA,EACHq9B,eAAgB,CACdC,OAAQK,EACRH,cAAex9B,EAAOq9B,eAAeG,cAAc17B,QAAQ87B,GAAOA,IAAOzT,OAG7Elf,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,8BAA8BgI,UAE7C,UADqBY,EAAAA,EAAAA,IAAQ,8BAE3B,OAIF,MAAMipB,GADN79B,GAASqL,EAAAA,EAAAA,OACyBgyB,eAAeG,cAC9Ch6B,MAAM2mB,GAASnqB,EAAOq9B,eAAeC,OAAOnT,GAAM2T,YACrD,IAAKD,EACH,OAEF,MAAME,EAAiB/9B,EAAOq9B,eAAeC,OAAOO,GAEpD79B,EAAS,IACJA,EACHq9B,eAAgB,CACdC,OAAQ,CACN,CAACO,GAAqBE,GAExBP,cAAe,CAACK,MAGpB5yB,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,yBAAyBgI,MAAOhU,EAAQmD,EAASqO,KAChE,MAAM,KACJ2Y,EAAI,gBAAE6T,EAAe,sBAAEC,EAAqB,YAAEC,GAC5C1sB,QACiBoD,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDuV,OACA6T,kBACAC,wBACAC,kBAOFl+B,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHq9B,eAAgB,IACXr9B,EAAOq9B,eACVC,OAAQ,IACHt9B,EAAOq9B,eAAeC,OACzB,CAACnT,GAAO,IACHnqB,EAAOq9B,eAAeC,OAAOnT,WACR3gB,IAApBw0B,EAAgC,CAAEA,wBAAoBx0B,UAC5BA,IAA1By0B,EAAsC,CAAEA,8BAA0Bz0B,KAClE00B,GAAe,CAAEC,mBAAe30B,QAK5CyB,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,oBAAoBgI,MAAOhU,EAAQmD,EAASqO,KAC3D,MAAM,KAAE4sB,GAAS5sB,QAEIoD,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEwpB,WAMnDp+B,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHq9B,eAAgB,IACXr9B,EAAOq9B,eACVI,QAASW,KAGbnzB,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,yBAAyBgI,UACxC,MAAM4B,QAAehB,EAAAA,EAAAA,IAAQ,0BAC7B,IAAKgB,EACH,OAEF,MAAM,kBAAEyoB,GAAsBzoB,EAC9B5V,GAASqL,EAAAA,EAAAA,MAETrL,EAAS,IACJA,EACHs+B,kBAAmB,CACjBhB,OAAQe,EACRb,cAAex1B,OAAOuG,KAAK8vB,MAG/BpzB,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,6BAA6BgI,MAAOhU,EAAQmD,EAASqO,KACpE,MAAM,KAAE2Y,GAAS3Y,EAGjB,UADqBoD,EAAAA,EAAAA,IAAQ,4BAA6BuV,GAExD,OAGFnqB,GAASqL,EAAAA,EAAAA,MAET,MAAQ,CAAC8e,GAAOuT,KAAoBC,GAAgB39B,EAAOs+B,kBAAkBhB,OAE7Et9B,EAAS,IACJA,EACHs+B,kBAAmB,CACjBhB,OAAQK,EACRH,cAAex9B,EAAOs+B,kBAAkBd,cAAc17B,QAAQ87B,GAAOA,IAAOzT,OAGhFlf,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,iCAAiCgI,gBAC3BY,EAAAA,EAAAA,IAAQ,mCAK7B5U,GAASqL,EAAAA,EAAAA,MAETrL,EAAS,IACJA,EACHs+B,kBAAmB,CACjBhB,OAAQ,CAAC,EACTE,cAAe,MAGnBvyB,EAAAA,EAAAA,IAAUjL,GAAO,I,gBCvMnB,MAEMu+B,IAAwBtU,EAAAA,EAAAA,KAAUlW,GAAOA,KAAM,KAAK,IAE1D/H,EAAAA,EAAAA,IAAiB,gBAAgBgI,MAAOhU,EAAQmD,EAASqO,KACvD,MAAM,OAAE0K,EAAM,WAAEsiB,GAAehtB,EACzB6C,GAAOC,EAAAA,EAAAA,KAAWtU,EAAQkc,GAChC,IAAK7H,EACH,OAGF,MAAM,GAAE/R,EAAE,WAAEskB,GAAevS,EACrBuB,QAAehB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEtS,KAAIskB,eACpD,IAAKhR,GAAQvB,KAAM,OAEnBrU,GAASqL,EAAAA,EAAAA,MACT,MAAMqb,GAAWC,EAAAA,EAAAA,KAAmB3mB,EAAQkc,IACpC7H,KAAMoqB,EAAS/X,SAAUgY,GAAgB9oB,EAC3C+oB,GAAgBC,EAAAA,EAAAA,KAAiB5+B,EAAQkc,GAKzC2iB,EAJmBxqB,EAAKyqB,gBAAkBL,EAAQK,eACzBpY,GAAUqY,cAAcz8B,KAAOo8B,GAAaK,cAAcz8B,IACzDokB,GAAUsY,eAAe18B,KAAOo8B,GAAaM,eAAe18B,IAC5DokB,GAAUuY,eAAe38B,KAAOo8B,GAAaO,eAAe38B,GAM5FtC,GAASk/B,EAAAA,EAAAA,KAAWl/B,EAAQkc,EAAQtG,EAAOvB,MAC3CrU,GAAS8jB,EAAAA,EAAAA,KAAmB9jB,EAAQkc,EAAQtG,EAAO8Q,UACnD1mB,GAASo8B,EAAAA,EAAAA,KAAYp8B,GAAQ8O,EAAAA,EAAAA,IAAqB8G,EAAOymB,MAAO,OAChEr8B,GAASm8B,EAAAA,EAAAA,KAAYn8B,GAAQ8O,EAAAA,EAAAA,IAAqB8G,EAAO3M,MAAO,QAEhEgC,EAAAA,EAAAA,IAAUjL,IACNw+B,GAAeG,GAAe7oB,OAAS+oB,IACzC17B,EAAQm2B,sBAAsB,CAAEt3B,OAAQka,EAAQqd,uBAAuB,GACzE,KAGFvtB,EAAAA,EAAAA,IAAiB,YAAYgI,MAAOhU,EAAQmD,EAASqO,KACnD,MAAM,OAAE0K,GAAW1K,EACb6C,GAAOC,EAAAA,EAAAA,KAAWtU,EAAQkc,GAChC,IAAK7H,EACH,OAGF,MAAMuB,QAAehB,EAAAA,EAAAA,IAAQ,aAAc,CAAEynB,MAAO,CAAChoB,KACrD,IAAKuB,EACH,OAGF,MAAM,MAAEymB,EAAK,iBAAE1J,GAAqB/c,EAEpC5V,GAASqL,EAAAA,EAAAA,MACTrL,GAASo8B,EAAAA,EAAAA,KAAYp8B,GAAQ8O,EAAAA,EAAAA,IAAqButB,EAAO,OACzDr8B,GAASspB,EAAAA,EAAAA,KAAoBtpB,EAAQ,IAChCA,EAAOq8B,MAAM8C,gBACbxM,KAEL1nB,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,gBAAgBgI,UAC/B,MAAQorB,UAAU,gBAAEC,IAAsBr/B,EAE1C,GAAOq/B,MAAmBC,EAAAA,GAAAA,MAAkBD,EAhEX,IAiE/B,OAGF,MAAMzpB,QAAehB,EAAAA,EAAAA,IAAQ,iBAC7B,IAAKgB,EACH,OAGF,MAAM,IAAE5L,GAAQ4L,EAEhB5V,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHo/B,SAAU,IACLp/B,EAAOo/B,SACVzjB,QAAS3R,EACTq1B,iBAAiBC,EAAAA,GAAAA,SAGrBr0B,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,mBAAmBgI,UAClC,MAAMurB,QAAoB3qB,EAAAA,EAAAA,IAAQ,oBAClC,IAAK2qB,EACH,OAGFv/B,GAASqL,EAAAA,EAAAA,MACTrL,GAAS4yB,EAAAA,EAAAA,KAAgB5yB,EAAQu/B,EAAY5M,kBAG7C,MAAM6M,EAAoBnrB,GAAmBA,EAAKorB,UAAYprB,EAAKqrB,WAAa,GAC1EC,EAAW,IAAIC,KAAKC,SAAS,SAE7BC,EAAcP,EAAYlD,MAAM33B,MAAK,CAACC,EAAGC,IAC7C+6B,EAASI,QAAQP,EAAiB76B,GAAI66B,EAAiB56B,MACtD9C,QAAQuS,IAAUA,EAAK2rB,SAE1BhgC,EAAS,IACJA,EACHu/B,YAAa,CACX5jB,QAASmkB,EAAYrxB,KAAK4F,GAASA,EAAK/R,QAG5C2I,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,mBAAmB,MAC7B4I,EAAAA,EAAAA,IAAQ,mBAAmB,KAGlC5I,EAAAA,EAAAA,IAAiB,mBAAmBgI,MAAOhU,EAAQmD,EAASqO,KAC1D,MAAM,OAAE0K,GAAW1K,EACb6C,GAAOC,EAAAA,EAAAA,KAAWtU,EAAQkc,GAC1B+jB,GAAcC,EAAAA,EAAAA,KAAsBlgC,EAAQkc,GAClD,IAAK7H,IAAQ+K,EAAAA,EAAAA,KAAU/K,IAAS4rB,GAAaE,cAC3C,OAGF,MAAMvqB,QAAehB,EAAAA,EAAAA,IAAQ,mBAAoBP,EAAM4rB,GAAalwB,OACpE,IAAK6F,EACH,OAGF,MAAM,QAAEwqB,EAAO,MAAEtqB,GAAUF,EAErB5L,GAAM+B,EAAAA,EAAAA,KAAQk0B,GAAaj2B,KAAO,IAAI0G,OAAO0vB,IAEnDpgC,GAASqL,EAAAA,EAAAA,MACTrL,GAASqgC,EAAAA,EAAAA,KAAsBrgC,EAAQqU,EAAK/R,GAAI,CAC9CyN,MAAOqwB,EAAQv+B,OAASu+B,EAAQA,EAAQv+B,OAAS,QAAK2H,EACtDQ,MACAm2B,cAAen2B,EAAInI,QAAUiU,KAG/B7K,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,iBAAiBgI,MAAOhU,EAAQmD,EAASqO,KACxD,MAAM,OACJ0K,EAAM,QAAEokB,GAAU,EAAK,UAAEZ,EAAS,SAAED,EAAQ,uBAAEc,EAAsB,MACpEr8B,GAAQC,EAAAA,EAAAA,OACNqN,EAEE6C,GAAOC,EAAAA,EAAAA,KAAWtU,EAAQkc,GAChC,IAAK7H,EACH,OASF,IAAIuB,EACJ,GAPAzS,EAAQq9B,qBAAqB,CAAEp/B,OAAQ8a,EAAQokB,YAE/CtgC,GAASqL,EAAAA,EAAAA,MACTrL,GAASk3B,EAAAA,EAAAA,KAAyBl3B,EAAQ62B,EAAAA,GAAmBC,WAAY5yB,IACzE+G,EAAAA,EAAAA,IAAUjL,IAGLqU,EAAKosB,WAAapsB,EAAKqsB,YAC1B9qB,QAAehB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE+rB,MAAOtsB,EAAKqsB,YAAahB,YAAWD,iBACzE,CACL,MAAM,GAAEn9B,EAAE,WAAEskB,GAAevS,EAC3BuB,QAAehB,EAAAA,EAAAA,IAAQ,gBAAiB,CACtCtS,KACAskB,aACA8Z,YAAa,GACbhB,YACAD,WACAc,0BAEJ,CAEI3qB,IACFzS,EAAQy9B,iBAAiB,CAAEx/B,OAAQ8a,IACnC/Y,EAAQ09B,gBAAgB,CAAE7+B,OAAQka,IAElClc,GAASqL,EAAAA,EAAAA,MACTrL,GAASk/B,EAAAA,EAAAA,KACPl/B,EACAqU,EAAK/R,GACL,CACEo9B,YACAD,cAGJx0B,EAAAA,EAAAA,IAAUjL,IAGZA,GAASqL,EAAAA,EAAAA,MACTrL,GAASk3B,EAAAA,EAAAA,KAAyBl3B,EAAQ62B,EAAAA,GAAmBM,SAAUjzB,GACvElE,GAAS8gC,EAAAA,EAAAA,KAAsB9gC,EAAQkE,IACvC+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,iBAAiBgI,MAAOhU,EAAQmD,EAASqO,KACxD,MAAM,OAAE0K,GAAW1K,EAEb6C,GAAOC,EAAAA,EAAAA,KAAWtU,EAAQkc,GAEhC,IAAK7H,EACH,OAGF,MAAM,GAAE/R,EAAE,WAAEskB,GAAevS,QAErBO,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEtS,KAAIskB,cAAa,KAGpD5a,EAAAA,EAAAA,IAAiB,yBAAyBgI,MAAOhU,EAAQmD,EAASqO,KAChE,MAAM,OAAExP,EAAM,sBAAEu3B,EAAqB,UAAEwH,GAAcvvB,EAC/CwvB,GAAYjwB,EAAAA,EAAAA,KAAS/O,GAErBqS,EAAO2sB,GAAY1sB,EAAAA,EAAAA,KAAWtU,EAAQgC,QAAUwH,EAChDpG,EAAQ49B,OAAyCx3B,GAA7B/B,EAAAA,EAAAA,KAAWzH,EAAQgC,GACvCuc,EAAOlK,GAAQjR,EACfu7B,GAAgBC,EAAAA,EAAAA,KAAiB5+B,EAAQgC,GAC/C,IAAKuc,GAAMugB,cACT,OAGF,GAAIH,IAAkBpF,IAA0BwH,IAAcpC,EAAcle,YAAa,OAEzFzgB,GAASihC,EAAAA,EAAAA,KAA0BjhC,EAAQgC,GAAQ,IACnDiJ,EAAAA,EAAAA,IAAUjL,GAEVA,GAASqL,EAAAA,EAAAA,MAET,IAAI61B,GAAeva,EAAAA,EAAAA,KAAmB3mB,EAAQgC,GAC1C4Z,GAAeC,EAAAA,EAAAA,KAAmB7b,EAAQgC,GAC9C,GAAIqS,IAAS6sB,EAAc,CACzB,MAAM,GAAE5+B,EAAE,WAAEskB,GAAevS,EACrBuB,QAAehB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEtS,KAAIskB,eACpD,IAAKhR,GAAQvB,KACX,OAEF6sB,EAAetrB,EAAO8Q,QACxB,CAEA,GAAItjB,IAASwY,EAAc,CACzB,MAAMhG,QAAehB,EAAAA,EAAAA,IAAQ,gBAAiBxR,GAC9C,IAAKwS,GAAQ8Q,SACX,OAGF9K,EAAehG,EAAO8Q,QACxB,CAEA,MAAMya,EAAeD,GAAgBtlB,EACrC,IAAKulB,EAAc,OAEnB,MAAMjhB,EAASye,GAAele,WACxB5K,GAASqK,GAAU6gB,GAAaxH,EAhQA,QAgQ0D/vB,EAE1FoM,QAAehB,EAAAA,EAAAA,IAAQ,qBAAsB,CACjD2J,OACA2B,SACArK,UAEF,IAAKD,IAAWA,EAAOwrB,OACrB,OAGFphC,GAASqL,EAAAA,EAAAA,MAET,MAAM,OACJ+1B,EAAM,MAAEtrB,EAAK,aAAEqb,GACbvb,EAEJ5V,GAASqhC,EAAAA,EAAAA,KAAiBrhC,EAAQgC,EAAQ,CACxCs/B,UAAWF,EACXtrB,QACA2K,WAAY0Q,EACZzK,SAAUya,EACV5H,2BAGFtuB,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,MAAE0Z,EAAK,MAAEhnB,GAAQC,EAAAA,EAAAA,OAAsBqN,EAExC0Z,GAEAqT,IAAsBvqB,UACzB,MAAM4B,QAAehB,EAAAA,EAAAA,IAAQ,cAAe,CAAEsW,UAE9ClrB,GAASqL,EAAAA,EAAAA,MACT,MAAM+kB,GAAqBlwB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOq9B,WAAWrW,MAEpE,IAAKtV,IAAWwa,GAAuBlF,IAAUkF,EAG/C,OAFApwB,GAASwhC,EAAAA,EAAAA,KAA+BxhC,GAAQ,EAAOkE,QACvD+G,EAAAA,EAAAA,IAAUjL,GAIZ,MAAM,iBACJuwB,EAAgB,gBAAEC,GAChB5a,EAEE6rB,EAAelR,EAAiBzuB,OAAOiP,EAAAA,KACvC2wB,EAAgBlR,EAAgB1uB,OAAOiP,EAAAA,KAE7C/Q,GAASwhC,EAAAA,EAAAA,KAA+BxhC,GAAQ,EAAOkE,GACvDlE,GAAS2hC,EAAAA,EAAAA,KAAiB3hC,EAAQ,CAAEyhC,eAAcC,iBAAiBx9B,IAEnE+G,EAAAA,EAAAA,IAAUjL,EAAO,GACjB,KAGJgM,EAAAA,EAAAA,IAAiB,iBAAiBgI,MAAOhU,EAAQmD,EAASqO,KACxD,MACEkvB,YAAaC,EAAK,UAAEjB,EAAS,SAAED,EAAQ,MACvCv7B,GAAQC,EAAAA,EAAAA,OACNqN,EAEEoE,QAAehB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE+rB,QAAOjB,YAAWD,aAC7D7pB,GASLzS,EAAQua,SAAS,CAAEpb,GAAIsT,EAAQ1R,UAE/BlE,GAASqL,EAAAA,EAAAA,MACTrL,GAAS8gC,EAAAA,EAAAA,KAAsB9gC,EAAQkE,IACvC+G,EAAAA,EAAAA,IAAUjL,IAZRmD,EAAQiM,iBAAiB,CACvBpO,QAASmtB,EAAAA,GAA0B,qCACnCjqB,SAUa,KAGnB8H,EAAAA,EAAAA,IAAiB,cAAc,CAAChM,EAAQmD,EAASqO,KAC/C,MAAM,OAAEpQ,GAAWoQ,EACb+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQoB,GAC3Bmd,IAIA3J,EAAAA,EAAAA,IAAQ,aAAc2J,EAAK,KAGlCvS,EAAAA,EAAAA,IAAiB,kBAAkBgI,MAAOhU,EAAQmD,EAASqO,KACzD,MAAM,cACJowB,EAAa,kBAAEC,EAAiB,QAAEC,EAAO,MAAE59B,GAAQC,EAAAA,EAAAA,OACjDqN,EAGJ,KAD6ByP,EAAAA,EAAAA,KAA2BjhB,GAgBtD,OAdI6hC,GACF1+B,EAAQ4+B,gBAAgB,CACtBC,UAAWH,EACXI,MAAO,CACLC,UAAW,sBACXC,UAAW,CACT/uB,MAAO,kBAGXlP,eAIJf,EAAQqgB,iBAAiB,CAAEC,eAAgB,eAAgBvf,UAI7D,MAAM0R,QAAehB,EAAAA,EAAAA,IAAQ,oBAAqBgtB,EAAeE,GAEjE,GAAID,EAAmB,CACrB,IAAKjsB,EAWH,YAVAzS,EAAQ4+B,gBAAgB,CACtBC,UAAWH,EACXI,MAAO,CACLC,UAAW,sBACXC,UAAW,CACT/uB,MAAO,iBAGXlP,UAKJf,EAAQ4+B,gBAAgB,CACtBC,UAAWH,EACXI,MAAO,CACLC,UAAW,oBAEbh+B,UAEFf,EAAQiM,iBAAiB,CACvBpO,QAAS,CACPqO,IAAK,6BAEP+yB,kBAAmBR,EACnB19B,SAEJ,MAGF8H,EAAAA,EAAAA,IAAiB,oBAAoBgI,MAAOhU,EAAQmD,EAASqO,KAC3D,MAAM,QAAEmK,GAAYnK,QAECoD,EAAAA,EAAAA,IAAQ,mBAAoB+G,KAKjD3b,GAASqL,EAAAA,EAAAA,MACTrL,EAAOu/B,aAAa5jB,QAAQzZ,SAASga,IACnC,MAAM,cAAEmmB,GAAkBriC,EAAOq8B,MAAMnzB,KAAKgT,IAAW,CAAC,EACpDmmB,IAAkB1mB,EAAQrX,SAAS4X,KACrClc,GAASk/B,EAAAA,EAAAA,KAAWl/B,EAAQkc,EAAQ,CAClCmmB,mBAAe74B,IAEnB,IAEFmS,EAAQzZ,SAASga,IACflc,GAASk/B,EAAAA,EAAAA,KAAWl/B,EAAQkc,EAAQ,CAClCmmB,eAAe,GACf,KAEJp3B,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,4BAA4BgI,MAAOhU,EAAQmD,EAASqO,KACnE,MAAM,cACJ8wB,EAAa,SAAEC,EAAQ,MAAEC,EAAK,UAAER,EAAS,MAAE99B,GAAQC,EAAAA,EAAAA,OACjDqN,EAEEkR,QAAoB9N,EAAAA,EAAAA,IAAQ,mBAAoB,CACpD4N,WAAY,CAAC8f,KAEV5f,IAAc,IAgBnB1iB,GAASqL,EAAAA,EAAAA,MACTrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9ByiC,qBAAsB,CACpBH,gBACAC,WACAP,YACAQ,UAEDt+B,IACH+G,EAAAA,EAAAA,IAAUjL,IAxBJgiC,GACF7+B,EAAQ4+B,gBAAgB,CACtBC,YACAC,MAAO,CACLC,UAAW,sBACXC,UAAW,CACT/uB,MAAO,4BAGXlP,SAeW,IC1fnB,MAAMw+B,GAAkB5qB,EAAAA,IAAU6qB,EAAAA,GAEnB,MAAMC,GAGnBC,WAAAA,CAAoBC,EAA2BC,G,YAA6B,KAAxDD,SAAAA,EAAiB,KAAUC,OAAAA,E,EAA2B,K,OAAA,G,iQAAA,c,iGAC1E,CAEAC,eAAAA,GACON,KAELO,KAAKC,UAAY7d,OAAOC,KAAK,mBAAe9b,EAAWy5B,KAAKH,UACxDG,KAAKC,UACPD,KAAKC,UAAUC,OAEfF,KAAKF,WAET,CAEAzd,IAAAA,CAAKjB,GACH,GAAI4e,KAAKC,UAKP,OAJAD,KAAKC,UAAWE,SAAS7d,KAAOlB,EAChC4e,KAAKC,UAAWG,aAChBJ,KAAKC,eAAY15B,GAKnB,IAAKk5B,GAAiB,CACpB,MAAMY,EAAQje,OAAOC,KAAKjB,OAAK7a,EAAWy5B,KAAKH,UAC3CQ,EACFA,EAAMD,QAENJ,KAAKF,UAET,CACF,CAEAQ,aAAAA,GACEN,KAAKC,WAAWM,QAChBP,KAAKC,eAAY15B,CACnB,E,wCChCK,SAASi6B,GACdzjC,EAAWorB,EAAkBsY,MACzBx/B,GAAQC,EAAAA,EAAAA,QAEZ,MAAMwJ,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B2jC,WAAY,IACPh2B,EAASg2B,WACZC,WAAY,IACPj2B,EAASg2B,WAAWC,WACvB,CAACxY,GAAWsY,KAGfx/B,EACL,CAEO,SAAS2/B,GACd7jC,EAAWgvB,MACP9qB,GAAQC,EAAAA,EAAAA,QAEZ,OAAOyJ,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B2jC,WAAY,KACPzjC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOy/B,WACjC3U,cAED9qB,EACL,CAEO,SAAS4/B,GACd9jC,EAAWqP,EAAa00B,MACpB7/B,GAAQC,EAAAA,EAAAA,QAEZ,MAAM6/B,GAAkB9jC,EAAAA,EAAAA,KAAeF,EAAQkE,GACzC+/B,EAAgBD,EAAgBE,QAAQD,cAExCE,EAAiBF,EAAc50B,GAErC,IAAK80B,EAAgB,OAAOnkC,EAE5B,MAAMokC,EAAe,IAChBD,KACAJ,GAGCM,GAAmBC,EAAAA,GAAAA,IAAaF,GACtC,OAAKC,EAELrkC,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BkkC,QAAS,IACJF,EAAgBE,QACnBD,cAAe,IACVA,EACH,CAACI,GAAmBD,KAGvBlgC,GAV2BlE,CAahC,CAyBO,SAASukC,GACdvkC,EAAWwkC,EACXC,GAAsB,EAAMC,GAA8B,MACtDxgC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM6/B,GAAkB9jC,EAAAA,EAAAA,KAAeF,EAAQkE,GAEzCmL,GAAMi1B,EAAAA,GAAAA,IAAaE,GAEzB,IAAKn1B,EAAK,OAAOrP,EACjB,MAAM2kC,EAAgB,IAAIX,EAAgBE,QAAQU,mBAC7CD,EAAcrgC,SAAS+K,IAAMs1B,EAAcj5B,KAAK2D,GAErD,MAAMw1B,EAAiB,IAAIb,EAAgBE,QAAQY,aAC9CD,EAAevgC,SAAS+K,IAAMw1B,EAAen5B,KAAK2D,GAEvD,MAAM40B,EAAgBD,EAAgBE,QAAQD,cAkB9C,OAhBSr2B,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BkkC,QAAS,IACJF,EAAgBE,WAChBO,GAAc,CAAEM,gBAAiB11B,GACpC21B,qBAAqB,EACrBC,YAAaP,EACbQ,WAAY,YACZjB,cAAe,IACVA,EACH,CAAC50B,GAAMm1B,GAETI,kBAAmBD,EACnBG,YAAaD,IAEd3gC,EAGL,CAaO,SAASihC,GACdnlC,EAAWqP,EAAa+1B,MACpBlhC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM6/B,GAAkB9jC,EAAAA,EAAAA,KAAeF,EAAQkE,IACzC,cAAE+/B,EAAa,kBAAEW,EAAiB,gBAAEG,GAAoBf,EAAgBE,QACxEM,EAASP,EAAc50B,GAC7B,IAAKm1B,EAAQ,OAAOxkC,EAEpB,IAAKolC,GAA2BZ,EAAOa,qBACrC,OAAOvB,GAAa9jC,EAAQqP,EAAK,CAAEi2B,kBAAkB,GAAQphC,GAG/D,MAAMqhC,EAAuB,IAAKtB,GAC5BuB,GAAoBlB,EAAAA,GAAAA,IAAaE,GAEvC,IAAIG,EAAgBC,EAEhBY,WACKD,EAAqBC,GAC5Bb,EAAgBC,EAAkB9iC,QAAQ2jC,GAAMA,IAAMD,KAGxD,MAAME,EAAqBX,KAAoBT,EAAAA,GAAAA,IAAaE,GAEtDmB,EAAoB39B,OAAOuG,KAAKg3B,GAChCK,EAAqBD,EAAkB9jC,OAiB7C,OAfS+L,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BkkC,QAAS,IACJF,EAAgBE,WAChBwB,GAAsB,CACvBX,gBAAiBa,EACbD,EAAkBC,EAAqB,QAAKp8B,GAElDy6B,cAAesB,EACfX,kBAAmBD,MACfiB,GAAsB,CACxBd,YAAa,MAGhB5gC,EAGL,CAuDO,SAAS2hC,GACd7lC,MAAekE,GAAQC,EAAAA,EAAAA,QAEvB,OAAO6D,OAAOuG,MAAKrO,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOggC,QAAQD,eAAepiC,OAAS,CACnF,CAqBO,SAASikC,GACd9lC,EAAW+lC,MACP7hC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM6/B,GAAkB9jC,EAAAA,EAAAA,KAAeF,EAAQkE,GAC/C,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BkkC,QAAS,IACJF,EAAgBE,QACnBe,YAAac,IAEd7hC,EACL,CCtNA,MAEM8hC,IAAwBlyB,EAAAA,EAAAA,KAAUC,GAAOA,KAAM,KAAK,GAC1D,IAAIkyB,GAqoCAC,GArTG,SAASC,GACdnmC,EAAWwiC,EAAet+B,EAAekiC,EAAqBC,GAE9D,MAAMC,EAAiB,CAAE9D,QAAO4D,aAAYC,cAC5C,GAdK,SACLrmC,EAAWwkC,EAAyBtgC,GAEpC,MACM+/B,GADkB/jC,EAAAA,EAAAA,KAAeF,EAAQkE,GACTggC,QAAQD,cACxC50B,GAAMi1B,EAAAA,GAAAA,IAAaE,GACzB,QAAKn1B,GACE40B,EAAc50B,EACvB,CAMMk3B,CAAevmC,EAAQsmC,EAAgBpiC,GAAQ,CACjD,MAAMmL,GAAMi1B,EAAAA,GAAAA,IAAagC,GAKzB,OAJIj3B,IACFrP,EDl1BC,SACLA,EAAWgiC,MACP99B,GAAQC,EAAAA,EAAAA,QAEZ,MAAM6/B,GAAkB9jC,EAAAA,EAAAA,KAAeF,EAAQkE,GAG/C,OAFsB8/B,EAAgBE,QAAQD,cAE3BjC,GAInBhiC,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BkkC,QAAS,IACJF,EAAgBE,QACnBc,qBAAqB,EACrBD,gBAAiB/C,EACjBkD,WAAY,cAEbhhC,GAVMlE,CAaX,CC6zBewmC,CAAqBxmC,EAAQqP,EAAKnL,IAC3C+G,EAAAA,EAAAA,IAAUjL,KAEL,CACT,CACA,OAAO,CACT,CA8LA,SAASymC,GACPzmC,EACAmD,EACAkhB,EAAazO,MACT1R,GAAQC,EAAAA,EAAAA,QAEZ,GAAoB,YAAhByR,EAAOxT,KAAoB,CAC7BpC,GAASqL,EAAAA,EAAAA,MACT,MAAMsC,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,IAAKyJ,EAAS+4B,QAAS,OACvB,MAAM,OAAEC,EAAM,IAAEC,EAAG,yBAAEC,GAA6BjxB,EAYlD,OAXA5V,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B0mC,QAAS,IACJ/4B,EAAS+4B,QACZI,QAAS,CACPH,SACAnE,MAAOoE,EAAItkC,GACXukC,8BAGH3iC,QACH+G,EAAAA,EAAAA,IAAUjL,EAEZ,CAEA,MAAM+mC,EAA0B,aAAhBnxB,EAAOxT,KAAsBwT,EAAOyO,IAAMA,EAC1DgB,OAAOC,KAAKyhB,EAAS,SAAU,YAC/B5jC,EAAQ6jC,kBAAkB,CAAE9iC,SAC9B,CAkEA8P,eAAeizB,GACb7jC,EAAe8jC,EAAiBvgC,EAAsCiT,EAAkBvS,SAElFuN,EAAAA,EAAAA,IAAQ,cAAe,CAC3BxR,OACAuD,YACA0H,KAAM64B,EACNttB,SACAvS,iBAEJ,CAIA2M,eAAemzB,GACbnnC,EACAmD,EAAgCC,EAAe+D,EAAmB6f,EAAeogB,GAAS,MACtFljC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM,WACJ4iB,EAAU,iBAAE3X,EAAgB,QAAEi4B,EAAO,SAAEC,GACrCnkC,EAEAikC,IACGlB,KACHA,GAAc,IAAItD,GAAa,8BAA8B,KAC3DxzB,EAAiB,CAAEpO,QAAS,qCAAsCkD,SAAQ,KAI9EgiC,GAAYlD,mBAGd,MAAMptB,QAAehB,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDxT,OAAQgC,EAAKd,GACbskB,WAAYxjB,EAAKwjB,WACjBzf,YACA6f,OACAogB,WAGF,IAAKxxB,EACH,OAEF,MAAM,QAAE5U,EAASumC,MAAOC,EAAO,IAAEnjB,GAAQzO,EAErC4xB,EACFzgB,EAAW,CAAEC,KAAM,CAAEhmB,QAASA,GAAW,SAAWkD,UAC3ClD,EACToO,EAAiB,CAAEpO,UAASkD,UACnBmgB,IACL+iB,EAEE/iB,EAAI/f,SAjrCI,6BAkrCV4hC,GAAa5gB,KAAKjB,IAElB6hB,GAAa3C,gBACb+D,EAAS,CACPjjB,MAAKjjB,OAAQgC,EAAKd,GAAI6E,YAAWjD,WAIrCmjC,EAAQ,CAAEhjB,MAAKngB,UAGrB,EAxrCA8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,OACJpQ,EAAM,UAAE+F,EAAS,OAAEsgC,EAAM,MAAEvjC,GAAQC,EAAAA,EAAAA,OACjCqN,EACEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BJ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ+F,GAClD,GAAK/D,GAASpC,EAId,OAAQymC,EAAOrlC,MACb,IAAK,UACHe,EAAQ8jC,eAAe,CAAEC,QAASO,EAAOp5B,KAAMnK,UAC/C,MACF,IAAK,MAAO,CACV,MAAM,IAAEmgB,GAAQojB,EAChBtkC,EAAQkkC,QAAQ,CAAEhjB,MAAKngB,UACvB,KACF,CACA,IAAK,QACHwjC,EAAAA,EAAAA,IAAoBD,EAAOE,UAC3BxkC,EAAQiM,iBAAiB,CAAEpO,SAASqb,EAAAA,EAAAA,IAAa,kBAAmBorB,EAAOE,UAAWzjC,UACtF,MAEF,IAAK,WACEijC,GAAqBnnC,EAAQmD,EAASC,EAAM+D,EAAWsgC,EAAOzgB,UAAMxd,EAAWtF,GACpF,MAEF,IAAK,cACHf,EAAQykC,cAAc,CAAEC,OAAQJ,EAAOI,OAAQ3jC,UAC/C,MACF,IAAK,eAAgB,CACnB,MAAMmQ,EAAOrU,EAAOiC,eAAgBqS,EAAAA,EAAAA,KAAWtU,EAAQA,EAAOiC,oBAAiBuH,EAC/E,IAAK6K,EACH,OAEFlR,EAAQ4jB,WAAW,CACjBC,KAAM,CACJ0Z,YAAarsB,EAAKqsB,YAClBhB,UAAWrrB,EAAKqrB,WAAa,GAC7BD,SAAUprB,EAAKorB,UAAY,GAC3BvjB,OAAQ7H,EAAK/R,IAEf4B,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAM,iBAAE4jC,GAAqBL,EAC7BtkC,EAAQ4kC,WAAW,CACjB3mC,OAAQgC,EAAKd,GAAI6E,UAAW2gC,EAAkB5jC,UAEhD,KACF,CACA,IAAK,MACHf,EAAQ6kC,YAAY,CAClB5lC,KAAM,UACNhB,OAAQgC,EAAKd,GACb6E,YACAjD,UAEF,MAEF,IAAK,OACEijC,GAAqBnnC,EAAQmD,EAASC,EAAM+D,OAAWqC,GAAW,EAAMtF,GAC7E,MAEF,IAAK,kBAAmB,CACtB,MAAM,MAAEgnB,EAAK,WAAE+c,GAAeR,EAC9BtkC,EAAQ+kC,gBAAgB,CACtBhd,QAAO+c,aAAY9gC,YAAWjD,UAEhC,KACF,CAEA,IAAK,cAAe,CAClB,MAAM,OAAEgY,GAAWurB,EACnBtkC,EAAQglC,iBAAiB,CAAE7lC,GAAI4Z,EAAQhY,UACvC,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,IAAEmgB,GAAQojB,EACVW,GAASC,EAAAA,EAAAA,KAAaroC,EAAQgB,GACpC,IAAKonC,EACH,OAGF,MAAME,GAAQC,EAAAA,GAAAA,KACdplC,EAAQqlC,qBAAqB,CAC3BnkB,MAAKme,MAAO4F,EAAO9lC,GAAIgmC,QAAOG,WAAYhB,EAAOp5B,KAAMnK,UAEzD,KACF,CAEA,IAAK,UAAW,CACd,MAAM,IAAEmgB,GAAQojB,EACVW,GAASC,EAAAA,EAAAA,KAAaroC,EAAQgB,GAC9BwhC,EAAQxhC,EAAQ0nC,UAAYN,GAAQ9lC,GAC1C,IAAKkgC,EACH,OAEF,MAAM8F,GAAQC,EAAAA,GAAAA,KACdplC,EAAQwlC,eAAe,CACrBtkB,MACAme,QACAxgC,OAAQoB,EAAKd,GACbgmC,QACAG,WAAYhB,EAAOp5B,KACnBnK,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAM,IAAEmgB,GAAQojB,EAChBtkC,EAAQylC,kBAAkB,CACxBxnC,OAAQgC,EAAKd,GACb6E,YACA0hC,SAAUpB,EAAOoB,SACjBxkB,MACAngB,UAEF,KACF,EACF,KAGF8H,EAAAA,EAAAA,IAAiB,kBAAkB,CAAChM,EAAQmD,EAASqO,KACnD,MAAM,QAAE01B,EAAO,OAAE9lC,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsBqN,EACjDpO,EAAOhC,GAASqG,EAAAA,EAAAA,KAAWzH,EAAQoB,IAAUye,EAAAA,EAAAA,KAAkB7f,EAAQkE,GACvE0I,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAE5D,IAAKd,IAASwJ,EACZ,OAGF,MAAM,SAAE9E,GAAa8E,EACrBzJ,EAAQ2lC,oBAAoB,CAAE5kC,UAC9Bf,EAAQ0W,oBAAoB,CAAE3V,UAE9B,MAAMmD,GAAgB+B,EAAAA,EAAAA,KAAwBpJ,EAAQoD,EAAKd,IAEtD2kC,GACH7jC,EAAM8jC,GAAS7tB,EAAAA,EAAAA,KAAYrZ,EAAQoD,EAAKd,GAAIwF,IAAWnB,WAAWjF,EAAAA,EAAAA,KAAa1B,EAAQoD,EAAKd,IAAK+E,EAClG,KAGH2E,EAAAA,EAAAA,IAAiB,cAAcgI,MAAOhU,EAAQmD,EAASqO,KACrD,MAAM,OAAEpQ,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsBqN,GACxC,cAAEvP,GAAkBjC,EACpBoD,GAAOyc,EAAAA,EAAAA,KAAkB7f,EAAQkE,GACjC0iC,EAAM3kC,IAAiB8mC,EAAAA,EAAAA,KAAU/oC,EAAQoB,GAC/C,IAAKa,IAAkBmB,IAASwjC,EAC9B,OAGF,MAAMv/B,GAAgB+B,EAAAA,EAAAA,KAAwBpJ,EAAQoD,EAAKd,UAEtCsS,EAAAA,EAAAA,IAAQ,cAAe,CAAEP,KAAMuyB,MAKpD5mC,GAASqL,EAAAA,EAAAA,MACTrL,GAASgpC,EAAAA,EAAAA,KAAkBhpC,EAAQ4mC,EAAItkC,KACvC2I,EAAAA,EAAAA,IAAUjL,GACLinC,GAAe7jC,EAAM,cAAUoG,GAAW9H,EAAAA,EAAAA,KAAa1B,EAAQoB,GAASiG,GAAc,KAG7F2E,EAAAA,EAAAA,IAAiB,qBAAqBgI,UACpC,MAAM,gBAAEqrB,GAAoBr/B,EAAOipC,cACnC,GAAI5J,IAAmBC,EAAAA,GAAAA,MAAkBD,EA/KR,GAgL/B,OAGF,MAAMzpB,QAAehB,EAAAA,EAAAA,IAAQ,sBAC7B,IAAKgB,EACH,OAGF,MAAM,IAAE5L,GAAQ4L,EAEhB5V,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHipC,cAAe,IACVjpC,EAAOipC,cACVttB,QAAS3R,EACTq1B,iBAAiBC,EAAAA,GAAAA,SAGrBr0B,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,kBAAkBgI,UACjC,MAAM,gBAAEqrB,GAAoBr/B,EAAOkpC,WACnC,GAAI7J,IAAmBC,EAAAA,GAAAA,MAAkBD,EAxMR,GAyM/B,OAGF,MAAMzpB,QAAehB,EAAAA,EAAAA,IAAQ,mBAC7B,IAAKgB,EACH,OAGF,MAAM,IAAE5L,GAAQ4L,EAEhB5V,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHkpC,WAAY,IACPlpC,EAAOkpC,WACVvtB,QAAS3R,EACTq1B,iBAAiBC,EAAAA,GAAAA,SAGrBr0B,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,kBAAkBgI,MAAOhU,EAAQmD,EAASqO,KACzD,MAAM,OACJpQ,EAAM,SAAEgqB,EAAQ,MAAEF,EAAK,OAAEhL,EAAM,MAC/Bhc,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,IAAI23B,GAAgBjpC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOy/B,WAAWC,WAAWxY,GACxE,IAAsB,IAAlB+d,EAAJ,CAIA,QAAsB3/B,IAAlB2/B,EAA6B,CAC/B,MAAQ90B,KAAM+0B,EAAS,KAAEhmC,SAAewR,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEwW,cAAe,CAAC,EAEpF,GADAprB,GAASqL,EAAAA,EAAAA,OACJ+9B,IAAchmC,EAGjB,OAFApD,EAASyjC,GAAyBzjC,EAAQorB,GAAU,EAAOlnB,QAC3D+G,EAAAA,EAAAA,IAAUjL,GAIZmpC,EAAgB,CACd7mC,GAAI8mC,EAAU9mC,GACd4oB,MAAO,GACPhL,OAAQ,GACRmpB,cAAU7/B,EACV8/B,aAAa,EACb/nC,QAAS,GACTgoC,UAAW,GAGbvpC,EAASyjC,GAAyBzjC,EAAQorB,EAAU+d,EAAejlC,IACnE+G,EAAAA,EAAAA,IAAUjL,EACZ,EAEIkrB,IAAUie,EAAcje,OAAUie,EAAcG,cAI/CtD,IAAsB,MAszB7BhyB,eAAsDhU,GAAW,SAC/DorB,EAAQ,cACR+d,EAAa,OACb/nC,EAAM,MACN8pB,EAAK,OACLhL,OAOKhc,GAAQC,EAAAA,EAAAA,QACbnE,GAASqL,EAAAA,EAAAA,MACT,MAAMu7B,GAAMtyB,EAAAA,EAAAA,KAAWtU,EAAQmpC,EAAc7mC,IACvCc,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKwlC,IAAQxjC,EACX,OAGF,MAAMomC,EAAwBL,EAAcje,QAAUA,EAEtDlrB,EAASyjC,GADTzjC,EAAS6jC,GAA2B7jC,GAAQ,EAAMkE,GACRknB,EAAU,IAC/C+d,EACHje,WACIse,GAAyB,CAAEtpB,YAAQ1W,EAAWjI,QAAS,KAC1D2C,IACH+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAM4V,QAAehB,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDgyB,MACAxjC,OACA8nB,QACAhL,OAAQspB,OAAwBhgC,EAAY0W,IAG9ClgB,GAASqL,EAAAA,EAAAA,MACT,MAAMo+B,GAAmBvpC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOy/B,WAAWC,WAAWxY,GAE7E,GADAprB,EAAS6jC,GAA2B7jC,GAAQ,EAAOkE,IAC9C0R,IAAW6zB,GAAoBve,IAAUue,EAAiBve,MAE7D,YADAjgB,EAAAA,EAAAA,IAAUjL,GAIZ,MAAM0pC,EAAa,IAAIx/B,KAAKu/B,EAAiBloC,SAAW,IAAIkN,KAAKuY,GAASA,EAAK1kB,MACzEqnC,EAAa/zB,EAAOrU,QAAQO,QAAQklB,IAAU0iB,EAAW9+B,IAAIoc,EAAK1kB,MAExEtC,EAASyjC,GAAyBzjC,EAAQorB,EAAU,IAC/Cqe,EACHG,KAAMh0B,EAAOg0B,KACbL,UAAW9mC,KAAKC,MAA2B,IAAnBkT,EAAO2zB,aAC3BI,EAAW9nC,QAAU,CAAEgoC,UAAWj0B,EAAOi0B,cACzCj0B,EAAOyzB,UAAY,CAAEA,SAAUzzB,EAAOyzB,aACtCzzB,EAAOk0B,eAAiB,CAAEA,cAAel0B,EAAOk0B,eACpDR,YAAa1zB,EAAOrU,QAAQM,OAAS,GAAK0W,QAAQ3C,EAAO6K,YACzDlf,QAAqC,KAA5BkoC,EAAiBvpB,QAAiBupB,EAAiBvpB,SAAWtK,EAAO6K,WAC1E7K,EAAOrU,SACNkoC,EAAiBloC,SAAW,IAAImP,OAAOi5B,GAC5CzpB,OAAQypB,EAAW9nC,OAAS+T,EAAO6K,WAAa,IAC/Cvc,IAEH+G,EAAAA,EAAAA,IAAUjL,EACZ,CAn3BI+pC,CAAgB/pC,EAAQ,CACtBorB,WACA+d,cAAeA,EACf/nC,SACA8pB,QACAhL,UACChc,EAAM,GApCX,CAqCE,KAGJ8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,MACJ0Z,EAAK,WAAE+c,EAAU,UAAE9gC,EAAS,OAAErF,EAAM,MAAEoC,GAAQC,EAAAA,EAAAA,OAC5CqN,EACJ,IAAI,MACFgxB,GACEhxB,EACJ,MAAMpO,GAAOyc,EAAAA,EAAAA,KAAkB7f,EAAQkE,GACvC,IAAKd,EACH,OAGF,IAAKo/B,GAASr7B,EAAW,CACvB,MAAMnG,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoD,EAAKd,GAAI6E,GACnD,IAAKnG,EACH,OAEF,MAAMonC,GAASC,EAAAA,EAAAA,KAAaroC,EAAQgB,GACpCwhC,EAAQxhC,EAAQ0nC,UAAYN,GAAQ9lC,EACtC,CAEA,IAAKkgC,EACH,OAGF,MAAMwH,GAAY11B,EAAAA,EAAAA,KAAWtU,EAAQwiC,GAChCwH,GAIL7mC,EAAQ8mC,kBAAkB,CACxB57B,KAAM,CACJA,KAAO,IAAG27B,EAAUE,UAAW,GAAG9e,YAAYF,KAEhD9pB,OAAQ6mC,EAAa7kC,EAAKd,QAAKkH,EAC/B1H,SACAoC,SAEc,KAGlB8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,GACJlP,EAAE,QAAE6nC,EAAO,SAAEjtB,EAAQ,YAAE/D,EAAW,YAAEJ,EAAW,MAC/C7U,GAAQC,EAAAA,EAAAA,OACNqN,EACJ,IAAKlP,EACH,OAGF,MAAM,OAAElB,EAAM,SAAE0G,GAAaiR,EACvB3V,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BoY,GAAiBH,EAAAA,EAAAA,KAAYrZ,EAAQoB,EAAQ0G,IAAWnB,UAExDA,GAAY6N,EAAAA,EAAAA,KAAuBxU,EAAQoB,EAAQ0G,EAAU0R,GAEnErW,EAAQ2lC,oBAAoB,CAAE5kC,UAC9Bf,EAAQ0W,oBAAoB,CAAE3V,WAEzB0Q,EAAAA,EAAAA,IAAQ,sBAAuB,CAClCxR,OACAgnC,SAAU9nC,EACV6nC,UACAxjC,YACAiT,QAAQlY,EAAAA,EAAAA,KAAa1B,EAAQoB,GAC7B8b,WACAmtB,aAAclxB,GACd,KAGJnN,EAAAA,EAAAA,IAAiB,kBAAkB,CAAChM,EAAQmD,EAASqO,KACnD,MAAM,SAAE4Z,EAAQ,MAAEpiB,EAAK,MAAE9E,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEvD,IAAI23B,GAAgBjpC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOy/B,WAAWC,WAAWxY,GAEnE+d,KAIAngC,GAASvG,KAAKC,MAAQymC,EAAcI,YAEzCJ,EAAgB,CACd7mC,GAAI6mC,EAAc7mC,GAClB4oB,MAAO,GACPhL,OAAQ,GACRmpB,cAAU7/B,EACV8/B,aAAa,EACb/nC,QAAS,GACTgoC,UAAW,GAGbvpC,EAASyjC,GAAyBzjC,EAAQorB,EAAU+d,EAAejlC,IACnE+G,EAAAA,EAAAA,IAAUjL,IAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5CmyB,GAAazjC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOy/B,WAAWC,WAE5D57B,OAAOuG,KAAKo1B,GAAYzhC,SAASkpB,IAC/BjoB,EAAQmnC,eAAe,CAAElf,WAAUlnB,SAAQ,GAC3C,KAGJ8H,EAAAA,EAAAA,IAAiB,YAAYgI,MAAOhU,EAAQmD,EAASqO,KACnD,MAAM,MAAEgxB,EAAK,MAAE+H,GAAU/4B,EAEnBo1B,GAAMtyB,EAAAA,EAAAA,KAAWtU,EAAQwiC,GAC/B,IAAKoE,EACH,OAGF,IAAIlgB,GAAWC,EAAAA,EAAAA,KAAmB3mB,EAAQwiC,GAC1C,IAAK9b,EAAU,CACb,MAAM9Q,QAAehB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEtS,GAAIskC,EAAItkC,GAAIskB,WAAYggB,EAAIhgB,aAC5EF,EAAW9Q,GAAQ8Q,QACrB,CAEIA,GAAU8jB,iBACN51B,EAAAA,EAAAA,IAAQ,cAAe,CAAEP,KAAMuyB,UAGjChyB,EAAAA,EAAAA,IAAQ,WAAY,CACxBgyB,MACA6D,WAAYF,GACZ,KAGJv+B,EAAAA,EAAAA,IAAiB,qBAAqBgI,MAAOhU,EAAQmD,EAASqO,KAC5D,MAAM,MAAEgxB,GAAUhxB,EACZo1B,GAAMtyB,EAAAA,EAAAA,KAAWtU,EAAQwiC,GAC/B,IAAKoE,EACH,OAGF,IAAIlgB,GAAWC,EAAAA,EAAAA,KAAmB3mB,EAAQwiC,GAC1C,IAAK9b,EAAU,CACb,MAAM9Q,QAAehB,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEtS,GAAIskC,EAAItkC,GAAIskB,WAAYggB,EAAIhgB,aAC5EF,EAAW9Q,GAAQ8Q,QACrB,CAEIA,GAAU8jB,iBACN51B,EAAAA,EAAAA,IAAQ,cAAe,CAAEP,KAAMuyB,IAGvC5mC,GAASqL,EAAAA,EAAAA,MACT,MAAMjI,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQwiC,GAC1BkI,GAAcp2B,EAAAA,EAAAA,KAAWtU,EAAQA,EAAOiC,eAE9C,IAAKmB,EAAM,OACX,MAAMiE,GAAgB+B,EAAAA,EAAAA,KAAwBpJ,EAAQoD,EAAKd,UAErDsS,EAAAA,EAAAA,IAAQ,cAAe,CAC3BxR,OACAunC,QAAS,CACP73B,UAAW,UACX4sB,UAAWgL,EAAYhL,WAAa,GACpCD,SAAUiL,EAAYjL,UAAY,GAClCiB,YAAagK,EAAYhK,aAAe,GACxCxkB,OAAQwuB,EAAYpoC,IAEtB+E,iBACA,KAGJ2E,EAAAA,EAAAA,IAAiB,wBAAwBgI,MAAOhU,EAAQmD,EAASqO,KAC/D,MAAM,IACJ6S,EAAG,MAAEme,EAAK,MAAE8F,EAAK,WAAEG,EAAU,eAAEmC,EAAc,oBAAEC,EAAmB,WAAEJ,EAAU,MAC9EvmC,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,GAAI20B,GAAsBnmC,EAAQwiC,EAAOt+B,EAAOmgB,GAAM,OAEtD,MAAMuiB,GAAMtyB,EAAAA,EAAAA,KAAWtU,EAAQwiC,GAC/B,IAAKoE,EAAK,OAEV,KAAKkE,EAAAA,EAAAA,KAAmB9qC,EAAQwiC,GAY9B,OAXAxiC,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B+qC,gBAAiB,CACfvI,QACApgC,KAAM,SACN4oC,UAAW,CACT1gC,OAAQ,uBACRkH,aAGHtN,QACH+G,EAAAA,EAAAA,IAAUjL,GAIZ,MAAMirC,QAAmBr2B,EAAAA,EAAAA,IAAQ,uBAAwB,CACvDyP,MACAuiB,MACA0B,QACAmC,aACAG,iBACAC,wBAEGI,IAYLjrC,EAASukC,GARTvkC,GAASqL,EAAAA,EAAAA,MACoB,CAC3B+6B,WAAY/hB,EACZ6mB,QAAStE,EAAIlH,UACbrb,IAAK4mB,EACLzI,QACAiG,eAEiD,GAAM,EAAMvkC,IAC/D+G,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,kBAAkBgI,MAAOhU,EAAQmD,EAASqO,KACzD,MAAM,IACJ6S,EAAG,MAAEme,EAAK,OAAExgC,EAAM,MAAEsmC,EAAK,SAAEprB,EAAQ,WAAEurB,EAAU,cAAE0C,EAAa,WAAEV,EAAU,aAAElnB,EAAY,MACxFrf,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,GAAI20B,GAAsBnmC,EAAQwiC,EAAOt+B,EAAOmgB,GAAM,OAEtD,MAAMuiB,GAAMtyB,EAAAA,EAAAA,KAAWtU,EAAQwiC,GAC/B,IAAKoE,EAAK,OACV,MAAMroB,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EAAM,OAEX,KAAKusB,EAAAA,EAAAA,KAAmB9qC,EAAQwiC,GAY9B,OAXAxiC,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B+qC,gBAAiB,CACfvI,QACApgC,KAAM,SACN4oC,UAAW,CACT1gC,OAAQ,iBACRkH,aAGHtN,QACH+G,EAAAA,EAAAA,IAAUjL,GAIZ,MAAM4M,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAEtD,OAAE9C,EAAM,SAAE0G,EAAWD,EAAAA,IAAmB+E,GAAsB,CAAC,EAC/D4M,EAAiBpY,GAASiY,EAAAA,EAAAA,KAAYrZ,EAAQoB,EAAQ0G,IAAWnB,eAAY6C,EAC7E7C,EAAYvF,GAASoT,EAAAA,EAAAA,KAAuBxU,EAAQoB,EAAQ0G,EAAU0R,QAAkBhQ,EAExFoQ,EAASxY,GAASM,EAAAA,EAAAA,KAAa1B,EAAQoB,QAAUoI,EACjDoM,QAAehB,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7CyP,MACAuiB,MACAroB,OACA+pB,QACAprB,WACAvW,YACAwkC,gBACAV,aACA7wB,SACA2J,iBAEF,IAAK3N,EACH,OAGF,MAAQyO,IAAK4mB,EAAU,QAAEd,EAAO,aAAEiB,GAAiBx1B,EAanD5V,EAASukC,GAXTvkC,GAASqL,EAAAA,EAAAA,MACoB,CAC3B+6B,WAAY/hB,EACZA,IAAK4mB,EACLC,QAAStE,EAAIlH,UACb8C,QACAxgC,SACAmoC,UACAxjC,YACA8hC,eAEiD,GAAM,EAAMvkC,IAC/D+G,EAAAA,EAAAA,IAAUjL,GAENorC,IAAgBC,EAAAA,EAAAA,OAClBloC,EAAQmoC,uBAAuB,CAAEC,MAAO,aAAcrnC,SACxD,KAGF8H,EAAAA,EAAAA,IAAiB,sBAAsBgI,MAAOhU,EAAQmD,EAASqO,KAC7D,MAAM,MACJgxB,EAAK,OAAExgC,EAAM,MAAEsmC,EAAK,WAAEmC,EAAU,KAAEe,EAAI,qBAAEC,EAAoB,MAC5DvnC,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,GAAI20B,GAAsBnmC,EAAQwiC,EAAOt+B,GAAQ,OAEjD,MAAM0iC,GAAMtyB,EAAAA,EAAAA,KAAWtU,EAAQwiC,GAC/B,IAAKoE,EAAK,OACV,MAAMroB,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EAAM,OAEX,KAAKusB,EAAAA,EAAAA,KAAmB9qC,EAAQwiC,GAAQ,CACtC,IAAIiJ,EAcF,OAXAzrC,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B+qC,gBAAiB,CACfvI,QACApgC,KAAM,SACN4oC,UAAW,CACT1gC,OAAQ,qBACRkH,aAGHtN,QACH+G,EAAAA,EAAAA,IAAUjL,GAZVmD,EAAQuoC,eAAe,CAAElJ,QAAOmJ,gBAAgB,EAAMznC,SAe1D,CAEA,MAAM0R,QAAehB,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDgyB,MACAroB,OACA+pB,QACAmC,aACAe,SAEF,IAAK51B,EACH,OAGF,MAAQyO,IAAK4mB,EAAU,QAAEd,EAAO,aAAE5mB,GAAiB3N,EAWnD5V,EAASukC,GATTvkC,GAASqL,EAAAA,EAAAA,MACoB,CAC3BgZ,IAAK4mB,EACLC,QAAStE,EAAIlH,UACb8C,QACAxgC,SACAmoC,UACA1B,WAAY,KAEqC,GAAM,EAAMvkC,IAC/D+G,EAAAA,EAAAA,IAAUjL,GAENujB,IAAgB8nB,EAAAA,EAAAA,OAClBloC,EAAQmoC,uBAAuB,CAAEC,MAAO,aAAcrnC,SACxD,KAGF8H,EAAAA,EAAAA,IAAiB,qBAAqBgI,MAAOhU,EAAQmD,EAASqO,KAC5D,MAAM,MACJgxB,GACEhxB,EACEo1B,GAAMtyB,EAAAA,EAAAA,KAAWtU,EAAQwiC,GAC/B,IAAKoE,EAAK,OAEV,MAAMgF,QAAeh3B,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDgyB,QAGF5mC,GAASqL,EAAAA,EAAAA,MACLugC,IACF5rC,EAAS,IACJA,EACHq8B,MAAO,IACFr8B,EAAOq8B,MACVwP,oBAAqB,IAChB7rC,EAAOq8B,MAAMwP,oBAChB,CAACrJ,GAAQoJ,MAKf3gC,EAAAA,EAAAA,IAAUjL,GACZ,KAGFgM,EAAAA,EAAAA,IAAiB,qCAAqC,CAAChM,EAAQmD,EAASqO,KACtE,MAAM,MACJtN,GAAQC,EAAAA,EAAAA,OACNqN,GAAW,CAAC,EAEhB,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B8rC,qCAAqC,GACpC5nC,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,sCAAsC,CAAChM,EAAQmD,EAASqO,KACvE,MAAM,mBAAEu6B,EAAkB,MAAE7nC,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAatE,OAXAxR,EAAS,IACJA,EACHm5B,SAAU,IACLn5B,EAAOm5B,SACV6S,MAAO,IACFhsC,EAAOm5B,SAAS6S,MACnBC,kCAAmC1zB,QAAQwzB,OAK1Cn+B,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B8rC,yCAAqCtiC,GACpCtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,qBAAqBgI,MAAOhU,EAAQmD,EAASqO,KAC5D,MAAM,MACJgxB,EAAK,QAAE0I,EAAO,SAAEgB,EAAQ,KAAEV,EAAI,MAAElD,EAAK,eAAEqD,EAAc,cAAEQ,EAAa,0BAAEC,EAAyB,MAC/FloC,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,GAAI20B,GAAsBnmC,EAAQwiC,EAAOt+B,EAAOgnC,GAAU,OAE1D,MAAMtE,GAAMtyB,EAAAA,EAAAA,KAAWtU,EAAQwiC,GAC/B,IAAKoE,EAAK,OAGV,MAAMyF,EAAuB9zB,QAAQvY,EAAOssC,WAAWC,KAAK3F,EAAItkC,KAChE,GAAIskC,EAAI4F,cAAgBL,IAAkBE,EAAsB,CAC9D,MAAMz2B,QAAehB,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5CgyB,QAEF,GAAIhxB,EAAQ,CACV5V,GAASqL,EAAAA,EAAAA,MAET,MAAMohC,EAAY72B,EAAOgxB,IAGzB,GAFwB6F,EAAUC,oBAAsBD,EAAUE,iBAAmBF,EAAUG,cAgB7F,OAbA5sC,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B6sC,0BAA2B,CACzBjG,IAAK6F,EACLzB,UAAW,CACT1gC,OAAQ,oBACRkH,QAAS,IACJA,EACH26B,eAAe,MAIpBjoC,QACH+G,EAAAA,EAAAA,IAAUjL,EAGd,CACF,CAEA,MAAM8sC,QAAel4B,EAAAA,EAAAA,IAAQ,cAAe,CAC1CgyB,MACAsE,YAIF,GAFAlrC,GAASqL,EAAAA,EAAAA,OAEJyhC,EAEH,YADA3pC,EAAQiM,iBAAiB,CAAEpO,SAASqb,EAAAA,EAAAA,IAAa,8BAA+BnY,UAMlF,IAF+BkoC,IAA8BU,EAAOC,cAAejC,EAAAA,EAAAA,KAAmB9qC,EAAQwiC,IAgB5G,OAbAhxB,EAAQ46B,2BAA4B,EACpCpsC,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B+qC,gBAAiB,CACfvI,QACAqE,yBAA0BiG,EAAOjG,yBACjCzkC,KAAM,SACN4oC,UAAW,CACT1gC,OAAQ,oBACRkH,aAGHtN,QACH+G,EAAAA,EAAAA,IAAUjL,GAIZ,MAAMue,GAAOsB,EAAAA,EAAAA,KAAkB7f,EAAQkE,IAEjC,IAAEmgB,EAAG,aAAEd,SAAuB3O,EAAAA,EAAAA,IAAQ,oBAAqB,CAC/D2J,KAAMA,GAAQqoB,EACdoG,IAAKF,EACLrC,WAAYyB,EACZV,OACAG,iBACArD,UAIF,GAFAtoC,GAASqL,EAAAA,EAAAA,OAEJgZ,EAAK,OAEVrkB,GAASqL,EAAAA,EAAAA,MAET,MAAMrJ,EAAUuc,EAAOA,EAAKjc,GAAKskC,EAAKtkC,GAStCtC,EAASukC,GAAoBvkC,EAPA,CAC3BqkB,MACA6mB,QAASA,GAAWtE,EAAIlH,UACxB19B,SACAwgC,QACAiG,WAAY,KAEqC,GAAM,EAAMvkC,IAC/D+G,EAAAA,EAAAA,IAAUjL,GAENujB,IAAgB8nB,EAAAA,EAAAA,OAClBloC,EAAQmoC,uBAAuB,CAAEC,MAAO,aAAcrnC,SACxD,KAGF8H,EAAAA,EAAAA,IAAiB,kBAAkBgI,MAAOhU,EAAQmD,EAASqO,KACzD,MAAM,MACJgxB,EAAK,OAAExgC,EAAM,SAAEkb,EAAQ,UAAEvW,EAAS,QAAEwjC,EAAO,MAAEjmC,GAAQC,EAAAA,EAAAA,OACnDqN,EAEEo1B,GAAMtyB,EAAAA,EAAAA,KAAWtU,EAAQwiC,GAC/B,IAAKoE,EAAK,OACV,MAAMroB,GAAO9W,EAAAA,EAAAA,KAAWzH,EAAQgC,GAChC,IAAKuc,EAAM,OAEX,MAAM3E,GAASlY,EAAAA,EAAAA,KAAa1B,EAAQgC,SAEf4S,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7CgyB,MACAroB,OACArB,WACAvW,YACAwjC,UACAvwB,YAIAzW,EAAQ8pC,kBAAkB,CAAE/oC,SAC9B,KAGF8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,IACJo1B,EAAG,KAAE5f,EAAI,WAAEyhB,GACTj3B,GAEJoD,EAAAA,EAAAA,IAAQ,kBAAmB,CACzBgyB,MACA5f,OACAyhB,cACA,KAGJz8B,EAAAA,EAAAA,IAAiB,kBAAkBgI,gBA4CnCA,eAAqDhU,EAAWmqB,GAC9D,MAAMvU,QAAehB,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEuV,UA5C3C+iB,IA6CN,GAAKt3B,EAcL,OAVA5V,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHssC,WAAY,CACVniB,KAAMvU,EAAOuU,KACboiB,KAAM32B,EAAO22B,QAGjBthC,EAAAA,EAAAA,IAAUjL,GAEH4V,CACT,CA5DQs3B,CAAeltC,IAErBmtC,EAAAA,GAAAA,GAAqB,CACnB7iC,OAAQ,iBACRkH,aAAShI,GACR4jC,EAAAA,IAAyB,KAG9BphC,EAAAA,EAAAA,IAAiB,mBAAmBgI,MAAOhU,EAAQmD,EAASqO,KAC1D,MAAM,MAAEgxB,EAAK,eAAEmJ,EAAc,UAAE0B,GAAc77B,EAEvCo1B,GAAMtyB,EAAAA,EAAAA,KAAWtU,EAAQwiC,GAE1BoE,SAEChyB,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEgyB,MAAK+E,iBAAgB0B,aAAY,KA+CtErhC,EAAAA,EAAAA,IAAiB,iBAAiB,CAAChM,EAAQmD,EAASqO,KAClD,MAAM,IACJo1B,EAAG,WAAE6D,EAAU,cAAE0B,EAAa,MAAEjoC,GAAQC,EAAAA,EAAAA,OACtCqN,EACEo5B,EAAiB,mBAAoBp5B,GAAWA,EAAQo5B,eAExDO,GAAiBvE,EACjB0G,GAA4BnC,IAAkBnrC,EAAOssC,WAAWC,KAAK3F,EAAItkC,KAC1EskC,GAAKmG,YAAcnG,GAAK8F,mBAE7B,IAAKP,GAAiBmB,EACpB,OAAO1/B,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B6sC,0BAA2B,CACzBjG,MACAoE,UAAW,CACT1gC,OAAQ,gBACRkH,QAAS,IACJA,EACH26B,eAAe,MAIpBjoC,GAGL,MAAMokC,GAAQC,EAAAA,GAAAA,KAYd,GAXIqC,GACFznC,EAAQqlC,qBAAqB,CAC3BhG,MAAOoE,EAAKtkC,GACZmmC,WAAY,GACZmC,gBAAgB,EAChBH,aACAnC,QACApkC,UAIA,WAAYsN,EAAS,CACvB,MAAM,OAAEpQ,EAAM,SAAE0G,EAAWD,EAAAA,GAAc,IAAEwc,GAAQ7S,EACnDrO,EAAQkjB,WAAW,CAAEjlB,SAAQ0G,WAAU5D,UACvCf,EAAQwlC,eAAe,CACrBtkB,MACAriB,OAAQZ,EACRohC,MAAQ2I,EAAgB/pC,EAASwlC,EAAItkC,GACrCgmC,QACAG,WAAY,GACZ0C,gBACAV,aACAvmC,SAEJ,CAEgB,KAGlB8H,EAAAA,EAAAA,IAAiB,2BAA2BgI,MAAOhU,EAAQmD,EAASqO,KAClE,MAAM,eAAEm6B,EAAc,MAAEznC,GAAQC,EAAAA,EAAAA,OAAsBqN,GAChD,0BAAEq7B,IAA8B3sC,EAAAA,EAAAA,KAAeF,EAAQkE,IAEvD,IAAE0iC,EAAG,UAAEoE,GAAc6B,EAE3B7sC,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B6sC,+BAA2BrjC,GAC1BtF,IACH+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAMutC,GAAUj5B,EAAAA,EAAAA,KAAWtU,EAAQ4mC,EAAItkC,IACvC,GAAKirC,IAELpqC,EAAQuoC,eAAe,CAAElJ,MAAOoE,EAAItkC,GAAIqpC,iBAAgBznC,gBAClD0Q,EAAAA,EAAAA,IAAQ,kBAAmB,CAAEgyB,IAAK2G,EAAS5B,iBAAgB0B,WAAW,IACxErC,GAAW,CACb,MAAM,OAAE1gC,EAAQkH,QAASg8B,GAAkBxC,EAE3C7nC,EAAQmH,GAAQkjC,EAClB,MAGFxhC,EAAAA,EAAAA,IAAiB,qBAAqBgI,MAAOhU,EAAQmD,EAASqO,KAC5D,MAAM,OACJpQ,EAAM,SAAEynC,EAAQ,UAAE1hC,EAAS,IAAEkd,EAAG,MAAEngB,GAAQC,EAAAA,EAAAA,OACxCqN,EAEEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMwS,QAAehB,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDxR,OACAylC,WACA1hC,cAGGyO,IACL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B0mC,QAAS,CACPriB,MACAojB,OAAQ,CACNoB,WACA1hC,YACA/F,OAAQgC,EAAKd,MAGhB4B,IACH+G,EAAAA,EAAAA,IAAUjL,GACVymC,GAAoBzmC,EAAQmD,EAASkhB,EAAKzO,EAAQ1R,GAAM,KAG1D8H,EAAAA,EAAAA,IAAiB,oBAAoBgI,MAAOhU,EAAQmD,EAASqO,KAC3D,MAAM,eAAEm6B,EAAc,MAAEznC,GAAQC,EAAAA,EAAAA,OAAsBqN,EAChD7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,IAAKyJ,EAAS+4B,SAASe,OAAQ,OAC/B,MAAM,OACJA,EAAM,IAAEpjB,GACN1W,EAAS+4B,SACP,OAAEtlC,EAAM,UAAE+F,EAAS,SAAE0hC,GAAapB,EAElCrkC,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EACH,OAGF,MAAMwS,QAAehB,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/CxR,OACA+D,YACA0hC,WACA8C,mBAEG/1B,GAEL6wB,GADAzmC,GAASqL,EAAAA,EAAAA,MACmBlI,EAASkhB,EAAKzO,EAAQ1R,EAAM,KAG1D8H,EAAAA,EAAAA,IAAiB,sBAAsBgI,MAAOhU,EAAQmD,EAASqO,KAC7D,MAAM,IAAE6S,EAAG,MAAEngB,GAAQC,EAAAA,EAAAA,OAAsBqN,EAErCoE,QAAehB,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEyP,QAChDzO,IACL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B0mC,QAAS,CACPriB,QAEDngB,IACH+G,EAAAA,EAAAA,IAAUjL,GACVymC,GAAoBzmC,EAAQmD,EAASkhB,EAAKzO,EAAQ1R,GAAM,KAG1D8H,EAAAA,EAAAA,IAAiB,qBAAqBgI,MAAOhU,EAAQmD,EAASqO,KAC5D,MAAM,eAAEm6B,EAAc,MAAEznC,GAAQC,EAAAA,EAAAA,OAAsBqN,EAChD7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,IAAKyJ,EAAS+4B,SAASriB,IAAK,OAC5B,MAAM,IAAEA,GAAQ1W,EAAS+4B,QAEnB9wB,QAAehB,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEyP,MAAKsnB,mBACpD/1B,GAEL6wB,GADAzmC,GAASqL,EAAAA,EAAAA,MACmBlI,EAASkhB,EAAKzO,EAAQ1R,EAAM,KAG1D8H,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B0mC,aAASl9B,GACRtF,EAAM,KAoKX8H,EAAAA,EAAAA,IAAiB,cAAcgI,MAAOhU,EAAQmD,EAASqO,KACrD,MAAM,IACJo1B,EAAG,KAAE6G,EAAMrvB,YAAasvB,EAAK,MAC7BxpC,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,IAAI,SAAEm8B,GAAan8B,EACdm8B,IAAUA,EAAW3tC,EAAOm5B,SAAS6S,MAAMnd,UAEhD,MAAM,cAAE5sB,GAAkBjC,EACrBiC,GAAkB2kC,IAIvB5mC,GAASqL,EAAAA,EAAAA,MACTrL,GAASk3B,EAAAA,EAAAA,KAAyBl3B,EAAQ62B,EAAAA,GAAmBC,WAAY5yB,IACzE+G,EAAAA,EAAAA,IAAUjL,IAENytC,GAAQC,UACW94B,EAAAA,EAAAA,IAAQ,aAAc,CACzCgyB,MAAK+G,WAAUF,OAAMC,YAIrB1tC,GAASqL,EAAAA,EAAAA,MACTrL,GAASk/B,EAAAA,EAAAA,KACPl/B,EACA4mC,EAAItkC,GACJ,CACEo9B,UAAW+N,IAGfztC,GAAS8jB,EAAAA,EAAAA,KAAmB9jB,EAAQ4mC,EAAItkC,GAAI,CAAEsrC,IAAKF,KACnDziC,EAAAA,EAAAA,IAAUjL,IAIdA,GAASqL,EAAAA,EAAAA,MACTrL,GAASk3B,EAAAA,EAAAA,KAAyBl3B,EAAQ62B,EAAAA,GAAmBM,SAAUjzB,IACvE+G,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,8BAA8BgI,MAAOhU,EAAQmD,EAASqO,KACrE,MAAM,MACJ+4B,EAAK,MACLrmC,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,IAAKy0B,GAAa,CAChB,MAAM7iC,QAAayqC,EAAAA,EAAAA,IAAoB7tC,EAAQ8tC,EAAAA,KAC/C,IAAK1qC,EACH,OAEF6iC,GAAc7iC,EAAKd,EACrB,CAEIioC,GACFpnC,EAAQ4qC,SAAS,CAAEvL,MAAOyD,GAAasE,UAGzCpnC,EAAQua,SAAS,CAAEpb,GAAI2jC,GAAa/hC,SAAQ,I,UCpzC9C8H,EAAAA,EAAAA,IAAiB,oBAAoBgI,UACnC,MAAM4B,QAAehB,EAAAA,EAAAA,IAAQ,mBACxBgB,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAASsnB,EAAAA,EAAAA,KAAgBtnB,EAAQ,CAAEguC,YAAap4B,EAAOo4B,cACvDhuC,GAASiuC,EAAAA,EAAAA,KAAoBjuC,EAAQ,CAAEkuC,KAAMt4B,EAAOs4B,QACpDjjC,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,iBAAiBgI,MAAOhU,EAAQmD,EAASqO,KACxD,MAAM,gBAAE28B,EAAe,UAAEC,GAAc58B,EAEvCxR,GAASiuC,EAAAA,EAAAA,KAAoBjuC,EAAQ,CAAEgvB,WAAW,EAAM5b,WAAO5J,KAC/DyB,EAAAA,EAAAA,IAAUjL,GAEV,MAAMquC,QAAkBz5B,EAAAA,EAAAA,IAAQ,gBAAiBu5B,GAEjDnuC,GAASqL,EAAAA,EAAAA,MACTrL,GAASiuC,EAAAA,EAAAA,KAAoBjuC,EAAQ,CAAEgvB,WAAW,KAClD/jB,EAAAA,EAAAA,IAAUjL,GAENquC,GACFD,GACF,KAGFpiC,EAAAA,EAAAA,IAAiB,iBAAiBgI,MAAOhU,EAAQmD,EAASqO,KACxD,MAAM,gBAAE28B,EAAe,UAAEC,GAAc58B,EAEvCxR,GAASiuC,EAAAA,EAAAA,KAAoBjuC,EAAQ,CAAEgvB,WAAW,EAAM5b,WAAO5J,KAC/DyB,EAAAA,EAAAA,IAAUjL,GAEV,MAAMquC,QAAkBz5B,EAAAA,EAAAA,IAAQ,gBAAiBu5B,GAEjDnuC,GAASqL,EAAAA,EAAAA,MACTrL,GAASiuC,EAAAA,EAAAA,KAAoBjuC,EAAQ,CAAEgvB,WAAW,KAClD/jB,EAAAA,EAAAA,IAAUjL,GAENquC,GACFD,GACF,KAGFpiC,EAAAA,EAAAA,IAAiB,kBAAkBgI,MAAOhU,EAAQmD,EAASqO,KACzD,MAAM,gBACJ28B,EAAe,SAAEG,EAAQ,KAAEJ,EAAI,MAAEK,EAAK,UAAEH,GACtC58B,EAEJxR,GAASiuC,EAAAA,EAAAA,KAAoBjuC,EAAQ,CAAEgvB,WAAW,EAAM5b,WAAO5J,KAC/DyB,EAAAA,EAAAA,IAAUjL,GAEV,MAAMquC,QAAkBz5B,EAAAA,EAAAA,IAAQ,iBAAkBu5B,EAAiBG,EAAUJ,EAAMK,GAEnFvuC,GAASqL,EAAAA,EAAAA,MACTrL,GAASiuC,EAAAA,EAAAA,KAAoBjuC,EAAQ,CAAEgvB,WAAW,KAClD/jB,EAAAA,EAAAA,IAAUjL,GAENquC,GACFD,GACF,KAGFpiC,EAAAA,EAAAA,IAAiB,uBAAuBgI,MAAOhU,EAAQmD,EAASqO,KAC9D,MAAM,gBACJ28B,EAAe,MAAEI,EAAK,UAAEH,GACtB58B,EAEJxR,GAASiuC,EAAAA,EAAAA,KAAoBjuC,EAAQ,CAAEgvB,WAAW,EAAM5b,WAAO5J,KAC/DyB,EAAAA,EAAAA,IAAUjL,GAEV,MAAMquC,QAAkBz5B,EAAAA,EAAAA,IAAQ,sBAAuBu5B,EAAiBI,GAExEvuC,GAASqL,EAAAA,EAAAA,MACTrL,GAASiuC,EAAAA,EAAAA,KAAoBjuC,EAAQ,CAAEgvB,WAAW,EAAOwf,4BAAwBhlC,KACjFyB,EAAAA,EAAAA,IAAUjL,GAENquC,GACFD,GACF,KAGFpiC,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,KAAEi9B,GAASj9B,GAEZoD,EAAAA,EAAAA,IAAQ,2BAA4B65B,EAAK,KAGhDziC,EAAAA,EAAAA,IAAiB,mBAAoBhM,IAC5BiuC,EAAAA,EAAAA,KAAoBjuC,EAAQ,CAAEoT,WAAO5J,MC/F9C,MAAMklC,GAA+C,CACnDC,4BAA6B,CAC3BC,MAAO,aACP5tC,QAAS,yBAEX6tC,eAAgB,CACdD,MAAO,aACP5tC,QAAS,yBAEX8tC,OAAQ,CACNF,MAAO,aACP5tC,QAAS,yBAEX+tC,SAAU,CACRH,MAAO,SACP5tC,QAAS,kBAEXguC,UAAW,CACTJ,MAAO,SACP5tC,QAAS,mBAEXiuC,oBAAqB,CACnBL,MAAO,SACP5tC,QAAS,kBAEXkuC,qBAAsB,CACpBN,MAAO,SACP5tC,QAAS,mBAEXmuC,IAAK,CACHP,MAAO,MACP5tC,QAAS,iBAEXouC,YAAa,CACXR,MAAO,MACP5tC,QAAS,kB,iBCWbgL,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,YAAE69B,EAAW,SAAEC,EAAQ,MAAEprC,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEvD+9B,GAAeC,EAAAA,EAAAA,KAA0BxvC,EAAQkE,GACvD,IAAKqrC,EACH,OAGF,MAAME,GAAsBC,EAAAA,GAAAA,IAAuB1vC,EAAQuvC,GACtDE,GAiiBPz7B,eACEhU,EAAWuvC,EAAsCF,EAAkBM,MAC/DzrC,GAAQC,EAAAA,EAAAA,QAEZ,MAAMyR,QAAehB,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD26B,eAAcF,cAAaM,eAE7B,IAAK/5B,EACH,OAGF,MAAM,GAAEtT,EAAE,gBAAEstC,GAAoBh6B,EAChC5V,GAASqL,EAAAA,EAAAA,MAETrL,GAAS6vC,EAAAA,EAAAA,KAAiB7vC,EAAQsC,EAAI4B,GAClC0rC,GAAiB/tC,QACnB7B,GAAS8vC,EAAAA,EAAAA,KAAsB9vC,EAAQ4vC,EAAiB1rC,GACxDlE,GAAS+vC,EAAAA,EAAAA,KAAe/vC,EAAQgwC,EAAAA,GAAYC,SAAU/rC,IAEtDlE,GAAS+vC,EAAAA,EAAAA,KAAe/vC,EAAQgwC,EAAAA,GAAYE,SAAUhsC,IAExD+G,EAAAA,EAAAA,IAAUjL,EACZ,CAnjBEmwC,CAAsBnwC,EAAQyvC,EAAqBJ,EAAaC,EAAUprC,EAAM,KAGlF8H,EAAAA,EAAAA,IAAiB,eAAegI,MAAOhU,EAAQmD,EAASqO,KACtD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,SAAsBorC,GAAiB/9B,EAEjDi+B,GAAsBC,EAAAA,GAAAA,IAAuB1vC,EAAQuvC,GAC3D,IAAKE,EACH,OAGFzvC,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BowC,sBAAsB,GACrBlsC,IACH+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAMsoC,GAAQC,EAAAA,GAAAA,KACR8H,QAAaz7B,EAAAA,EAAAA,IAAQ,iBAAkB66B,EAAqBnH,GAE7D+H,IAILrwC,GAASqL,EAAAA,EAAAA,MAETrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BowC,sBAAsB,GACrBlsC,GAEC,UAAWmsC,IAKG,YAAdA,EAAKjuC,OACPpC,GAASswC,EAAAA,EAAAA,KAActwC,EAAQ,CAC7BuvC,aAAc/9B,EACd6+B,OACAE,oBAAoB,EACpBC,gBAAkBh/B,EAAgBg/B,gBAClCC,YAAQjnC,GACPtF,GACHlE,GAAS+vC,EAAAA,EAAAA,KAAe/vC,EAAQgwC,EAAAA,GAAYE,SAAUhsC,IAGtC,UAAdmsC,EAAKjuC,OACPpC,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B0wC,aAAc,CACZnB,eACAc,OACAI,OAAQ,YAETvsC,MAtBH+G,EAAAA,EAAAA,IAAUjL,GAyBK,KAGnBgM,EAAAA,EAAAA,IAAiB,gBAAgBgI,MAAOhU,EAAQmD,EAASqO,KACvD,MAAM,KACJm/B,EAAI,OAAEz0B,EAAM,QAAElb,EAAO,eAAE4vC,EAAc,MAAE1sC,GAAQC,EAAAA,EAAAA,OAC7CqN,EAEEq/B,EAAU7wC,EAAO8wC,OAAOD,QAE9B,QAAgBrnC,IAAZqnC,EAAuB,OAE3B,GAAIA,EAAQE,OAASJ,EAAKG,MAExB,YADA3tC,EAAQ6tC,sBAAsB,CAAE9sC,UAIlC,MAAMqrC,EAAwC,CAC5CntC,KAAM,WACN8Z,SACA+0B,OAAQN,EAAKruC,GACbtB,UACA4vC,kBAEInB,GAAsBC,EAAAA,GAAAA,IAAuB1vC,EAAQuvC,GAC3D,IAAKE,EACH,OAGFzvC,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BowC,sBAAsB,GACrBlsC,IACH+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAMsoC,GAAQC,EAAAA,GAAAA,KACR8H,QAAaz7B,EAAAA,EAAAA,IAAQ,iBAAkB66B,EAAqBnH,GAE7D+H,IAILrwC,GAASqL,EAAAA,EAAAA,MAETrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BowC,sBAAsB,GACrBlsC,IACH+G,EAAAA,EAAAA,IAAUjL,GAEN,UAAWqwC,GAIfltC,EAAQ+tC,oBAAoB,CAC1BC,SAAU,CACR5B,eACA6B,OAAQf,EAAKe,QAEfltC,UACA,KAGJ8H,EAAAA,EAAAA,IAAiB,cAAcgI,MAAOhU,EAAQmD,EAASqO,KACrD,MAAM,OACJpQ,EAAM,UAAE+F,EAAS,MAAEjD,GAAQC,EAAAA,EAAAA,OACzBqN,EACEpO,EAAOhC,IAAUqG,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1C,IAAK+F,IAAc/D,EACjB,OAGF,MAAMwS,QAAehB,EAAAA,EAAAA,IAAQ,aAAcxR,EAAM+D,GAC5CyO,IAIL5V,GAASqL,EAAAA,EAAAA,MAEPrL,EAD0B,UAAxB4V,EAAOy7B,QAAQjvC,MACRkvC,EAAAA,EAAAA,KAAgCtxC,EAAQ4V,EAAOy7B,QAASntC,IAExDqtC,EAAAA,EAAAA,KAAWvxC,EAAQ4V,EAAOy7B,QAASntC,IAE9C+G,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClDxR,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BwxC,QAAS,KACJtxC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOstC,QACjCp+B,WAAO5J,IAERtF,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,gBAAgB,CAAChM,EAAQmD,EAASqO,KACjD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BwxC,QAAS,KACJtxC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOstC,QACjCH,aAAS7nC,IAEVtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,YAAEigC,EAAW,MAAEvtC,GAAQC,EAAAA,EAAAA,OAAsBqN,GAE7C,eAAEkgC,IAAmBxxC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOstC,QAAQnB,MAC3D,KAAErpB,GAASyqB,EAEjB,GAAuB,WAAnBC,EAA6B,CAC/B,MAAMC,GAAiBC,EAAAA,EAAAA,KAA6B5xC,EAAQkE,GAC5D,IAAKytC,EACH,QAmHN39B,eACEhU,EACAgnB,EACA2qB,MACIztC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM+mB,EC/VD,SAA0BlE,GAC/B,MAAMkE,EAAQljB,OAAOuG,KAAKyY,GAAMvY,KAAKg3B,GAAO,GAAEA,KAAKze,EAAKye,OAAMnpB,KAAK,KACnE,OAAO4O,EAAMrpB,OAAS,EAAK,IAAGqpB,IAAU,EAC1C,CD4VgB2mB,CAAiB,CAC7B,eAAgB7qB,EAAK8qB,WACrB,kBAAmB9qB,EAAK+qB,YACxB,iBAAkB/qB,EAAKgrB,WACvB,YAAahrB,EAAKirB,IAClB,oBAAqBjrB,EAAKkrB,IAC1B,wBAAyBlrB,EAAKmrB,UAG1B7zB,QAAiB8zB,MAAO,mCAAkClnB,IAAS,CACvEmnB,OAAQ,OACRZ,YAAa,cACba,QAAS,CACP,eAAgB,oCAChBC,cAAgB,UAASZ,OAGvB/7B,QAAe0I,EAASk0B,OAC9B,GAAI58B,EAAOxC,MAAO,CAChB,MAAMA,EDzUH,SAAwBA,GAK7B,MAAQpS,QAASod,EAAW,KAAEqwB,EAAI,MAAElE,GAAUn3B,GACxC,MAAEw7B,EAAK,QAAE5tC,GAAYupC,EAAQmE,GAAcnE,GAASmE,GAAcD,GAExE,MAAO,CAAEG,QAAO5tC,UAASod,cAC3B,CCgUkBq0B,CAAe78B,EAAOxC,OAYpC,OAXApT,GAASqL,EAAAA,EAAAA,MACTrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BwxC,QAAS,KACJtxC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOstC,QACjCf,OAAQ,SACRr9B,MAAO,IACFA,KAGNlP,QACH+G,EAAAA,EAAAA,IAAUjL,EAEZ,CACAA,GAASqL,EAAAA,EAAAA,MACTrL,GAAS0yC,EAAAA,EAAAA,KAAkB1yC,EAAQ,CACjCoC,KAAMwT,EAAOxT,KACbE,GAAIsT,EAAOtT,IACV4B,GACHlE,GAAS+vC,EAAAA,EAAAA,KAAe/vC,EAAQgwC,EAAAA,GAAYE,SAAUhsC,IACtD+G,EAAAA,EAAAA,IAAUjL,EACZ,CA/JS2yC,CAAsB3yC,EAAQgnB,EAAM2qB,EAAgBztC,EAC3D,MAAO,GAAuB,gBAAnBwtC,EAAkC,CAC3C,MAAMkB,GAAcC,EAAAA,EAAAA,KAA0B7yC,EAAQkE,GACtD,IAAK0uC,EACH,QA6JN5+B,eACEhU,EACAgnB,EACA4rB,MACI1uC,GAAQC,EAAAA,EAAAA,QAEZ,MAAMoT,EAAS,CACbu7B,KAAM,CACJhE,OAAQ9nB,EAAK8qB,WAAWvd,QAAQ,OAAQ,IACxCwe,iBAAkB/rB,EAAK+qB,YACvBiB,gBAAiBhsB,EAAKgrB,WACtBiB,cAAejsB,EAAKirB,IAAI1d,QAAQ,OAAQ,MAItC2e,GAAchzC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOstC,QAAQnB,MAAM8C,aAAaD,YAE7E,IAAI7uB,EAEFA,EADE+uB,EAAAA,IACI,+DAEA,oDAGJF,GAAaG,WAAW,aACrBH,EAAYI,SAAS,4CAC1BjvB,EAAM6uB,GAGR,MAAM50B,QAAiB8zB,MAAM/tB,EAAK,CAChCguB,OAAQ,OACRC,QAAS,CACPiB,OAAQ,mBACR,eAAgB,mBAChB,iBAAkBX,GAEpBY,KAAMC,KAAKC,UAAUn8B,KAEjB3B,QAAe0I,EAASk0B,OAE9B,GAAsB,OAAlB58B,EAAO66B,OAAiB,CAE1B,MAAMr9B,EAAQ,CAAEgL,YAAa,iBAY7B,OAXApe,GAASqL,EAAAA,EAAAA,MACTrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BwxC,QAAS,KACJtxC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOstC,QACjCf,OAAQ,SACRr9B,MAAO,IACFA,KAGNlP,QACH+G,EAAAA,EAAAA,IAAUjL,EAEZ,CAEAA,GAASqL,EAAAA,EAAAA,MACTrL,GAAS2zC,EAAAA,EAAAA,KAAuB3zC,EAAQ,CACtCoC,KAAM,OACNwxC,MAAOh+B,EAAOoR,KAAK4sB,OAClB1vC,GACHlE,GAAS+vC,EAAAA,EAAAA,KAAe/vC,EAAQgwC,EAAAA,GAAYE,SAAUhsC,IACtD+G,EAAAA,EAAAA,IAAUjL,EACZ,CA3NS6zC,CAA2B7zC,EAAQgnB,EAAM4rB,EAAa1uC,EAC7D,MAGF8H,EAAAA,EAAAA,IAAiB,mBAAmBgI,MAAOhU,EAAQmD,EAASqO,KAC1D,MAAM,iBACJsiC,EAAgB,gBAAEC,EAAe,kBAAEC,EAAiB,UAAEC,EAAS,MAC/D/vC,GAAQC,EAAAA,EAAAA,OACNqN,EACE0iC,GAAgBC,EAAAA,EAAAA,KAAuBn0C,EAAQkE,GAC/CkwC,GAAel0C,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOstC,SAC7C,KAAEnB,EAAI,kBAAEgE,EAAiB,aAAE9E,GAAiB6E,EAElD,IAAK7E,IAAiBc,EACpB,OAGF,MAAM,eAAEqB,EAAc,OAAEN,GAAWf,EAE7BZ,GAAsBC,EAAAA,GAAAA,IAAuB1vC,EAAQuvC,GAC3D,IAAKE,EACH,OAGFzvC,GAASswC,EAAAA,EAAAA,KAActwC,EAAQ,CAAEywC,OAAQ,WAAavsC,IACtD+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAMyxC,EAAc,CAClB6C,KAAMP,EACN/sB,KAAyB,WAAnB0qB,GACF6C,EAAAA,EAAAA,KAAwBv0C,EAAQkE,IAASswC,EAAAA,EAAAA,KAA6Bx0C,EAAQkE,UAE/D0Q,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9C26B,aAAcE,EACd2B,SACAK,cACAgD,gBAAiBP,EACjBJ,mBACAE,oBACAK,kBAAmBA,GAAmBtO,MACtCkO,gBAOFj0C,GAASqL,EAAAA,EAAAA,MACTrL,GAASswC,EAAAA,EAAAA,KAActwC,EAAQ,CAAEywC,OAAQ,QAAUvsC,GACnDlE,GAAS00C,EAAAA,EAAAA,KAAa10C,EAAQkE,IAC9B+G,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQuZ,UAAU,CAChB,QAAS,8BACT03B,eACAlwC,UACA,KAGJ8H,EAAAA,EAAAA,IAAiB,uBAAuBgI,MAAOhU,EAAQmD,EAASqO,KAC9D,MAAM,SAAE2/B,EAAQ,MAAEjtC,GAAQC,EAAAA,EAAAA,OAAsBqN,EAC1CmjC,GAAcC,EAAAA,EAAAA,KAAmB50C,EAAQkE,GACzCqrC,EAAeoF,GAAapF,cAAgB4B,GAAU5B,aAC5D,IAAKA,EAAc,OAEnB,MAAME,GAAsBC,EAAAA,GAAAA,IAAuB1vC,EAAQuvC,GAC3D,IAAKE,EACH,OAGF,MAAM2B,EAAUuD,EAAYtE,MAAMe,QAAUuD,EAAYE,kBAAkBC,oBAAsB3D,GAAUC,OAE1GpxC,GAAS+0C,EAAAA,EAAAA,KAAmB/0C,EAAQ,CAAEywC,OAAQ,WAAavsC,IAC3D+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAM4V,QAAehB,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD26B,aAAcE,EACd2B,WAGF,IAAKx7B,EAMH,OALA5V,GAASqL,EAAAA,EAAAA,MACTrL,GAAS+0C,EAAAA,EAAAA,KAAmB/0C,EAAQ,CAAEywC,OAAQ,UAAYvsC,IAC1D+G,EAAAA,EAAAA,IAAUjL,GACVmD,EAAQ6xC,uBAAuB,CAAE9wC,eACjCf,EAAQ8xC,eAAe,CAAE/wC,UAI3BlE,GAASqL,EAAAA,EAAAA,MACTrL,GAAS+0C,EAAAA,EAAAA,KAAmB/0C,EAAQ,CAAEywC,OAAQ,QAAUvsC,IACxD+G,EAAAA,EAAAA,IAAUjL,GACVmD,EAAQ6xC,uBAAuB,CAAE9wC,UACjCf,EAAQ8xC,eAAe,CAAE/wC,UAErB,cAAe0R,GACjBzS,EAAQua,SAAS,CAAEpb,GAAIsT,EAAOzD,UAAWjO,UAG3Cf,EAAQuZ,UAAU,CAChB,QAAS,kCACT03B,aAAcjD,EAAW,CAAE5B,gBAAiBoF,EAC5CzwC,UAEFf,EAAQ+xC,gBAAgB,KAqH1BlpC,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,MAAiB,KAAE/B,EAAI,MAAEwxC,GAAUpiC,EACnD,OAAOmiC,EAAAA,EAAAA,KAAuB3zC,EAAQ,CACpCoC,OACAwxC,SACC1vC,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,kBAAkB,CAAChM,EAAQmD,EAASqO,KACnD,MAAM,KAAE2jC,EAAI,MAAEjxC,GAAQC,EAAAA,EAAAA,OAAsBqN,EAC5C,OAAOu+B,EAAAA,EAAAA,KAAe/vC,EAAQm1C,GAAQnF,EAAAA,GAAYE,SAAUhsC,EAAM,KAGpE8H,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAE5C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,GAAKyJ,EAASynC,aACd,OAAOxnC,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo1C,aAAc,CACZC,MAAO1nC,EAASynC,aAAaC,MAC7BC,QAAQ,IAETpxC,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,oBAAoBgI,MAAOhU,EAAQmD,EAASqO,KAC3D,MAAM,eACJiS,EAAc,WAAE8xB,EAAU,UAAElH,EAAS,OAAEmH,EAAM,aAAEC,EAAY,SAAEC,EAAQ,MACrExxC,GAAQC,EAAAA,EAAAA,OACNqN,GAAW,CAAC,EAEhBrO,EAAQwyC,sBAER,MAAM//B,QAAehB,EAAAA,EAAAA,IAAQ,qBACxBgB,IAEL5V,GAASqL,EAAAA,EAAAA,MAETrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bo1C,aAAc,CACZC,MAAOz/B,EAAOy/B,MACd5xB,iBACA6xB,QAAQ,EACRC,aACAG,WACAF,SACAC,eACApH,cAEDnqC,IACH+G,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQyyC,oBAAoB,CAAE1xC,UAAQ,KAGxC8H,EAAAA,EAAAA,IAAiB,qBAAqBgI,MAAOhU,EAAQmD,EAASqO,KAC5D,MAAM,OACJpQ,EAAM,gBAAEy0C,EAAe,MACvB3xC,GAAQC,EAAAA,EAAAA,OACNqN,EAEEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMwS,QAAehB,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDxR,SAGI0yC,QAAoBlhC,EAAAA,EAAAA,IAAQ,6BAE7BgB,GAAWkgC,IAIhB91C,GAASqL,EAAAA,EAAAA,MAETrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B+1C,cAAe,CACb30C,SACA40C,MAAOpgC,EACP0/B,QAAQ,EACRO,kBACAC,gBAED5xC,IACH+G,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,iBAAiBgI,MAAOhU,EAAQmD,EAASqO,KACxD,MAAM,UACJykC,EAAS,MAAE/xC,GAAQC,EAAAA,EAAAA,OACjBqN,EAEEwkC,QAAcphC,EAAAA,EAAAA,IAAQ,4BAA6B,CAAC,GACrDohC,IAELh2C,GAASqL,EAAAA,EAAAA,MACTrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bk2C,UAAW,CACTD,YACAD,UAED9xC,IACH+G,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,sBAAsBgI,MAAOhU,EAAQmD,EAASqO,KAC7D,MAAM,UACJykC,EAAS,MACT/xC,GAAQC,EAAAA,EAAAA,OACNqN,GAAW,CAAC,EAEV2kC,QAAyBvhC,EAAAA,EAAAA,IAAQ,sBAAuB,CAAC,GAE/D5U,GAASqL,EAAAA,EAAAA,MACTrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bo2C,eAAgB,CACdd,QAAQ,EACRW,YACAE,qBAEDjyC,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,2BAA2BgI,MAAOhU,EAAQmD,EAASqO,KAClE,MAAM,SAAE88B,EAAQ,MAAEpqC,GAAQC,EAAAA,EAAAA,OAAsBqN,EAC1CoE,QAAehB,EAAAA,EAAAA,IAAQ,gCAAiC05B,GAE9DtuC,GAASqL,EAAAA,EAAAA,MAKPrL,EAHG4V,EAEM,UAAWA,GACX06B,EAAAA,EAAAA,KAActwC,EAAQ,CAAEoT,MAAO,CAAEpS,QAAS4U,EAAOxC,MAAOw7B,MAAO,aAAgB1qC,IAE/EosC,EAAAA,EAAAA,KAActwC,EAAQ,CAAEq0C,kBAAmBz+B,EAAQu/B,KAAMnF,EAAAA,GAAYE,UAAYhsC,IAJjFosC,EAAAA,EAAAA,KAActwC,EAAQ,CAAEoT,MAAO,CAAEpS,QAAS,gBAAiB4tC,MAAO,aAAgB1qC,IAO7F+G,EAAAA,EAAAA,IAAUjL,EAAO,KA2BnBgM,EAAAA,EAAAA,IAAiB,kBAAkBgI,MAAOhU,EAAQmD,EAASqO,KACzD,MAAM,OAAEpQ,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsBqN,EACxCpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,KAAUia,EAAAA,EAAAA,KAAcja,MAASwmB,EAAAA,EAAAA,KAAiBxmB,GAAQ,OAE/DpD,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bq2C,WAAY,CACVj1C,WAED8C,IACH+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAM4V,QAAehB,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/CxR,SAGF,IAAKwS,EAEH,YADAzS,EAAQmzC,gBAAgB,CAAEpyC,UAI5BlE,GAASqL,EAAAA,EAAAA,MACTrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bq2C,WAAY,CACVj1C,SACAm1C,YAAa3gC,IAEd1R,IACH+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAMw2C,QAAiB5hC,EAAAA,EAAAA,IAAQ,iBAE/B,IAAK4hC,EAAU,OAEfx2C,GAASqL,EAAAA,EAAAA,MACT,MAAMsC,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACnCyJ,EAAS0oC,aAEdr2C,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bq2C,WAAY,IACP1oC,EAAS0oC,WACZG,SAAUA,EAASC,SAEpBvyC,IACH+G,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,uBAAuBgI,MAAOhU,EAAQmD,EAASqO,KAC9D,MAAM,OAAEpQ,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsBqN,EAExCpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EAAM,OAEXpD,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B02C,gBAAiB,CACft1C,WAED8C,IACH+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAO22C,EAAiBC,EACtBC,SAA2B76B,QAAQC,IAAI,EACvCrH,EAAAA,EAAAA,IAAQ,iBAAkB,CAAExR,UAC5BwR,EAAAA,EAAAA,IAAQ,iBAAkB,CAAExR,OAAM0zC,SAAS,KAC3CliC,EAAAA,EAAAA,IAAQ,mBAAoB,CAAExR,WAIhC,GADApD,GAASqL,EAAAA,EAAAA,OACJsrC,IAAoBC,IAAwBC,EAK/C,OAJA72C,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B02C,qBAAiBltC,GAChBtF,QACH+G,EAAAA,EAAAA,IAAUjL,GAIZA,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B02C,gBAAiB,CACft1C,SACAm1C,YAAaM,EACbp2B,WAAYk2B,EAAgBl2B,WAC5Bg2B,OAAQ,CACN3gC,MAAO6gC,EAAgB7gC,MACvBihC,KAAMJ,EAAgBK,WAExBC,aAAc,CACZnhC,MAAO8gC,GAAqB9gC,MAC5BihC,KAAMH,GAAqBI,aAG9B9yC,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,8BAA8B,CAAChM,EAAQmD,EAASqO,KAC/D,MAAM,OAAEpQ,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsBqN,GAEjC/J,EAAAA,EAAAA,KAAWzH,EAAQoB,KAGhCpB,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bk3C,uBAAwB,CACtB91C,WAED8C,IACH+G,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,oBAAoBgI,MAAOhU,EAAQmD,EAASqO,KAC3D,MAAM,QAAEslC,EAAO,MAAE5yC,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC3D,IAAI7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACtC,IAAKyJ,EAAS+oC,gBAAiB,OAE/B,MAAMtzC,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQ2N,EAAS+oC,gBAAgBt1C,QACzD,IAAKgC,EAAM,OAEXpD,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B02C,gBAAiB,IACZ/oC,EAAS+oC,gBACZS,mBAAmB,IAEpBjzC,IACH+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAM4V,QAAehB,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7CxR,OACA8c,OAAQvS,EAAS+oC,gBAAgBj2B,WACjCq2B,YAEF,IAAKlhC,EAAQ,OAKb,GAHA5V,GAASqL,EAAAA,EAAAA,MAETsC,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,IAC7ByJ,EAAS+oC,gBAAiB,OAE/B,MAAMU,GAAoBN,EACtBnpC,EAAS+oC,gBAAgBO,cAAcF,MAAQ,GAC/CppC,EAAS+oC,gBAAgBD,QAAQM,MAAQ,IAAIrmC,OAAOkF,EAAOohC,WAE/Dh3C,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B02C,gBAAiB,IACZ/oC,EAAS+oC,gBACZj2B,WAAY7K,EAAO6K,WACnB02B,mBAAmB,EACnB,CAACL,EAAU,eAAiB,UAAW,CACrChhC,MAAOF,EAAOE,MACdihC,KAAMK,KAGTlzC,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,cAAcgI,MAAOhU,EAAQmD,EAASqO,KACrD,MAAM,OAAEpQ,EAAM,MAAEi2C,EAAK,MAAEnzC,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE/CpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMk0C,GAAkBz7B,EAAAA,EAAAA,KAAmB7b,EAAQoB,GAC7Cm2C,EAAmBD,GAAiBE,eAAiB,EAErDC,EAAqBJ,EAAMx1C,OAEjC,IAAI8L,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACtC,MAAMwzC,EAAY/pC,EAAS0oC,YAAYE,YAEvC,GAAImB,EAAW,CACb,MAAMC,EAAiBD,EAAUE,gBAAkBF,EAAUE,gBAAkBF,EAAUG,mBAAqB,EACxGC,EAAYJ,EAAUjB,OAASgB,EAC/BM,EAAYL,EAAUE,iBAAmBE,GAAaJ,EAAUE,gBAChEI,EAAwBD,EAAYL,EAAUE,gBAAmBF,EAAUG,mBAC3EI,EAAqBF,EAAYL,EAAUE,gBAAmBD,EAAiBD,EAAUE,gBAE/F53C,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bq2C,WAAY,IACP1oC,EAAS0oC,WACZE,YAAa,IACRmB,EACHQ,MAAOH,EAAYL,EAAUQ,MAAQ,EAAIR,EAAUQ,MACnDL,mBAAoBG,EACpBJ,gBAAiBK,EACjBE,YAAY,EACZ1B,OAAQqB,KAGX5zC,IACH+G,EAAAA,EAAAA,IAAUjL,EACZ,CAEAA,GAASqL,EAAAA,EAAAA,MACTsC,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAClC,MAAMk0C,EAAczqC,EAAS0oC,YAAYG,SAEzC,GAAI4B,EAAa,CACf,MAAMC,EAAU13C,KAAK6B,MAAMC,KAAKC,MAAQ,KAClC41C,EAAcF,EAAY3pC,KAAK8pC,GAC/BlB,EAAM/yC,SAASi0C,EAAMC,MAChB,IACFD,EACHn3C,SACAsT,KAAM2jC,EACNI,cAAeJ,EA/wBI,OAkxBhBE,IAGTv4C,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bq2C,WAAY,IACP1oC,EAAS0oC,WACZG,SAAU8B,IAEXp0C,IACH+G,EAAAA,EAAAA,IAAUjL,EACZ,CAEA,MAAM4V,QAAehB,EAAAA,EAAAA,IAAQ,aAAc,CACzCyiC,QACAj0C,SAKF,GAFApD,GAASqL,EAAAA,EAAAA,MAEJuK,EAgBLjI,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAC9BozC,IACFt3C,GAAS+iB,EAAAA,EAAAA,KAAmB/iB,EAAQoB,EAAQ,CAC1Co2C,cAAeD,EAAmBF,EAAMx1C,UAIxC8L,EAAS0oC,aACXr2C,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bq2C,WAAY,IACP1oC,EAAS0oC,WACZG,SAAU5gC,EAAO6gC,SAElBvyC,KAEL+G,EAAAA,EAAAA,IAAUjL,OA/BV,CAEE,MAAMq2C,GAAan2C,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOmyC,WAC7CA,IACFr2C,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bq2C,WAAY,IACPA,EACHE,YAAamB,EACblB,SAAU4B,IAEXl0C,IACH+G,EAAAA,EAAAA,IAAUjL,GAGd,CAiBiB,KAGnBgM,EAAAA,EAAAA,IAAiB,iBAAiBgI,MAAOhU,EAAQmD,EAASqO,KACxD,MAAM,KAAEknC,EAAI,QAAE13C,EAAO,MAAEkD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE/CoE,QAAehB,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C8jC,SAGG9iC,GAQL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B24C,cAAe,CACbD,OACAE,KAAMhjC,EAAO64B,KACbztC,YAEDkD,IACH+G,EAAAA,EAAAA,IAAUjL,IAfRmD,EAAQiM,iBAAiB,CACvBpO,QAASmtB,EAAAA,GAA0B,yBACnCjqB,SAaa,KAGnB8H,EAAAA,EAAAA,IAAiB,iBAAiBgI,MAAOhU,EAAQmD,EAASqO,KACxD,MAAM,KAAEknC,EAAI,MAAEx0C,GAAQC,EAAAA,EAAAA,OAAsBqN,QAEvBoD,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C8jC,WAMFv1C,EAAQ01C,gBAAgB,CAAEC,WAAW,EAAM50C,UAC3Cf,EAAQ41C,mBAAmB,CAAE70C,UAAQ,KAGvC8H,EAAAA,EAAAA,IAAiB,yBAAyBgI,MAAOhU,EAAQmD,EAASqO,KAChE,MAAM,OACJpQ,EAAM,WAAE43C,EAAU,eAAEC,EAAc,MAAE/0C,GAAQC,EAAAA,EAAAA,OAC1CqN,EAEEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAM81C,EAAqBD,GAAgBE,sBAAsB1qC,KAAKnM,IAAOmF,EAAAA,EAAAA,KAAWzH,EAAQsC,KAAKR,OAAOyW,eAEvF3D,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDxR,OACA41C,aACAC,eAAgB,CACd72C,KAAM,WACNgB,OACAg2C,kBAAmBH,GAAgBG,kBACnCF,qBACAG,UAAWJ,GAAgBI,UAC3BC,iBAAkBL,EAAeK,iBACjCC,UAAWN,EAAeM,UAC1BC,SAAUP,EAAeO,SACzBzI,OAAQkI,EAAelI,WAQ3B5tC,EAAQs2C,oBAAoB,CAAEr4C,SAAQ8C,SAAQ,KAGhD8H,EAAAA,EAAAA,IAAiB,8BAA8BgI,MAAOhU,EAAQmD,EAASqO,KACrE,MAAM,OACJpQ,EAAM,WAAE43C,EAAU,eAAEC,EAAc,MAAE/0C,GAAQC,EAAAA,EAAAA,OAC1CqN,EAEEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAM81C,EAAqBD,GAAgBE,sBAAsB1qC,KAAKnM,IAAOmF,EAAAA,EAAAA,KAAWzH,EAAQsC,KAAKR,OAAOyW,eAEvF3D,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDxR,OACA41C,aACAC,eAAgB,CACd72C,KAAM,gBACNgB,OACAg2C,kBAAmBH,GAAgBG,kBACnCF,qBACAG,UAAWJ,GAAgBI,UAC3BC,iBAAkBL,EAAeK,iBACjCC,UAAWN,EAAeM,UAC1BC,SAAUP,EAAeO,SACzBzI,OAAQkI,EAAelI,OACvBD,MAAOmI,EAAenI,MACtBzU,MAAO4c,EAAe5c,UAQ1Bl5B,EAAQs2C,oBAAoB,CAAEr4C,SAAQ8C,SAAQ,KE78BhD8H,EAAAA,EAAAA,IAAiB,kBAAkBgI,UACjC,MAAM0lC,EAAgB15C,EAAO8wC,MACvB6I,GAAqBD,GAAeE,cAEnCnJ,EAAQmJ,SAAsB59B,QAAQC,IAAI,EAC/CrH,EAAAA,EAAAA,IAAQ,oBACR+kC,GAAoB/kC,EAAAA,EAAAA,IAAQ,+BAA4BpL,KAGrDinC,GAAWkJ,IAAsBC,IAItC55C,GAASqL,EAAAA,EAAAA,MAETrL,EAAS,IACJA,EACH8wC,MAAO,IACF4I,EACH7I,QAASJ,EAAOI,QAChB+I,aAAcA,GAAgBF,EAAeE,aAC7CC,QAAS,CACP59B,SAAKzS,EACLswC,aAAStwC,EACTuwC,cAAUvwC,GAEZwwC,mBAAexwC,IAIfinC,EAAOoJ,UACT75C,GAASi6C,EAAAA,EAAAA,KAAwBj6C,EAAQ,MAAOywC,EAAOoJ,QAASpJ,EAAOyJ,oBAGrEzJ,EAAOuJ,gBACTh6C,GAASm6C,EAAAA,EAAAA,KAAyBn6C,EAAQywC,EAAOuJ,cAAevJ,EAAO2J,0BAGzEnvC,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,yBAAyBgI,MAAOhU,EAAQmD,EAASqO,KAChE,MAAM,KAAEpP,GAASoP,EAEXqoC,EAAU75C,EAAO8wC,OAAO+I,QAAQz3C,GAChC8d,EAAS25B,GAASp5B,WACxB,GAAIo5B,IAAY35B,EAAQ,OAExB,MAAMtK,QAAehB,EAAAA,EAAAA,IAAQ,yBAA0B,CACrDylC,UAAoB,YAATj4C,QAAsBoH,EACjC8wC,WAAqB,aAATl4C,QAAuBoH,EACnC0W,OAAQA,GAAU,KAGftK,IAIL5V,GAASqL,EAAAA,EAAAA,MAETrL,GAASu6C,EAAAA,EAAAA,KAAmBv6C,EAAQ4V,EAAOi7B,SACvCj7B,EAAOikC,UACT75C,GAASi6C,EAAAA,EAAAA,KAAwBj6C,EAAQoC,EAAMwT,EAAOikC,QAASjkC,EAAO6K,cAExExV,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,iBAAiBgI,UAChC,MAAM4B,QAAehB,EAAAA,EAAAA,IAAQ,kBAE7B,IAAKgB,EACH,OAGF,MAAM,MAAEogC,EAAK,SAAE3rB,GAAazU,EAEtB4kC,GAAgB1rC,EAAAA,EAAAA,IAAqBknC,EAAO,MAE5CyE,EAA+D,CACnEx+B,IAAK,GACLy+B,QAAS,IAGLC,EAAiB3yC,OAAOuG,KAAKisC,GAC7BI,EAAe5yC,OAAOC,OAAOuyC,GAE7BK,EAAqBD,EAAansC,KACrCkiC,GACQA,EAAKmK,UAAYnK,EAAKruC,QAAKkH,IAEpC1H,OAAOyW,SAETkiC,EAAyBx+B,IAAM0+B,EAC/BF,EAAyBC,QAAUG,EAEnCD,EAAa14C,SAASyuC,IACpB,MAAMoK,EAAgBpK,EAAKG,MACtB2J,EAAyBM,KAC5BN,EAAyBM,GAAiB,IAE5CN,EAAyBM,GAAervC,KAAKilC,EAAKruC,GAAG,IAGvDtC,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHw6C,gBACAC,2BACApwB,SAAU,IACLrqB,EAAOqqB,SACV2wB,UAAW,CACT3wB,eAINpf,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,iBAAiBgI,MAAOhU,EAAQmD,EAASqO,KACxD,MAAM,OAAE0K,EAAM,cAAE++B,GAAkBzpC,EAE5B6C,GAAOC,EAAAA,EAAAA,KAAWtU,EAAQkc,GAChC,IAAK7H,EAAM,OAEX,MAAM6mC,EAAel7C,EAAOq8B,MAAM8e,UAAUj/B,GACtCk/B,EAAkBF,GAAcz6B,WAEtC,IAAKw6B,GAAiBC,IAAiBE,EAAiB,OAExD,MAAMxlC,QAAehB,EAAAA,EAAAA,IAAQ,qBAAsB,CACjDP,OACA6L,OAAS+6B,EAAkC,GAAlBG,IAG3B,IAAKxlC,EACH,OAGF5V,GAASqL,EAAAA,EAAAA,MAET,MAAMgwC,EAAWH,IAAiBD,EAAgBC,EAAalF,MAAMtlC,OAAOkF,EAAOogC,OAASpgC,EAAOogC,MAEnGh2C,EAAS,IACJA,EACHq8B,MAAO,IACFr8B,EAAOq8B,MACV8e,UAAW,IACNn7C,EAAOq8B,MAAM8e,UAChB,CAACj/B,GAAS,CACR85B,MAAOqF,EACP56B,WAAY7K,EAAO6K,gBAK3BxV,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,0BAA0BgI,UACzC,MAAMgmC,EAAgBh6C,EAAO8wC,OAAOkJ,cAC9B95B,EAAS85B,GAAev5B,WAC9B,GAAIu5B,IAAkB95B,EAAQ,OAE9BlgB,GAASs7C,EAAAA,EAAAA,KAA+Bt7C,GAAQ,IAChDiL,EAAAA,EAAAA,IAAUjL,GAEV,MAAM4V,QAAehB,EAAAA,EAAAA,IAAQ,0BAA2B,CACtDsL,OAAQA,GAAU,KAGftK,IAIL5V,GAASqL,EAAAA,EAAAA,MAETrL,GAASu6C,EAAAA,EAAAA,KAAmBv6C,EAAQ4V,EAAOi7B,SAC3C7wC,GAASm6C,EAAAA,EAAAA,KAAyBn6C,EAAQ4V,EAAOokC,cAAepkC,EAAO6K,aACvExV,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,2BAA2BgI,MAAOhU,EAAQmD,EAASqO,KAClE,MAAM,OAAExP,EAAM,GAAEM,EAAE,YAAEi5C,GAAgB/pC,EAE9B+M,EAAOvc,GAASsd,EAAAA,EAAAA,KAAWtf,EAAQgC,QAAUwH,EAE/CxH,IAAWuc,UAET3J,EAAAA,EAAAA,IAAQ,0BAA2B,CACvC2J,OACAi9B,eAAgBl5C,EAChBi5C,gBAGFp4C,EAAQ+xC,iBAAgB,KAG1BlpC,EAAAA,EAAAA,IAAiB,4BAA4BgI,MAAOhU,EAAQmD,EAASqO,KACnE,MAAM,OAAExP,EAAM,GAAEM,GAAOkP,EAEjB+M,EAAOvc,GAASsd,EAAAA,EAAAA,KAAWtf,EAAQgC,QAAUwH,EAE/CxH,IAAWuc,UAET3J,EAAAA,EAAAA,IAAQ,2BAA4B,CACxC2J,OACAi9B,eAAgBl5C,IAGlBa,EAAQ+xC,iBAAgB,KAG1BlpC,EAAAA,EAAAA,IAAiB,wBAAwBgI,MAAOhU,EAAQmD,EAASqO,KAC/D,MAAM,OAAE0K,EAAM,UAAE/U,EAAS,aAAE2mB,GAAiBtc,EAEtC6C,GAAOC,EAAAA,EAAAA,KAAWtU,EAAQkc,GAC3B7H,SAEgBO,EAAAA,EAAAA,IAAQ,eAAgB,CAC3CP,OACAlN,YACA2mB,kBAOF3qB,EAAQs4C,cAAc,CAAEv/B,OAAQlc,EAAOiC,cAAgBg5C,eAAe,GAAO,KAG/EjvC,EAAAA,EAAAA,IAAiB,sBAAsBgI,MAAOhU,EAAQmD,EAASqO,KAC7D,MAAM,OAAE0K,EAAM,UAAE/U,EAAS,MAAEjD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEnD6C,GAAOC,EAAAA,EAAAA,KAAWtU,EAAQkc,GAC3B7H,SAEgBO,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9CP,OACAlN,gBAOFhE,EAAQs4C,cAAc,CAAEv/B,OAAQlc,EAAOiC,cAAgBg5C,eAAe,IACtE93C,EAAQ6tC,sBAAsB,CAAE9sC,UAAQ,I,gBC/N1C,IAAIw3C,GAAqB,GAEzB1vC,EAAAA,EAAAA,IAAiB,0BAA0BgI,UACzC,MAAM4B,QAAehB,EAAAA,EAAAA,IAAQ,2BACxBgB,IAKLA,EAAO1T,SAASy5C,IACVA,EAAkBC,iBACpBC,GAAAA,GAAmB,UAASF,EAAkBC,gBAAgBt5C,KAAMw5C,EAAAA,GAAeC,SAEjFJ,EAAkBK,YACpBH,GAAAA,GAAmB,UAASF,EAAkBK,WAAW15C,KAAMw5C,EAAAA,GAAeC,SAE5EJ,EAAkBM,iBACpBJ,GAAAA,GAAmB,UAASF,EAAkBM,gBAAgB35C,KAAMw5C,EAAAA,GAAeC,SAEjFJ,EAAkBO,iBACpBL,GAAAA,IAAkBM,EAAAA,EAAAA,KAAqBR,EAAkBO,gBAAiB,QAAUJ,EAAAA,GAAeC,QACrG,IAGF/7C,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACV86C,mBAAoBxmC,KAGxB3K,EAAAA,EAAAA,IAAUjL,IAEVmtC,EAAAA,GAAAA,GAAqB,CACnB7iC,OAAQ,yBACRkH,aAAShI,GACR4jC,EAAAA,KAAyB,KAG9BphC,EAAAA,EAAAA,IAAiB,wBAAwBgI,UACvC,MAAM4B,QAAehB,EAAAA,EAAAA,IAAQ,yBAC7B,IAAKgB,EACH,OAGF,MAAM,QAAEuX,EAAO,OAAED,EAAM,SAAE7C,GAAazU,EAChCtU,EAA+B,GAE/B+6C,GAAavtC,EAAAA,EAAAA,IAAqBqe,EAAS,MAEjD,IAAK,MAAMmvB,KAAUnvB,EACnB,GAAImvB,EAAOC,kBAAmB,CAC5B,MAAMp6C,EAA6B,CACjCC,KAAM,QACNo6C,SAAUF,EAAOE,UAEnBl7C,EAAUoK,KAAKvJ,EACjB,CAGFnC,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHy8C,oBAAqBJ,EACrBhyB,SAAU,IACLrqB,EAAOqqB,SACViyB,OAAQ,CACNjyB,WACA6C,WAGJ5rB,UAAW,IACNtB,EAAOsB,UACVo7C,gBAAiBp7C,KAGrB2J,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,6BAA6B,CAAChM,EAAQmD,EAASqO,KAC9D,MAAM,MACJ9D,EAAK,EAAEzN,EAAC,EAAE08C,EAAC,UAAEC,EAAS,WAAEC,EAAU,MAAE34C,GAAQC,EAAAA,EAAAA,OAC1CqN,EAEEsrC,EAAyB,CAC7Bx6C,GAAIo5C,KACJ3tC,eAAgBL,EAChBzN,EAAGF,EAA6BC,EAAQC,GA1FV,GA0FeU,KAAKmN,SAClBivC,GAChCJ,EAAGA,EA5F2B,GA4FvBh8C,KAAKmN,SAAuCivC,GACnDH,YACAC,cAGF,OAAOjvC,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B6N,wBAAyB,KAAK3N,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO2J,yBAA2B,GAAKivC,IAC3F54C,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,UACJrK,EAAS,OAAE/F,EAAM,MAAEsM,EAAK,aAAEsvC,GACxBxrC,EACJ,GAA+B,yBAA3BxR,EAAOmf,gBAA4C,OAEvD,MAAM/b,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAE3BgC,GAASsK,KAASvM,EAAAA,EAAAA,KAAqBnB,EAAQoB,KAI/CwT,EAAAA,EAAAA,IAAQ,uBAAwB,CACnCxR,OACA+D,YACAq1C,SAAU9uC,EACVuvC,WAAYD,GACZ,KAGJhxC,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,OACJpQ,EAAM,UAAE+F,EAAS,MAAEjD,GAAQC,EAAAA,EAAAA,OACzBqN,EACErP,GAAW+6C,EAAAA,EAAAA,KAAsBl9C,EAAQoB,GACzCJ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ+F,GAE7ChF,GAAanB,KAAW2H,EAAAA,EAAAA,KAAe3H,IAE5CmC,EAAQg6C,eAAe,CACrB/7C,SACA+F,YACAhF,WACA+B,SACA,KAGJ8H,EAAAA,EAAAA,IAAiB,kBAAkBgI,MAAOhU,EAAQmD,EAASqO,KACzD,MAAM,OACJpQ,EAAM,SACNe,EAAQ,kBACRi7C,EAAiB,MACjBl5C,GAAQC,EAAAA,EAAAA,OACNqN,EACJ,IAAI,UAAErK,GAAcqK,EAEpB,MAAMpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAIJ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ+F,GAEhD,IAAK/D,IAASpC,EACZ,OAGF,MAAMq8C,GAAYl8C,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAEzCk8C,EAAoB/kC,QAAQvX,EAAQia,aAAeja,EAAQu8C,UAC3DC,EAA8BF,GAChCG,EAAAA,EAAAA,KAA0Bz9C,EAAQoB,EAAQJ,EAAQia,WAAa,QAC/DzR,EACJxI,EAAUs8C,IACNx4C,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQo8C,IAClCx8C,EACJmG,EAAYnG,GAASsB,IAAM6E,EAE3B,MAAMlG,GAAgBy8C,EAAAA,EAAAA,KAAiB18C,GACjC28C,EAAc18C,EAAcmQ,MAAMwsC,IAAiBxpB,EAAAA,EAAAA,KAAewpB,EAAcz7C,KAEhF07C,EAAmBF,EACrB18C,EAAca,QAAQ87C,KAAkBxpB,EAAAA,EAAAA,KAAewpB,EAAcz7C,KAAa,IAAIlB,EAAekB,GAEnG0T,GAAQioC,EAAAA,EAAAA,KAAuB99C,IAC9B+9C,EAAeC,IAAoBz8B,EAAAA,EAAAA,IAAUs8B,GAAmBp6C,GAAiB,SAAXA,EAAErB,OACzE67C,EAA0BD,EAAiB7mC,OAAOtB,GAClDqoC,EAAiB,IAAIH,KAAkBE,GACvCn6C,GAAaC,EAAAA,EAAAA,IAAc/C,IAE7B6C,EAAAA,EAAAA,KAA+B7D,EAAQ,qBACrC29C,EACFx6C,EAAQg7C,mBAAmB,CAAEl6C,YAAaH,EAAY3B,WAAU+B,UAEhEf,EAAQa,oBAAoB,CAAEC,YAAaH,EAAY3B,WAAU+B,WAIrElE,EAASe,EAAmBf,EAAQgB,EAASk9C,IAC7CjzC,EAAAA,EAAAA,IAAUjL,GAEV,UACQ4U,EAAAA,EAAAA,IAAQ,eAAgB,CAC5BxR,OACA+D,YACA7F,UAAW28C,EACXb,sBAGEC,GACFl6C,EAAQi7C,uBAEZ,CAAE,MAAOhrC,GAEPpT,EAASe,EADTf,GAASqL,EAAAA,EAAAA,MAC2BrK,EAASC,IAC7CgK,EAAAA,EAAAA,IAAUjL,EACZ,MAGFgM,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,OACJpQ,EAAM,UAAE+F,EAAS,MAAE2O,EAAK,UAAEkrB,EAAS,MAAE98B,GAAQC,EAAAA,EAAAA,OAC3CqN,EACEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BJ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ+F,GAElD,IAAK/D,IAASpC,EACZ,OAGF,MAAMK,EAAmBL,EAAQM,WAAWC,SAAW,GACjD88C,GAAe16C,EAAAA,EAAAA,KAAgBtC,EAAkByU,EAAOkrB,GAC9DhhC,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQgB,EAAQI,OAAQJ,EAAQsB,GAAI,CAC7DhB,UAAW,IACND,EACHE,QAAS88C,MAGbpzC,EAAAA,EAAAA,IAAUjL,GAEV,MAAM8D,GAAaC,EAAAA,EAAAA,IAAc/C,IAC7B6C,EAAAA,EAAAA,KAA+B7D,EAAQ,oBACzCmD,EAAQa,oBAAoB,CAC1BC,YAAaH,EACb3B,SAAU,CACRC,KAAM,QAER8B,SAEJ,KAGF8H,EAAAA,EAAAA,IAAiB,oBAAoBgI,MAAOhU,EAAQmD,EAASqO,KAC3D,MAAM,OACJpQ,EAAM,UAAE+F,EAAS,aAAEm3C,EAAY,MAAEp6C,GAAQC,EAAAA,EAAAA,OACvCqN,EACEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BJ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ+F,GAElD,IAAK/D,IAASpC,EACZ,OAGF,MAAMu9C,EAAev9C,EAAQM,WAAWC,SAASiC,MAAMC,GAA0B,SAApBA,EAAEtB,SAASC,OAClE0T,EAAQwoC,GAAgBC,GAAc76C,aAAe,EAC3D,GAAKoS,EAAL,CAGA3S,EAAQq7C,wBAAwB,CAAEp9C,SAAQ+F,cAE1C,UACQyN,EAAAA,EAAAA,IAAQ,mBAAoB,CAChCxR,OACA+D,YACA2O,QACAkrB,UAAWud,GAAcE,gBAE7B,CAAE,MAAOrrC,GAC6B,oBAA/BA,EAAmBpS,SACtBmC,EAAQ6tC,sBAAsB,CAAE0N,eAAgB,CAAEt9C,SAAQ+F,YAAW4pC,OAAQj7B,GAAS5R,SAE1F,CAdA,CAcA,KAGF8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,YAAEvN,EAAW,SAAE9B,EAAQ,MAAE+B,GAAQC,EAAAA,EAAAA,OAAsBqN,EACvD7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,KAAKL,EAAAA,EAAAA,KAA+B7D,EAAQ,mBAAoB,OAEhE,MAAM2+C,EAAyBhxC,EAASixC,gBAAgB36C,IAAgB,GACxE,GAAI06C,EAAuBvtC,MAAMytC,IAAWzqB,EAAAA,EAAAA,KAAeyqB,EAAQ18C,KACjE,OAGF,MAAM28C,EAAqBH,EAAuBjuC,OAAOvO,GAEzD,OAAOyL,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B4+C,gBAAiB,IACZjxC,EAASixC,gBACZ,CAAC36C,GAAc66C,IAEhB56C,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,YAAEvN,EAAW,SAAE9B,EAAQ,MAAE+B,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEvD7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAElCy6C,EAAyBhxC,EAASixC,gBAAgB36C,IAAgB,GAElE86C,EAA4B58C,EAC9Bw8C,EAAuB78C,QAAQ+8C,KAAYzqB,EAAAA,EAAAA,KAAeyqB,EAAQ18C,KAAa,GAE7E28C,EAAqBC,EAA0Bl9C,OAAS,IACzD8L,EAASixC,gBACZ,CAAC36C,GAAc86C,IACbpvC,EAAAA,EAAAA,IAAKhC,EAASixC,gBAAiB,CAAC36C,IAEpC,OAAO2J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B4+C,gBAAiBE,GAChB56C,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,sBAAsBgI,MAAOhU,EAAQmD,EAASqO,KAC7D,MAAM,SAAErP,GAAaqP,QAEAoD,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEzS,gBAKrDnC,GAASqL,EAAAA,EAAAA,OAEGwW,QAKZ7hB,EAAS,IACJA,EACH6hB,OAAQ,IACH7hB,EAAO6hB,OACVm9B,gBAAiB78C,KAGrB8I,EAAAA,EAAAA,IAAUjL,IAXRmD,EAAQ87C,aAWO,KAGnBjzC,EAAAA,EAAAA,IAAiB,8BAA8B,CAAChM,EAAQmD,EAASqO,KAC/D,MAAM,GAAElP,EAAE,MAAE4B,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE1C,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B6N,yBAAyB3N,EAAAA,EAAAA,KAAeF,EAAQkE,GAC7C2J,yBAAyB/L,QAAQ+8C,GAAWA,EAAOv8C,KAAOA,KAC5D4B,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,gBAAgBgI,MAAOhU,EAAQmD,EAASqO,KACvD,MAAM,OAAEpQ,EAAM,UAAE+F,EAAS,SAAEhF,GAAaqP,EAClCpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BJ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ+F,GAClD,IAAK/D,IAASpC,EACZ,OAGF,MAAMkf,EAASlf,EAAQk+C,UAAUz+B,WAC3B7K,QAAehB,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDzS,WACAiB,OACA+D,YACA+Y,WAGGtK,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAAS2C,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ+F,EAAW,CACpD+3C,SAAUtpC,KAEZ3K,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,IAAExH,EAAG,OAAE5I,GAAWoQ,EAElBpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAE3BgC,GAAmC,yBAA3BpD,EAAOmf,kBAIpBvK,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE5K,MAAK5G,QAAO,KAGjD4I,EAAAA,EAAAA,IAAiB,gCAAgC,CAAChM,EAAQmD,EAASqO,KACjE,MAAM,OACJpQ,EAAM,SAAEo7C,EAAQ,EAAEv8C,EAAC,EAAE08C,EAAC,UAAEC,EAAS,WAAEC,EAAU,GAAEv6C,EAAE,MAAE4B,GAAQC,EAAAA,EAAAA,OACzDqN,EAEEpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAE1BuM,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,GAAKd,GAASuK,EAASE,yBAAyBuD,MAAM+tC,GAAgBA,EAAY78C,KAAOA,OACpFnB,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAQlC,MAJ+B,yBAA3BpB,EAAOmf,kBACTvK,EAAAA,EAAAA,IAAQ,+BAAgC,CAAExR,OAAMo5C,cAG3C5uC,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B6N,wBAAyBF,EAASE,wBAAwBY,KAAKquC,GACzDA,EAAuBx6C,KAAOA,EACzB,IACFw6C,EACH78C,EAAGF,EAA6BC,EAAQC,GACxC08C,IACAC,YACAC,cAGGC,KAER54C,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwBgI,MAAOhU,EAAQmD,EAASqO,KAC/D,MAAM,OAAEpQ,EAAM,SAAEyT,GAAarD,EACvBpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EAAM,OAEX,MAAMwS,QAAehB,EAAAA,EAAAA,IAAQ,uBAAwB,CAAExR,OAAMyR,WAAUK,UAAWL,GAAY,OAAIrL,IAGlG,IAAKoM,IAAWA,EAAO1F,SAASrO,OAO9B,OALA7B,EAAS4C,EADT5C,GAASqL,EAAAA,EAAAA,MAC8BjK,EAAQ,CAC7CqD,qBAAsB,SAGxBwG,EAAAA,EAAAA,IAAUjL,GAIZ,MAAM,SAAEkQ,GAAa0F,EAEf1M,GAAO4F,EAAAA,EAAAA,IAAqBoB,EAAU,MACtClG,EAAMhC,OAAOuG,KAAKrF,GAAMuF,IAAI3D,QAElC9K,GAASqL,EAAAA,EAAAA,MAETrL,EAAS4C,EADT5C,GAASmW,EAAAA,EAAAA,KAAoBnW,EAAQoD,EAAKd,GAAI4G,GACP9H,EAAQ,CAC7CiD,iBAAiB0H,EAAAA,EAAAA,IAAO,IAAK3I,EAAKiB,iBAAmB,MAAQ2F,IAAMtF,MAAK,CAACC,EAAGC,IAAMA,EAAID,OAGxFsG,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,WAAE7C,EAAU,MAAEzK,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE5CpO,GAAOyc,EAAAA,EAAAA,KAAkB7f,EAAQkE,GACvC,IAAKd,EAAM,OAEX,IAAKA,EAAKqB,qBACR,OAAO7B,EAAsB5C,EAAQoD,EAAKd,GAAI,CAC5C+B,gBAAiB,KAIrB,MAAMI,EAAuB9D,KAAKE,IAAIuC,EAAKqB,qBAAuBkK,EAAW9M,OAAQ,GAC/EwC,GAAmBjB,EAAKiB,iBAAmB,IAAIvC,QAAQQ,IAAQqM,EAAWrK,SAAShC,KAEzFtC,EAAS4C,EAAsB5C,EAAQoD,EAAKd,GAAI,CAC9C+B,kBACAI,0BAGFwG,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQ8gB,iBAAiB,CAAEtV,aAAYiR,4BAA4B,EAAM1b,WAEpEL,EAAAA,EAAAA,KAA+B7D,EAAQ,qBAE5CA,GAASqL,EAAAA,EAAAA,MAETsD,EAAWzM,SAASI,IAClB,MAAMtB,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoD,EAAKd,GAAIA,GACnD,IAAKtB,EAAS,OAEd,MAAM,SAAEmB,EAAQ,MAAEJ,EAAK,SAAE6B,GAAa5C,EAAQM,WAAWM,kBAAkB,IAAM,CAAC,EAClF,GAAIO,GAAYyB,IAAa7B,EAAO,CAClC,MAAM+B,GAAaC,EAAAA,EAAAA,IAAc/C,GACjCmC,EAAQa,oBAAoB,CAAEC,YAAaH,EAAY3B,WAAU+B,OAAOC,EAAAA,EAAAA,OAC1E,KAGc,KAGlB6H,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5CpO,GAAOyc,EAAAA,EAAAA,KAAkB7f,EAAQkE,GAEvC,IAAKd,GAAMiB,gBACT,OAAIjB,GAAMqB,sBACD3B,EAAAA,EAAAA,KAAW9C,EAAQoD,EAAKd,GAAI,CACjCmC,qBAAsB,SAG1B,EAGFtB,EAAQ2J,aAAa,CACnB1L,OAAQgC,EAAKd,GAAI6E,UAAW/D,EAAKiB,gBAAgB,GAAIH,QAAOk7C,qBAAsB,QAEpFj8C,EAAQ8gB,iBAAiB,CAAEtV,WAAY,CAACvL,EAAKiB,gBAAgB,IAAKH,SAClD,KAGlB8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5CpO,GAAOyc,EAAAA,EAAAA,KAAkB7f,EAAQkE,GACvC,GAAKd,EAIL,OAFAwR,EAAAA,EAAAA,IAAQ,mBAAoB,CAAExR,SAEvBR,EAAsB5C,EAAQoD,EAAKd,GAAI,CAC5CmC,0BAAsB+E,EACtBnF,qBAAiBmF,GACjB,KAGJwC,EAAAA,EAAAA,IAAiB,oBAAoBgI,UACnC,MAAM4B,QAAehB,EAAAA,EAAAA,IAAQ,oBAAqB,CAChDuV,KAAMnqB,EAAOsB,UAAU6oB,KAAKk1B,eAEzBzpC,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACV+9C,aAAczpC,EAAOtU,UACrB6oB,KAAM,IACDnqB,EAAOsB,UAAU6oB,KACpBk1B,aAAczpC,EAAOuU,SAI3Blf,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,uBAAuBgI,UACtC,MAAM4B,QAAehB,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDuV,KAAMnqB,EAAOsB,UAAU6oB,KAAKvoB,kBAEzBgU,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVM,gBAAiBgU,EAAOtU,UACxB6oB,KAAM,IACDnqB,EAAOsB,UAAU6oB,KACpBvoB,gBAAiBgU,EAAOuU,SAI9Blf,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,wBAAwBgI,gBAClBY,EAAAA,EAAAA,IAAQ,0BAK7B5U,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVM,gBAAiB,MAGrBqJ,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,2BAA2BgI,UAC1C,MAAM4B,QAAehB,EAAAA,EAAAA,IAAQ,2BAA4B,CACvDuV,KAAMnqB,EAAOsB,UAAU6oB,KAAKm1B,cAEzB1pC,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHsB,UAAW,IACNtB,EAAOsB,UACVg+C,YAAa1pC,EAAOtU,UACpB6oB,KAAM,IACDnqB,EAAOsB,UAAU6oB,KACpBm1B,YAAa1pC,EAAOuU,SAI1Blf,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,yBAAyBgI,UACxC,MAAM,KAAEmW,GAASnqB,EAAOu/C,mBAAqB,CAAC,EAExC3pC,QAAehB,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEuV,SACzD,IAAKvU,EACH,OAGF5V,GAASqL,EAAAA,EAAAA,MAET,MAAMm0C,GAAYC,EAAAA,EAAAA,IAA0B7pC,EAAO8pC,MAAOC,GAAS,EAACC,EAAAA,EAAAA,KAAeD,EAAIx9C,UAAWw9C,KAElG3/C,EAAS,IACJA,EACHu/C,kBAAmB,CACjBp1B,KAAMvU,EAAOuU,KACb6hB,MAAOwT,KAGXv0C,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,wBAAwBgI,MAAOhU,EAAQmD,EAASqO,KAC/D,MAAM,SAAErP,EAAQ,MAAEmN,GAAUkC,EAI5B,UAFqBoD,EAAAA,EAAAA,IAAQ,yBAA0B,CAAEzS,WAAUmN,UAGjE,OAGFtP,GAASqL,EAAAA,EAAAA,MACT,MAAMm0C,EAAYx/C,EAAOu/C,mBAAmBvT,MAC5C,IAAKwT,EAAW,OAEhB,MAAMnwC,GAAMuwC,EAAAA,EAAAA,KAAez9C,GAGrB09C,EAAS,IAFHL,EAAUnwC,GAIpBC,SAGFtP,EAAS,IACJA,EACHu/C,kBAAmB,IACdv/C,EAAOu/C,kBACVvT,MAAO,IACFwT,EACH,CAACnwC,GAAMwwC,MAIb50C,EAAAA,EAAAA,IAAUjL,EAAO,KCzqBnBgM,EAAAA,EAAAA,IAAiB,kBAAkBgI,MAAOhU,EAAQmD,EAASqO,KACzD,MAAM,OAAEpQ,EAAM,QAAE0+C,EAAO,MAAE57C,GAAQC,EAAAA,EAAAA,OAAsBqN,EACjDpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BslB,GAAW7K,EAAAA,EAAAA,KAAmB7b,EAAQoB,GAC5C,IAAKgC,IAASsjB,EACZ,OAGF,MAAM9Q,QAAehB,EAAAA,EAAAA,IACnBkrC,EAAU,uBAAyB,yBACnC,CAAE18C,OAAM28C,KAAMr5B,EAASs5B,iBAEzB,IAAKpqC,EACH,OAGF,MAAM,MAAEqqC,GAAUrqC,EAClB5V,GAASqL,EAAAA,EAAAA,MACTrL,GAASkgD,EAAAA,EAAAA,KAAiBlgD,EAAQoB,EAAQ6+C,EAAO/7C,IACjD+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,qCAAqCgI,MAAOhU,EAAQmD,EAASqO,KAC5E,MAAM,OACJxP,EAAM,MAAEkC,GAAQC,EAAAA,EAAAA,OACdqN,EACE+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAC1B4Z,GAAeC,EAAAA,EAAAA,KAAmB7b,EAAQgC,GAChD,IAAKuc,EACH,OAGF,MAAMwhC,EAAOnkC,GAAcokC,eACrBC,QAAcrrC,EAAAA,EAAAA,IAAQ,qCAAsC,CAAE2J,OAAMwhC,SAErEE,IAILjgD,GAASqL,EAAAA,EAAAA,MACTrL,GAASmgD,EAAAA,EAAAA,KAAoCngD,EAAQigD,EAAO/7C,IAC5D+G,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,yBAAyBgI,MAAOhU,EAAQmD,EAASqO,KAChE,MAAM,OAAEpQ,EAAM,UAAE+F,EAAS,MAAEjD,GAAQC,EAAAA,EAAAA,OAAsBqN,EACnDpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BslB,GAAW7K,EAAAA,EAAAA,KAAmB7b,EAAQoB,GAC5C,IAAKgC,IAASsjB,EACZ,OAGF,MAAMq5B,EAAOr5B,EAASs5B,eACtB,IAAIpqC,QAAehB,EAAAA,EAAAA,IAAQ,yBAA0B,CAAExR,OAAM+D,YAAW44C,SACnEnqC,IACHA,EAAS,CAAC,GAGZ5V,GAASqL,EAAAA,EAAAA,MAET,MAAM,WACJsd,EAAU,cACVE,EAAa,UACbvnB,IACEuI,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAAQ+F,IAAc,CAAC,EACtDyO,EAAO+S,WAAaA,EACpB/S,EAAOiT,cAAgBA,EACvBjT,EAAOwqC,eAAiB9+C,GAAWC,QAC/BD,GAAWC,QAAQ+Y,QAAO,CAACC,EAAKpY,IAAaoY,EAAMpY,EAAS2T,OAAO,QACnEtM,EAEJxJ,GAASqgD,EAAAA,EAAAA,KAAwBrgD,EAAQ4V,EAAQ1R,IACjD+G,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQm9C,0BAA0B,CAChCl/C,SACA+F,YACAjD,SACA,KAGJ8H,EAAAA,EAAAA,IAAiB,6BAA6BgI,MAAOhU,EAAQmD,EAASqO,KACpE,MAAM,OAAEpQ,EAAM,UAAE+F,EAAS,MAAEjD,GAAQC,EAAAA,EAAAA,OAAsBqN,EACnDpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BslB,GAAW7K,EAAAA,EAAAA,KAAmB7b,EAAQoB,GAC5C,IAAKgC,IAASsjB,EACZ,OAGF,MAAMq5B,EAAOr5B,EAASs5B,eAChBC,GAAQ//C,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOq8C,WAAWj7C,gBAAkB,CAAC,EAE1E,GAAI26C,GAAOO,iBAAmBP,EAAMx/B,WAAY,OAEhD,MAAM+/B,QAAuB5rC,EAAAA,EAAAA,IAAQ,6BAA8B,CACjExR,OAAM+D,YAAW44C,OAAM7/B,OAAQ+/B,EAAMx/B,cAEjC,SACJqI,EAAQ,WACRrI,EAAU,MACV3K,GACE0qC,GAAkB,CAAC,EAGjBC,EAAyBR,EAAMS,oBAAoB7+C,QAAUinB,GAAUjnB,SACxEyB,EAAAA,EAAAA,GAAa28C,EAAMS,mBAAmBT,EAAMS,mBAAmB7+C,OAAS,GAAIinB,EAAS,IAE1F9oB,GAASqL,EAAAA,EAAAA,MACTrL,GAASqgD,EAAAA,EAAAA,KAAwBrgD,EAAQ,IACpCigD,EACHO,eAAgB1qC,GAASgT,GAAUjnB,OACnC6+C,oBAAqBT,EAAMS,oBAAsB,IAAIhwC,OACnD+vC,EAAyB33B,EAAS3R,MAAM,GAAM2R,GAAY,IAE5DrI,cACCvc,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,4BAA4BgI,MAAOhU,EAAQmD,EAASqO,KACnE,MAAM,OACJpQ,EAAM,MAAEwyC,EAAK,KAAEnG,EAAI,aAAEkT,EAAY,MAAEz8C,GAAQC,EAAAA,EAAAA,OACzCqN,EACEkV,GAAW7K,EAAAA,EAAAA,KAAmB7b,EAAQoB,GAC5C,IAAKslB,EACH,OAGF,MAAMq5B,EAAOr5B,EAASs5B,eAChBpqC,QAAehB,EAAAA,EAAAA,IAAQ,4BAA6B,CAAEg/B,QAAOmM,OAAMY,iBAEpE/qC,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAAS4gD,EAAAA,EAAAA,KAAsB5gD,EAAQoB,EAAQqsC,EAAM73B,EAAQ1R,IAC7D+G,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,uBAAuBgI,MAAOhU,EAAQmD,EAASqO,KAC9D,MAAM,OAAEpQ,EAAM,QAAEsL,EAAO,MAAExI,GAAQC,EAAAA,EAAAA,OAAsBqN,EACjDpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BslB,GAAW7K,EAAAA,EAAAA,KAAmB7b,EAAQoB,GAC5C,IAAKgC,IAASsjB,EACZ,OAGF,MAAMq5B,EAAOr5B,EAASs5B,eACtB,IAAIpqC,QAAehB,EAAAA,EAAAA,IAAQ,uBAAwB,CAAExR,OAAMsJ,UAASqzC,SAC/DnqC,IACHA,EAAS,CAAC,GAEZ5V,GAASqL,EAAAA,EAAAA,MAET,MAAM6b,GAAQC,EAAAA,EAAAA,KAAgBnnB,EAAQoB,EAAQsL,IACxC,cACJmc,EAAgB,EAAC,WACjBF,EAAa,EAAC,eACdy3B,EAAiB,GACfl5B,GAAS,UAAWA,GAASA,EAAM0B,MAAQ1B,EAAM0B,MAAQ,CAAC,EAC9DhT,EAAO+S,WAAaA,EACpB/S,EAAOiT,cAAgBA,EACvBjT,EAAOwqC,eAAiBA,EACxBpgD,GAASqL,EAAAA,EAAAA,MACTrL,GAAS6gD,EAAAA,EAAAA,KAAsB7gD,EAAQ4V,EAAQ1R,IAC/C+G,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQ29C,wBAAwB,CAC9B1/C,SACAsL,UACAxI,SACA,KAGJ8H,EAAAA,EAAAA,IAAiB,2BAA2BgI,MAAOhU,EAAQmD,EAASqO,KAClE,MAAM,OAAEpQ,EAAM,QAAEsL,EAAO,MAAExI,GAAQC,EAAAA,EAAAA,OAAsBqN,EACjDpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1BslB,GAAW7K,EAAAA,EAAAA,KAAmB7b,EAAQoB,GAC5C,IAAKgC,IAASsjB,EACZ,OAGF,MAAMq5B,EAAOr5B,EAASs5B,eAChBC,GAAQ//C,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOq8C,WAAWQ,cAAgB,CAAC,EAExE,GAAId,GAAOO,iBAAmBP,EAAMx/B,WAAY,OAEhD,MAAM,eACJ+/B,EAAc,MACd1qC,EAAK,WACL2K,SACQ7L,EAAAA,EAAAA,IAAQ,2BAA4B,CAC5CxR,OAAMsJ,UAASqzC,OAAM7/B,OAAQ+/B,EAAMx/B,cAC/B,CAAC,EAEPzgB,GAASqL,EAAAA,EAAAA,MACTrL,GAAS6gD,EAAAA,EAAAA,KAAsB7gD,EAAQ,IAClCigD,EACHO,eAAgB1qC,GAAS0qC,GAAgB3+C,OACzC6+C,oBAAqBT,EAAMS,oBAAsB,IAAIhwC,OACnD8vC,GAAkB,IAEpB//B,cACCvc,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,wCAAwCgI,MAAOhU,EAAQmD,EAASqO,KAC/E,MAAM,OACJxP,EAAM,gBAAEmsC,EAAe,UAAEC,EAAS,MAAElqC,GAAQC,EAAAA,EAAAA,OAC1CqN,EAEJxR,GAASghD,EAAAA,EAAAA,KAAuBhhD,EAAQ,CAAEgvB,WAAW,EAAM5b,WAAO5J,KAClEyB,EAAAA,EAAAA,IAAUjL,GAEV,MAAMue,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EACH,OAGF,MAAM3I,QAAehB,EAAAA,EAAAA,IAAQ,uCAAwC,CAAE2J,OAAM4vB,oBAExEv4B,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAASghD,EAAAA,EAAAA,KAAuBhhD,EAAQ,CAAEgvB,WAAW,KACrD/jB,EAAAA,EAAAA,IAAUjL,GAEN4V,IACFw4B,IACAjrC,EAAQkkC,QAAQ,CACdhjB,IAAKzO,EAAOyO,IACZC,iBAAiB,EACjBpgB,QACAqgB,iBAAiB,KAErB,KAGFvY,EAAAA,EAAAA,IAAiB,yBAA0BhM,IAClCghD,EAAAA,EAAAA,KAAuBhhD,EAAQ,CAAEoT,WAAO5J,OCvOjDwC,EAAAA,EAAAA,IAAiB,kBAAkBgI,UACjC,IAAI9O,EAAI,EAER,KAAOlF,EAAOihD,QAAQC,SAAS,CAC7B,GAAIh8C,KANqB,IAYvB,YALI00B,EAAAA,KAEFC,QAAQzmB,MAAM,qDAMlBpT,GAASqL,EAAAA,EAAAA,MACT,MAAM,UAAE81C,EAAS,QAAED,GAAYlhD,EAAOihD,QACtC,GAAIE,IAAcD,EAChB,OAGF,MAAMtrC,QAAehB,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9CwsC,gBAAiBD,EACjBA,cAGF,IAAKvrC,EACH,QAGF5V,GAASqL,EAAAA,EAAAA,OACF41C,QAAQE,UAAYvrC,EAAO21B,MAE9B,gBAAiB31B,IACnB5V,GAASqhD,EAAAA,EAAAA,KAAWrhD,EAAQ4V,EAAO0rC,aACnCthD,GAASuhD,EAAAA,EAAAA,KAAuBvhD,EAAQ4V,EAAO0rC,cAC/CthD,GAASwhD,EAAAA,EAAAA,KAAkBxhD,EAAQ4V,EAAO6rC,cACnCR,QAAQC,QAAUtrC,EAAO8rC,UAGlCz2C,EAAAA,EAAAA,IAAUjL,EACZ,MAGFgM,EAAAA,EAAAA,IAAiB,wBAAwBgI,UACvC,IAAI9O,EAAI,EAER,KAAOlF,EAAOihD,QAAQU,kBAAkB,CACtC,GAAIz8C,KAhDqB,IAsDvB,YALI00B,EAAAA,KAEFC,QAAQzmB,MAAM,2DAMlBpT,GAASqL,EAAAA,EAAAA,MACT,MAAM,iBAAEu2C,EAAgB,iBAAED,GAAqB3hD,EAAOihD,QACtD,GAAIW,IAAqBD,EACvB,OAGF,MAAM/rC,QAAehB,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9CwsC,gBAAiBQ,EACjBT,UAAWS,EACXC,UAAU,IAGZ,IAAKjsC,EACH,QAGF5V,GAASqL,EAAAA,EAAAA,OACF41C,QAAQW,iBAAmBhsC,EAAO21B,MAErC,gBAAiB31B,IACnB5V,GAASqhD,EAAAA,EAAAA,KAAWrhD,EAAQ4V,EAAO0rC,aACnCthD,GAASuhD,EAAAA,EAAAA,KAAuBvhD,EAAQ4V,EAAO0rC,cAC/CthD,GAASwhD,EAAAA,EAAAA,KAAkBxhD,EAAQ4V,EAAO6rC,cACnCR,QAAQU,iBAAmB/rC,EAAO8rC,UAG3Cz2C,EAAAA,EAAAA,IAAUjL,EACZ,MAGFgM,EAAAA,EAAAA,IAAiB,0BAA0BgI,MAAOhU,EAAQmD,EAASqO,KACjE,MAAM,OAAExP,GAAWwP,EACb+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAC1Bs/C,GAAcQ,EAAAA,EAAAA,KAAkB9hD,EAAQgC,GAC9C,IAAKuc,IAAS+iC,EACZ,OAEF,MAAMS,EAAkB/5C,OAAOC,OAAOq5C,EAAYp4C,MAAMoR,QAAO,CAACC,EAAK2M,KAC7D,YAAaA,GACjB3M,EAAI7O,KAAKwb,EAAM5kB,IAGViY,IACN,IAEH,GAA+B,IAA3BwnC,EAAgBlgD,OAClB,OAGF,MAAM+T,QAAehB,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD2J,OACAvU,IAAK+3C,IAGFnsC,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAASgiD,EAAAA,EAAAA,KAAkBhiD,EAAQgC,EAAQ4T,EAAOqrC,QAASrrC,EAAOrF,YAClEtF,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,aAAagI,MAAOhU,EAAQmD,EAASqO,KACpD,MAAM,OAAExP,EAAM,QAAE0K,EAAO,MAAExI,GAAQC,EAAAA,EAAAA,OAAsBqN,EACjD+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAC1BklB,GAAQC,EAAAA,EAAAA,KAAgBnnB,EAAQgC,EAAQ0K,GAC9C,IAAK6R,IAAS2I,KAAW,YAAaA,GACpC,OAGFlnB,GAASiiD,EAAAA,EAAAA,KAA6BjiD,EAAQgC,EAAQ0K,EAASxI,IAC/D+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAMkiD,GAAa5iB,EAAAA,GAAAA,MAEfpY,EAAM8Q,WAAakqB,GAAch7B,EAAMi7B,cACpCvtC,EAAAA,EAAAA,IAAQ,YAAa,CAAE2J,OAAM7R,aAGlB1M,EAAOihD,QAAQmB,SAASpgD,GAAQqgD,YAAc,GAAKn7B,EAAM5kB,UAKtDsS,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C2J,OACA7R,cAOF1M,GAASqL,EAAAA,EAAAA,MACTrL,GAASsiD,EAAAA,EAAAA,KAA2BtiD,EAAQgC,EAAQ0K,IACpDzB,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,eAAegI,MAAOhU,EAAQmD,EAASqO,KACtD,MAAM,OAAExP,EAAM,QAAE0K,GAAY8E,EAEtB+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAC3Buc,SAIgB3J,EAAAA,EAAAA,IAAQ,cAAe,CAAE2J,OAAM7R,cAMpD1M,GAASqL,EAAAA,EAAAA,MACTrL,GAASuiD,EAAAA,EAAAA,KAAgBviD,EAAQgC,EAAQ0K,IACzCzB,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,wBAAwBgI,MAAOhU,EAAQmD,EAASqO,KAC/D,MAAM,OAAExP,EAAM,QAAE0K,EAAO,YAAEy1C,GAAgB3wC,EAEnC+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EACH,OAGF,MAAM2I,GAAQC,EAAAA,EAAAA,KAAgBnnB,EAAQgC,EAAQ0K,GACxC81C,EAAkBt7B,GAAS,YAAaA,EAAQA,EAAMi7B,iBAAc34C,EAC1ExJ,GAASyiD,EAAAA,EAAAA,KAAgBziD,EAAQgC,EAAQ0K,EAAS,CAAEy1C,gBACpDniD,GAAS0iD,EAAAA,EAAAA,KAAuB1iD,EAAQgC,EAAQ0K,EAASy1C,IACzDl3C,EAAAA,EAAAA,IAAUjL,GAEV,MAAM4V,QAAehB,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE2J,OAAM7R,UAASy1C,gBACjEvsC,GAAQ/T,SACX7B,GAASqL,EAAAA,EAAAA,MACTrL,GAASyiD,EAAAA,EAAAA,KAAgBziD,EAAQgC,EAAQ0K,EAAS,CAAEy1C,YAAaK,IACjExiD,GAAS0iD,EAAAA,EAAAA,KAAuB1iD,EAAQgC,EAAQ0K,EAAS81C,IACzDv3C,EAAAA,EAAAA,IAAUjL,GACZ,KAGFgM,EAAAA,EAAAA,IAAiB,0BAA0BgI,MAAOhU,EAAQmD,EAASqO,KACjE,MAAM,OAAExP,EAAM,QAAE0K,GAAY8E,EACtB+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAC1Bs/C,GAAcQ,EAAAA,EAAAA,KAAkB9hD,EAAQgC,GAC9C,IAAKuc,IAAS+iC,EACZ,OAGF,MAAMqB,GAAeC,EAAAA,EAAAA,KAAoB5iD,EAAQgC,IAASyM,KAAKo0C,GAAMA,EAAEvgD,MAAO,GAExEmO,EADakyC,EAAar+C,SAASoI,GACPi2C,EAAa7gD,QAAQQ,GAAOA,IAAOoK,IAAW,IAAIi2C,EAAcj2C,GAElG1M,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHihD,QAAS,IACJjhD,EAAOihD,QACVmB,SAAU,IACLpiD,EAAOihD,QAAQmB,SAClB,CAACpgD,GAAS,IACLs/C,EACH/wC,UAAWE,EAAa/L,MAAK,CAACC,EAAGC,IAAMA,EAAID,SAKnDsG,EAAAA,EAAAA,IAAUjL,SACW4U,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE2J,OAAMukC,SAAUryC,MAGvEzQ,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHihD,QAAS,IACJjhD,EAAOihD,QACVmB,SAAU,IACLpiD,EAAOihD,QAAQmB,SAClB,CAACpgD,GAAS,IACLs/C,EACH/wC,UAAWoyC,OAKnB13C,EAAAA,EAAAA,IAAUjL,GACZ,KAGFgM,EAAAA,EAAAA,IAAiB,mBAAmBgI,MAAOhU,EAAQmD,EAASqO,KAC1D,MAAM,OAAExP,GAAWwP,EACb+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EAAM,OAEX,MAAM3I,QAAehB,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE2J,SAC9C3I,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAASgiD,EAAAA,EAAAA,KAAkBhiD,EAAQgC,EAAQ4T,EAAOqrC,SAC9CrrC,EAAOmtC,kBACT/iD,GAASsiD,EAAAA,EAAAA,KAA2BtiD,EAAQgC,EAAQ4T,EAAOmtC,mBAE7D93C,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,0BAA0BgI,MAAOhU,EAAQmD,EAASqO,KACjE,MAAM,OAAExP,EAAM,SAAE6S,GAAarD,EACvB+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAC1Bs/C,GAAcQ,EAAAA,EAAAA,KAAkB9hD,EAAQgC,GAC9C,IAAKuc,GAAQ+iC,GAAanhB,cACxB,OAGF,MAAMvqB,QAAehB,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE2J,OAAM1J,aAC3De,IAIL5V,GAASqL,EAAAA,EAAAA,MACoC,IAAzCrD,OAAOC,OAAO2N,EAAOqrC,SAASp/C,SAChC7B,GAASgjD,EAAAA,EAAAA,KAA6BhjD,EAAQgC,GAAQ,IAGxDhC,GAASgiD,EAAAA,EAAAA,KAAkBhiD,EAAQgC,EAAQ4T,EAAOqrC,QAASrrC,EAAOrF,YAClEtF,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,sBAAsBgI,MAAOhU,EAAQmD,EAASqO,KAC7D,MAAM,OAAExP,EAAM,SAAE6S,GAAarD,EACvB+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAC1Bs/C,GAAcQ,EAAAA,EAAAA,KAAkB9hD,EAAQgC,GAC9C,IAAKuc,GAAQ+iC,GAAa2B,qBAAsB,OAEhD,MAAMrtC,QAAehB,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE2J,OAAM1J,aACvDe,IAIL5V,GAASqL,EAAAA,EAAAA,MACoC,IAAzCrD,OAAOC,OAAO2N,EAAOqrC,SAASp/C,SAChC7B,GAASgjD,EAAAA,EAAAA,KAA6BhjD,EAAQgC,GAAQ,GAAM,IAE9DhC,GAASgiD,EAAAA,EAAAA,KAAkBhiD,EAAQgC,EAAQ4T,EAAOqrC,aAASz3C,GAAW,IACtEyB,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,wBAAwBgI,MAAOhU,EAAQmD,EAASqO,KAC/D,MAAM,OAAExP,EAAM,SAAE8gD,GAAatxC,EACvB+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EACH,OAGF,MAAM3I,QAAehB,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE2J,OAAMvU,IAAK84C,IAC9DltC,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAASgiD,EAAAA,EAAAA,KAAkBhiD,EAAQgC,EAAQ4T,EAAOqrC,UAClDh2C,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,kBAAkBgI,MAAOhU,EAAQmD,EAASqO,KACzD,MAAM,OAAExP,EAAM,QAAE0K,GAAY8E,EACtB+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EACH,OAGF,MAAM3I,QAAehB,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE2J,OAAMukC,SAAU,CAACp2C,KAEhEkJ,IAIL5V,GAASqL,EAAAA,EAAAA,MACTrL,GAASkjD,EAAAA,EAAAA,KAAqBljD,EAAQgC,EAAQ0K,EAASkJ,EAAOgT,QAC9D3d,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,qBAAqBgI,MAAOhU,EAAQmD,EAASqO,KAC5D,MAAM,OACJxP,EAAM,QACN0K,EAAO,OACPwT,EAAM,kBACNijC,EAAiB,gBACjBC,EAAe,MACfl4B,EAAK,MACLrV,EAAK,MACL3R,GAAQC,EAAAA,EAAAA,OACNqN,EAEE+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EACH,OAGFve,GAASqjD,EAAAA,EAAAA,KAAwBrjD,GAAQ,EAAMkE,IAC/C+G,EAAAA,EAAAA,IAAUjL,GAEV,MAAM4V,QAAehB,EAAAA,EAAAA,IAAQ,qBAAsB,CACjD2J,OACA7R,UACAwT,SACAijC,oBACAC,kBACAvtC,QACAqV,UAEF,IAAKtV,EAIH,OAHA5V,GAASqL,EAAAA,EAAAA,MACTrL,GAASqjD,EAAAA,EAAAA,KAAwBrjD,GAAQ,EAAOkE,QAChD+G,EAAAA,EAAAA,IAAUjL,GAIZA,GAASqL,EAAAA,EAAAA,MACTrL,GAASsjD,EAAAA,EAAAA,KAAiBtjD,EAAQ0M,EAASkJ,EAAOgT,MAAOhT,EAAO6K,WAAYvc,IAC5E+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,eAAegI,MAAOhU,EAAQmD,EAASqO,KACtD,MAAM,OACJxP,EAAM,QACN0K,EAAO,YACP0R,EAAc,GAAE,OAChBC,EAAS,GAAE,MACXna,GAAQC,EAAAA,EAAAA,OACNqN,EACE+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EACH,OAGF,MAAMD,QAAiB1J,EAAAA,EAAAA,IAAQ,cAAe,CAC5C2J,OACA7R,UACA0R,cACAC,WAGF,IAAKC,EAAU,OAEf,MAAM,OAAE1I,EAAM,MAAExC,GAAUkL,EAE1B,GAAIlL,IAAUoL,EAAAA,IAMZ,OALArb,EAAQiM,iBAAiB,CACvBpO,SAASqb,EAAAA,EAAAA,IAAa,qCACtBnY,eAEFf,EAAQsb,iBAAiB,CAAEva,UAI7B,GAAK0R,EAAL,CAEA,GAAoB,aAAhBA,EAAOxT,KAQT,OAPAe,EAAQiM,iBAAiB,CACvBpO,QAAS4U,GACLyG,EAAAA,EAAAA,IAAa,2BACb,2EACJnY,eAEFf,EAAQsb,iBAAiB,CAAEva,UAI7B,GAAoB,iBAAhB0R,EAAOxT,KAAyB,CAClCpC,GAASqL,EAAAA,EAAAA,MACT,MAAMqT,GAAcxe,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOya,aAAaC,SACzDC,EAAiBH,IAAcA,EAAY7c,OAAS,IAAIyQ,SAAS9O,MAAMsb,GAAMA,EAAET,SAAWA,IAC1FU,EAAa,CACjBzP,MAAOsG,EAAOtG,MACdgD,QAASsD,EAAOtD,QAChB0M,SAAUH,GAAgBxQ,MAE5BrO,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B2e,YAAa,CACXhQ,WAAY,CAACjC,GACbuS,QAAS,QACTjd,SACAoc,cACAQ,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzD7a,IACH+G,EAAAA,EAAAA,IAAUjL,EACZ,CAEA,GAAoB,YAAhB4V,EAAOxT,KAAoB,CAC7BpC,GAASqL,EAAAA,EAAAA,MACT,MAAMqT,GAAcxe,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOya,aAAaC,SACzDC,EAAiBH,IAAcA,EAAY7c,OAAS,IAAIyQ,SAAS9O,MAAMsb,GAAMA,EAAET,SAAWA,IAC1FU,EAAa,CACjBG,WAAYtJ,EAAOsJ,WACnBb,OAAQzI,EAAOyI,OACf/O,MAAOuP,GAAgBxQ,MAEzBrO,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B2e,YAAa,CACXhQ,WAAY,CAACjC,GACb0R,cACApc,SACAid,QAAS,QACTL,SAAUF,EAAc,IAAIA,EAAaK,GAAc,CAACA,KAEzD7a,IACH+G,EAAAA,EAAAA,IAAUjL,EACZ,CArDmB,CAqDnB,KAGFgM,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,OACJxP,EAAM,QACN0K,EAAO,QACP62C,GACE/xC,EAEE+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EACH,OAGF,MAAMilC,EAAa,IAAID,EAAQE,gBAAiBF,EAAQG,cAClDC,EAAa,IAAIJ,EAAQK,gBAAiBL,EAAQM,cAElDC,GAAeC,EAAAA,EAAAA,KAA0B/jD,EAAQ,CACrDgkD,WAAYT,EAAQS,WACpBC,cAAeV,EAAQU,cACvBT,aACAG,aACAO,YAAa,UAGVtvC,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/B2J,OACAjc,GAAIoK,EACJ62C,QAASO,GACT,KAGJ93C,EAAAA,EAAAA,IAAiB,uBAAuBgI,MAAOhU,EAAQmD,EAASqO,KAC9D,MAAM,OAAExP,EAAM,SAAE6/C,GAAarwC,EACvB+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAC3Buc,SAEgB3J,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE2J,OAAMsjC,eAG5D7hD,GAASqL,EAAAA,EAAAA,MACTrL,GAASmkD,EAAAA,EAAAA,KAAwBnkD,EAAQgC,EAAQ6/C,IACjD52C,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,qBAAqBgI,MAAOhU,EAAQmD,EAASqO,KAC5D,MAAM,QAAEmf,GAAYnf,EACd4yC,EAAQzzB,EAAQliB,KAAKzM,IAAWsd,EAAAA,EAAAA,KAAWtf,EAAQgC,KAASF,OAAOyW,SACzE,IAAK6rC,EAAMviD,OAAQ,OAEnB,MAAM+T,QAAehB,EAAAA,EAAAA,IAAQ,qBAAsB,CAAEwvC,UACrD,IAAKxuC,EAAQ,OAEb,MAAMyuC,EAA0B,GAEhCrkD,GAASqL,EAAAA,EAAAA,MACTuK,EAAO1T,SAAQ,CAAC6N,EAAO7K,KACrB,MAAMqZ,EAAO6lC,EAAMl/C,GACnBlF,GAASskD,EAAAA,EAAAA,KAAWtkD,EAAQue,EAAKjc,GAAI,CACnCiiD,WAAYx0C,EACZy0C,WAAsB,IAAVz0C,IAGA,IAAVA,GACFs0C,EAAc34C,KAAK6S,EAAKjc,GAC1B,KAEF2I,EAAAA,EAAAA,IAAUjL,GAEVqkD,GAAeniD,SAASF,GAAWmB,EAAQ09B,gBAAgB,CAAE7+B,YAAU,KAGzEgK,EAAAA,EAAAA,IAAiB,qBAAqBgI,MAAOhU,EAAQmD,EAASqO,KAC5D,MAAM,OACJxP,EAAM,QAAE0K,EAAO,YAAEzI,EAAW,SAAE9B,EAAQ,kBAAEi7C,EAAiB,MAAEl5C,GAAQC,EAAAA,EAAAA,OACjEqN,EACE+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EAAM,OAEX,MAAM2I,GAAQC,EAAAA,EAAAA,KAAgBnnB,EAAQgC,EAAQ0K,GAC9C,IAAKwa,KAAW,YAAaA,GAAQ,OAErC,MAAMu9B,EAAmBv9B,EAAMw9B,aAC/B1kD,GAAS2kD,EAAAA,EAAAA,KAAwB3kD,EAAQgC,EAAQ0K,EAASvK,IAC1D8I,EAAAA,EAAAA,IAAUjL,GAENmC,EACFgB,EAAQa,oBAAoB,CAAEC,cAAa9B,WAAU+B,UAErDf,EAAQg7C,mBAAmB,CAAEl6C,cAAaC,UAG5C,MAAM0R,QAAehB,EAAAA,EAAAA,IAAQ,oBAAqB,CAChD2J,OAAM7R,UAASvK,WAAUi7C,sBAG3Bp9C,GAASqL,EAAAA,EAAAA,MACJuK,IACH5V,GAAS2kD,EAAAA,EAAAA,KAAwB3kD,EAAQgC,EAAQ0K,EAAS+3C,KAE5Dx5C,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,UAAEozC,GAAY,EAAI,YAAEC,GAAc,GAASrzC,GAAW,CAAC,GAE7DoD,EAAAA,EAAAA,IAAQ,sBAAuB,CAAEgwC,UAAWA,IAAa,EAAMC,YAAaA,IAAe,GAAO,I,0BC/kBpG74C,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,OACJpQ,EAAM,SACN0G,EAAWD,EAAAA,GAAc,KACzBzF,EAAO,SAAQ,qBACf0iD,GAAuB,EAAK,kBAC5BC,GAAoB,EAAK,kBACzBC,EAAiB,MACjB9gD,GAAQC,EAAAA,EAAAA,OACNqN,EAEE5E,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAEtDyJ,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GA8CxC,GA7CIyJ,EAASynC,cAAcC,OAAS1nC,EAASynC,cAAcE,SACzDt1C,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bo1C,aAAc,IACTznC,EAASynC,aACZE,QAAQ,IAETpxC,IAELf,EAAQ8hD,qBAAqB,CAAE/gD,UAE/Bf,EAAQwhB,iBAAiB,CAAEzgB,UAC3Bf,EAAQ+hD,uBAAuB,CAAEhhD,UACjCf,EAAQ+hD,uBAAuB,CAAEhhD,UACjCf,EAAQgiD,2BAA2B,CAAEjhD,UAEhC0I,GACHA,EAAmBxL,SAAWA,GAC3BwL,EAAmB9E,WAAaA,GAChC8E,EAAmBxK,OAASA,IAE3BhB,IACFpB,GAASolD,EAAAA,EAAAA,KAAsBplD,EAAQoB,EAAQ0G,EAAU,aAAc,GAAI5D,GAE3ElE,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B4+C,gBAAiB,CAAC,EAClByG,gCAAgC,GAC/BnhD,GAEHlE,GAASslD,EAAAA,EAAAA,KAAkBtlD,EAAQoB,EAAQ0G,EAAU5D,IAGvDlE,GAASumB,EAAAA,EAAAA,KAAsBvmB,EAAQkE,GAEvClE,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BulD,mBAAmB,EACnBrO,4BAAwB1tC,EACxBktC,qBAAiBltC,EACjB4P,0BAAsB5P,KAClBpI,KAAWlB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOqV,gBAAgBoH,UAAY,CACvEpH,gBAAiB,CAAC,EAClB0I,0BAA0B,IAE3B/d,IAGD9C,EAAQ,CACV,MAAMgC,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAE5BgC,GAAMkG,UAAY07C,EACpB7hD,EAAQqiD,eAAe,CAAEpkD,SAAQ8C,UACxB9C,KAAWlB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOuhD,kBAClDtiD,EAAQuiD,gBAAgB,CAAExhD,SAE9B,CAIA,OAFAf,EAAQwiD,gBAAgB,CAAEzhD,WAEnB0hD,EAAAA,EAAAA,KAAyB5lD,EAAQoB,EAAQ0G,EAAU1F,EAAM0iD,EAAsBC,EAAmB7gD,EAAM,KAGjH8H,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,GAAElP,EAAE,MAAE4B,GAAQC,EAAAA,EAAAA,OAAsBqN,GAC7B/J,EAAAA,EAAAA,KAAWzH,EAAQsC,GAWhCa,EAAQua,SAAS,CAAEpb,KAAI4B,UATrBf,EAAQiM,iBAAiB,CACvBpO,QAAS,CACPqO,IAAK,8BAEPnL,SAK2B,KAGjC8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,OAAEpQ,EAAM,SAAE0G,EAAWD,EAAAA,IAAmB2J,EAExCq0C,GAAUC,EAAAA,GAAAA,IAAqB1kD,EAAQ,SAAU0G,GAEnDi+C,EAAAA,GACF1gC,OAAO2gC,SAAUC,cAAcJ,GAE/BxgC,OAAOC,KAAKugC,EAAS,SACvB,KAGF75C,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OADArO,EAAQwiD,gBAAgB,CAAEzhD,WACnB0hD,EAAAA,EAAAA,KAAyB5lD,OAAQwJ,OAAWA,OAAWA,OAAWA,OAAWA,EAAWtF,EAAM,KAGvG8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,WAAE00C,EAAU,sBAAEC,GAAwB,EAAK,MAAEjiD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEjFxR,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,KAC3BE,EAAAA,EAAAA,KAAeF,EAAQkE,GAC1BkiD,iBAAiB,EACjBC,eAAgBH,EAChBC,yBACCjiD,GACHlE,EAAS,IAAKA,EAAQsmD,qBAAqB,IAC3Cr7C,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQua,SAAS,IAAKlM,EAAStN,SAAQ,KAGzC8H,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEtCxR,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,KAC3BE,EAAAA,EAAAA,KAAeF,EAAQkE,GAC1BkiD,iBAAiB,GAChBliD,GACHlE,EAAS,IAAKA,EAAQsmD,qBAAqB,IAC3Cr7C,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQkjB,WAAW,IAAK7U,EAAStN,SAAQ,KAG3C8H,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,OACJpQ,EAAM,KAAEiN,EAAI,SAAEvG,EAAWD,EAAAA,GAAc,MAAE0+C,EAAK,OAAEzkD,EAAM,MAAEoC,GAAQC,EAAAA,EAAAA,OAC9DqN,EAMJ,OAJIpQ,GACF+B,EAAQkjB,WAAW,CAAEjlB,SAAQ0G,WAAU5D,WAGlC0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BwmD,eAAgB,CACdplD,SACAiN,OACAk4C,QACAzkD,WAEDoC,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BymD,kBAAcj9C,GACbtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,gCAAgC,CAAChM,EAAQmD,EAASqO,KACjE,MAAM,uBAAEk1C,EAAsB,MAAExiD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAC9D,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B0mD,0BACCxiD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,gBAAgB,CAAChM,EAAQmD,EAASqO,KACjD,MAAM,iBAAEm1C,EAAgB,WAAEC,EAAU,MAAE1iD,GAAQC,EAAAA,EAAAA,OAAsBqN,GAE9D,OAAEpQ,IAAWyL,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EAE/D,IAAK9C,EAEH,YADA+B,EAAQua,SAAS,CAAEpb,GAAIskD,EAAW,GAAI1iD,UAIxC,MAAM2iD,EAAWD,EAAWlxB,QAAQt0B,GAEpC,IAAkB,IAAdylD,EACF,OAEF,MAAMC,EAASF,EAAWC,EAAWF,GAErCxjD,EAAQua,SAAS,CAAEpb,GAAIwkD,EAAQhC,sBAAsB,EAAM5gD,SAAQ,KAGrE8H,EAAAA,EAAAA,IAAiB,8BAA8B,CAAChM,EAAQmD,EAASqO,KAC/D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B+mD,6BAAyBv9C,GACxBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BgnD,mBAAex9C,GACdtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,OAAEpQ,EAAM,eAAEoS,EAAc,MAAEtP,GAAQC,EAAAA,EAAAA,OAAsBqN,EAC9D,OAAOy1C,EAAAA,EAAAA,KAA+BjnD,EAAQoB,EAAQoS,EAAgBtP,EAAM,KAG9E8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BknD,qBAAiB19C,GAChBtF,EAAM,KC9MX8H,EAAAA,EAAAA,IAAiB,iBAAiB,CAAChM,EAAQmD,EAASqO,KAClD,MAAM,OACJgzB,EAAM,MAAEtgC,GAAQC,EAAAA,EAAAA,OACdqN,EAECgzB,IAGLxkC,EAASukC,GADTvkC,GAASqL,EAAAA,EAAAA,MAC4Bm5B,GAAQ,GAAM,EAAMtgC,IACzD+G,EAAAA,EAAAA,IAAUjL,GAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,gBAAgB,CAAChM,EAAQmD,EAASqO,KACjD,MAAM,IACJnC,EAAG,OAAExM,EAAM,MAAEqB,GAAQC,EAAAA,EAAAA,OACnBqN,EACJ,OAAOsyB,GAAa9jC,EAAQqP,EAAKxM,EAAQqB,EAAM,KAGjD8H,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAGlD,OADAxR,EXuFK,SACLA,MAAekE,GAAQC,EAAAA,EAAAA,QAEvB,MACM4gC,GADkB7kC,EAAAA,EAAAA,KAAeF,EAAQkE,GACPggC,QAAQa,gBAEhD,OAAKA,EAEEI,GAAyBnlC,EAAQ+kC,GAAiB,EAAO7gC,GAFnClE,CAG/B,CWhGWmnD,CAA+BnnD,EAAQkE,GAC3C2hC,GAAiB7lC,EAAQkE,GAEvBlE,EAFsC8lC,GAAyB9lC,GAAQ,EAAOkE,EAExE,KAGf8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAE5C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GASxC,OARS0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BkkC,QAAS,IACJv2B,EAASu2B,QACZa,qBAAiBv7B,EACjBw7B,qBAAqB,IAEtB9gC,EAEU,KAGf8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAE5C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAElC+/B,EAAgBt2B,EAASu2B,QAAQD,cAEjC0B,EAAoB39B,OAAOuG,KAAK01B,GAChC2B,EAAqBD,EAAkB9jC,OAW7C,OATS+L,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BkkC,QAAS,IACJv2B,EAASu2B,QACZc,qBAAqB,EACrBD,gBAAiBa,EAAqBD,EAAkBC,EAAqB,QAAKp8B,EAClFy7B,YAAaW,EAAqB,IAEnC1hC,EAEU,KAGf8H,EAAAA,EAAAA,IAAiB,eAAe,CAAChM,EAAQmD,EAASqO,KAChD,MAAM,IAAEnC,EAAG,wBAAE+1B,EAAuB,MAAElhC,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAGhF,OAAKq0B,GADL7lC,EAASmlC,GAAyBnlC,EAAQqP,EAAK+1B,EAAyBlhC,GAC1CA,GAEvBlE,EAFsC8lC,GAAyB9lC,GAAQ,EAAOkE,EAExE,KAGf8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,uBAAE41C,EAAsB,MAAEljD,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAEpE61C,GAA0BD,IAC5BpnD,EAAOm5B,SAAS6S,MAAMC,mCXmJrB,SACLjsC,MAAekE,GAAQC,EAAAA,EAAAA,QAEvB,OAAO6D,OAAOuG,MAAKrO,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOggC,QAAQD,eAAepiC,OAAS,CACnF,CWvJiEylD,CAA4BtnD,EAAQkE,GAEnG,OAAImjD,GACFlkD,EAAQokD,kCAAkC,CAAErjD,UACrClE,IAGTA,EXiFK,SACLA,MACIkE,GAAQC,EAAAA,EAAAA,QAEZ,MAAM6/B,GAAkB9jC,EAAAA,EAAAA,KAAeF,EAAQkE,GAEzCsjD,EAA2Bx/C,OAAOy/C,YACtCz/C,OAAOsI,QAAQ0zB,EAAgBE,QAAQD,eAAeniC,QACpD,EAAE,CAAE0iC,KAAYA,EAAOa,wBAIrBqiB,EAAiC1/C,OAAOC,OAAOu/C,GAGrD,KAFiCE,EAA+B7lD,OAAS,GAGvE,OAAO+L,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BkkC,QAAS,IACJF,EAAgBE,QACnBa,qBAAiBv7B,EACjBy6B,cAAe,CAAC,EAChBW,kBAAmB,GACnBE,YAAa,KAEd5gC,GAGL,MAAMyjD,GAAsBC,EAAAA,EAAAA,KAAmB5nD,EAAQkE,GAEjD2jD,EAAkBF,GAAqBtiB,qBACzCsiB,EAAsBD,EAA+B,GAEnDI,GAAqBxjB,EAAAA,GAAAA,IAAaujB,GAEpCC,IACFN,EAAyBM,GAAsB,IAC1CD,EACHviB,kBAAkB,IAGtB,MAAMX,EAAgBX,EAAgBE,QAAQU,kBAAkB9iC,QAAQ2jC,GAAM+hB,EAAyB/hB,KAEvG,OAAO73B,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BkkC,QAAS,IACJF,EAAgBE,QACnBa,gBAAiB+iB,EACjB9iB,qBAAqB,EACrBf,cAAeujB,EACf5iB,kBAAmBD,IAEpBzgC,EACL,CWpIW6jD,CAAmB/nD,EAAQkE,GAC/B2hC,GAAiB7lC,EAAQkE,GAEvBlE,EAFsC8lC,GAAyB9lC,GAAQ,EAAOkE,GAExE,KAGf8H,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,MAAE+5B,EAAK,MAAErnC,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE7C,OXyIK,SACLxR,EAAWklC,MACPhhC,GAAQC,EAAAA,EAAAA,QAEZ,MAAM6/B,GAAkB9jC,EAAAA,EAAAA,KAAeF,EAAQkE,GAC/C,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BkkC,QAAS,IACJF,EAAgBE,QACnBgB,eAEDhhC,EACL,CWpJS8jD,CAAwBhoD,EAAQurC,EAAOrnC,EAAM,KAGtD8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,EAChCy2C,GAAeL,EAAAA,EAAAA,KAAmB5nD,EAAQkE,GAChD,GAAK+jD,GAAc5jC,IAInB,OAAOyf,GAAa9jC,GAFRskC,EAAAA,EAAAA,KAAa2jB,GAEQ,CAAEvP,KAAMlnC,EAAQknC,MAAQx0C,EAAM,KAGjE8H,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B+qC,qBAAiBvhC,GAChBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,kBAAkB,CAAChM,EAAQmD,EAASqO,KACnD,MAAM,MAAEgxB,EAAK,eAAEmJ,EAAc,MAAEznC,GAAQC,EAAAA,EAAAA,OAAsBqN,GACvD,cAAE02C,GAAkBloD,EAEpBmoD,EAAmB,IAAIj+C,IAAIg+C,GACjCC,EAAiBh+C,IAAIq4B,GAErBxiC,EAAS,IACJA,EACHkoD,cAAehgC,MAAMjR,KAAKkxC,IAG5B,MAAMx6C,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,GAAIyJ,EAASo9B,iBAAiBC,UAAW,CACvC,MAAM,OAAE1gC,EAAQkH,QAAS42C,GAAoBz6C,EAASo9B,gBAAgBC,UAEtE7nC,EAAQmH,GAAQ,IACV89C,EACJzc,kBAEJ,CAEA3rC,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B+qC,qBAAiBvhC,GAChBtF,IAEH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,MAAEywB,EAAK,UAAED,EAAS,MAAE99B,GAAQC,EAAAA,EAAAA,OAAsBqN,EAClDgzB,GAAS6jB,EAAAA,EAAAA,KAAaroD,EAAQgiC,EAAW99B,GAC/C,IAAKsgC,EAAQ,OAAOxkC,EAEpB,MAAMsoD,EAAmB9jB,EAAO+jB,cAAgB,IAAI/jB,EAAO+jB,cAAetmB,GAAS,CAACA,GAUpF,OARA9+B,EAAQ2gC,aAAa,CACnBz0B,IAAK2yB,EACLn/B,OAAQ,CACN0lD,cAAeD,GAEjBpkD,UAGKlE,CAAM,KAGfgM,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B6sC,+BAA2BrjC,GAC1BtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,IACJo1B,EAAG,OAAE9kC,EAAM,WAAE2oC,EAAU,MAAEvmC,GAAQC,EAAAA,EAAAA,OAC/BqN,EACEhE,GAAgBX,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAQ9C,OAEzDonD,EAAmB5hB,EAAI6hB,qBAAqB3mD,QAAQM,GAC/C,SAATA,GAAmBN,EAAOwC,SAASlC,KAGhComD,GAAkB3mD,QAUvB7B,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B0oD,yBAA0B,CACxB9hB,MACA9kC,OAAQ0mD,EACR/d,eAEDvmC,IACH+G,EAAAA,EAAAA,IAAUjL,IAhBRmD,EAAQwlD,cAAc,CACpBvnD,OAAQoM,GAAiBo5B,EAAItkC,GAC7BskC,MACA6D,aACAvmC,SAYa,KAGnB8H,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B0oD,8BAA0Bl/C,GACzBtF,EAAM,I,+DCnJX,MACM0kD,GAA8BC,EAAAA,IAAsBC,EAAAA,IAK1D,IAAIC,GAu5BJ,SAASC,GAAoBhpD,EAAqBoB,EAAgBuN,GAChE,MAAQvM,KAAMmN,EAAe,SAAEzH,IAAa+E,EAAAA,EAAAA,KAAyB7M,IAAW,CAAC,EAC3EipD,EAAO96B,EAAAA,GAEP/qB,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAE1BuQ,EAAmC,cAApBpC,GACjBf,EAAAA,EAAAA,KAA4BxO,EAAQoB,IACpCyI,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAE/B,IAAKgC,IAASuO,IAAiB7J,EAAU,OAEzC,MAAMoI,EAAWvB,EACdF,KAAKnM,GAAOqP,EAAarP,KACzBR,QAAQd,IAAYkoD,EAAAA,EAAAA,KAAgClpD,EAAQgB,EAAS8G,GAAUqhD,UAC/EzkD,MAAK,CAAC0kD,EAAUC,IAAaD,EAAS9mD,GAAK+mD,EAAS/mD,KAEjDgnD,EAAuB,GACvBC,EAAuB,GAE7Br5C,EAAShO,SAASlB,IAChB,MAAMonC,GAAS/qB,EAAAA,EAAAA,KAAcja,GAAQA,GAAOilC,EAAAA,EAAAA,KAAaroC,EAAQgB,GAC3DwoD,EAAe,KAAIphB,GAASqhB,EAAAA,EAAAA,KAAaR,EAAM7gB,GAAUpnC,EAAQ0oD,aAAaC,gBAAkB,MAChGC,GAAkBC,EAAAA,EAAAA,KAA0B7pD,EAAQgB,GAE1DsoD,EAAW59C,KAAK89C,GAChBF,EAAW59C,KAAM,GC5/Bd,SACLu9C,EACAjoD,GAEA,MAAMhB,GAASqL,EAAAA,EAAAA,MACTqC,GAAQo8C,EAAAA,GAAAA,IAAuB9oD,GAC/B+oD,EAAiBr8C,EAAS,GAAEA,KAAW,GACvCW,GAAO27C,EAAAA,GAAAA,GACX,CAAEhpD,UAASipD,oBAAoB,KAC9B3tC,KAAK,IAEFstC,GAAkBC,EAAAA,GAAAA,IAA0B7pD,EAAQgB,GAI1D,MAAQ,GAAE+oD,KAFUG,EAAAA,GAAAA,IAA6BjB,EAAMjoD,EAAS4oD,EAAiBv7C,GAAM,IAGzF,CD4+BuB87C,CAAyBlB,EAAMjoD,QAElDuoD,EAAW79C,KAAK89C,GAChBD,EAAW79C,KAAM,IAAE0+C,EAAAA,GAAAA,IAAsBnB,EAAMjoD,EAAS4oD,GAAiB,EAAO,GAAG,OAAU,KAG/FS,EAAAA,EAAAA,GAAoBf,EAAWhtC,KAAK,MAAOitC,EAAWjtC,KAAK,MAC7D,EAt7BAtQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,OACJpQ,EAAM,SAAE0G,EAAQ,aAAEwiD,EAAY,MAAEpmD,GAAQC,EAAAA,EAAAA,OACtCqN,EAIJ,OAFAxR,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQ0G,EAAU,mBAAoBwiD,IAEnElF,EAAAA,EAAAA,KAAsBplD,EAAQoB,EAAQ0G,EAAU,eAAgBwiD,EAAcpmD,EAAM,KAG7F8H,EAAAA,EAAAA,IAAiB,gBAAgB,CAAChM,EAAQmD,EAASqO,KACjD,MAAM,UAAErK,EAAS,MAAEjD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAC3C5E,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAC5D,IAAK0I,EACH,OAGF,MAAM,OAAExL,EAAM,SAAE0G,EAAQ,KAAE1F,GAASwK,EAC7B29C,EAAqB,cAATnoD,EAAuB,qBAAuB,YAEhE,OAAOsG,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQ0G,EAAUyiD,EAAWpjD,EAAU,KAG3E6E,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,KACJnD,EAAI,OAAEjN,EAAM,SAAE0G,EAAQ,KAAE1F,GACtBoP,EAEE+4C,EAAqB,cAATnoD,EAAuB,wBAA0B,eAEnE,OAAOsG,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQ0G,EAAUyiD,EAAWl8C,EAAK,KAGtErC,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GAC5C,OAAEpQ,EAAM,SAAE0G,IAAa+E,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EACzE,IAAK9C,IAAW0G,EACd,OAGF,MAAM6J,GAAe9H,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAC1CkX,GAAc7P,EAAAA,EAAAA,KAAkBzI,EAAQoB,EAAQ0G,EAAU5D,GAChE,IAAKyN,IAAiB2G,EACpB,OAGF,MAAMkyC,GAA2BC,EAAAA,EAAAA,IAASnyC,GAAchW,GAC/CiW,QAAQ5G,EAAarP,KAAO4mD,EAAAA,EAAAA,KAAgClpD,EAAQ2R,EAAarP,GAAKwF,GAAU4iD,WAGzG,OAAKF,GAIE9hD,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQ0G,EAAU,YAAa0iD,QAJjE,CAI0F,KAG5Fx+C,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,iBAAEm1C,EAAgB,MAAEziD,GAAQC,EAAAA,EAAAA,OAAsBqN,GAClD,OAAEpQ,EAAM,SAAE0G,IAAa+E,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EACzE,IAAK9C,IAAW0G,EACd,OAGF,MAAM6J,GAAe9H,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAC1CkX,GAAc7P,EAAAA,EAAAA,KAAkBzI,EAAQoB,EAAQ0G,EAAU5D,GAChE,IAAKyN,IAAiB2G,EACpB,OAGF,MAAM3R,GAAY0S,EAAAA,EAAAA,KAAYrZ,EAAQoB,EAAQ0G,IAAWnB,UAGzD,IAAIQ,EAEJ,IAJiBgB,EAAAA,EAAAA,KAAuBnI,EAAQoB,EAAQ0G,EAAU5D,IAIhDyC,GAAWI,aAQtB,CACL,MAAM4jD,EAAkB3iD,OAAOuG,KAAKoD,GAE9Bi5C,EADiBD,EAAgBj1B,QAAQ/uB,EAAUI,aAAaqnB,YACpCu4B,EAClCx/C,EAAYyjD,GAAYD,EAAgB9oD,OAAS,GAAK+oD,GAAY,EAC9D9/C,OAAO6/C,EAAgBC,SACvBphD,CACN,MAdE,GAAI1B,IAAaD,EAAAA,GACfV,GAAYiC,EAAAA,EAAAA,KAAwBpJ,EAAQoB,OACvC,CACL,MAAMyF,GAAa8D,EAAAA,EAAAA,KAAiB3K,EAAQoB,EAAQ0G,GAEpDX,EAAYN,GAAYQ,aAC1B,CASFlE,EAAQ8J,qBAAqB,CAC3BlG,aAAcI,EAAW8e,mBAAezc,EAAW0c,eAAW1c,EAAWtF,UAE3Ef,EAAQ2J,aAAa,CACnB1L,SACA0G,WACAX,UAAWA,EACXjD,SACA,KAGJ8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,OACJpQ,EAAM,SAAE0G,EAAQ,UAAEX,EAAS,OAAE0jD,EAAM,OAAEC,EAAM,aAAEC,EAAY,QAAEzqB,EAAO,MAClEp8B,GAAQC,EAAAA,EAAAA,OACNqN,EAEE7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B48B,YAAa,CACXx7B,SACA0G,WACAX,YACA0jD,OAAQA,GAAUl9C,EAASivB,YAAYiuB,OACvCC,OAAQA,GAAUn9C,EAASivB,YAAYkuB,OACvCC,aAAcA,GAAgBp9C,EAASivB,YAAYmuB,cAAgB/qD,EAAO48B,YAAYouB,iBACtFC,0BAAqEzhD,IAA9CmE,EAASivB,YAAYquB,qBACxCjrD,EAAO48B,YAAYsuB,yBACnBv9C,EAASivB,YAAYquB,qBACzB3qB,QAASA,GAAW3yB,EAASivB,YAAY0D,UAE1Cp8B,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,OACJs5C,EAAM,MAAE5mD,GAAQC,EAAAA,EAAAA,OACdqN,EAEJ,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B48B,YAAa,KACR18B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO04B,YACjCkuB,SACAxqB,SAAS,IAEVp8B,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,8BAA8B,CAAChM,EAAQmD,EAASqO,KAC/D,MAAM,aACJu5C,EAAY,qBAAEE,EAAoB,MAAE/mD,GAAQC,EAAAA,EAAAA,OAC1CqN,EAWJ,OATAxR,EAAS,IACJA,EACH48B,YAAa,IACR58B,EAAO48B,YACVouB,iBAAkBD,EAClBG,yBAA0BD,KAIvBr9C,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B48B,YAAa,KACR18B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO04B,YACjCmuB,eACAE,yBAED/mD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,QACJ8uB,EAAO,MAAEp8B,GAAQC,EAAAA,EAAAA,OACfqN,EAEJ,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B48B,YAAa,KACR18B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO04B,YACjC0D,YAEDp8B,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,OACJq5C,EAAM,MAAE3mD,GAAQC,EAAAA,EAAAA,OACdqN,EAEJ,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B48B,YAAa,KACR18B,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO04B,YACjCiuB,WAED3mD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B48B,YAAa,CACXkuB,OAAQn9C,EAASivB,YAAYkuB,OAC7BC,aAAcp9C,EAASivB,YAAYmuB,aACnCE,qBAAsBt9C,EAASivB,YAAYquB,qBAC3C3qB,QAAS3yB,EAASivB,YAAY0D,UAE/Bp8B,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,OAAEpQ,EAAM,UAAE+F,EAAS,MAAEjD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEnD25C,GAAsBC,EAAAA,EAAAA,KAAyBprD,GAAQI,EAAAA,EAAAA,MAAe8D,GACtEyJ,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,GAAKinD,GAaE,GAAI/pD,IAAWuM,EAASyS,YAAYhf,QAAU+F,IAAcwG,EAASyS,YAAYjZ,UACtF,OAAOyG,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BogB,YAAa,CACXhf,SACA+F,YACAkZ,OAAQ,CAAC,IAEVnc,QAnBHmhB,OAAOja,YAAW,KAChBpL,GAASqL,EAAAA,EAAAA,MAETrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BogB,YAAa,CACXhf,SACA+F,YACAkZ,OAAQ,CAAC,IAEVnc,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,GAhOW,IA4OhB,KAGlBgM,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BogB,YAAa,CAAC,GACblc,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5C5E,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAC5D,IAAK0I,EACH,OAGF,MAAM,OAAExL,EAAM,SAAE0G,EAAQ,KAAE1F,GAASwK,EAE7B8I,GAAgB/J,EAAAA,EAAAA,KAAiBvK,EAAQ0G,EAAU9H,EAAOiC,eAEhE,IAAIoF,EACJ,GAAIS,IAAaD,EAAAA,GACf,GAAa,WAATzF,EAAmB,CACrB,MAAMipD,GAAmB76C,EAAAA,EAAAA,KAAgBxQ,EAAQoB,EAAQyG,EAAAA,IACzD,IAAKwjD,GAAkBxpD,OACrB,OAGFwF,EAAgBgkD,EAAiBA,EAAiBxpD,OAAS,EAC7D,KAAO,CACLwF,GAAgB+B,EAAAA,EAAAA,KAAwBpJ,EAAQoB,GAEhD,MAAMuQ,GAAe9H,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAE1CkqD,EAAkBtjD,OAAOC,OAAO0J,GAAc45C,UAAU,GAC1DlkD,IAAiBmkD,EAAAA,EAAAA,KAAuBF,IAAoBA,EAAgBhpD,GAAK+E,IACnFA,EAAgBikD,EAAgBhpD,GAEpC,MACK,GAAIoT,EACTrO,GAAgB+B,EAAAA,EAAAA,KAAwBpJ,EAAQ8L,OAAOhE,GAAW,aAC7D,CACL,MAAMjB,GAAa8D,EAAAA,EAAAA,KAAiB3K,EAAQoB,EAAQ0G,GAEpDT,EAAgBR,GAAYQ,aAC9B,CAEKA,GAILlE,EAAQ2J,aAAa,CACnB1L,SACA0G,WACAyH,gBAAiBnN,EACjB+E,UAAWE,EACX0F,aAAa,EACbi4C,mBAAmB,EACnB9gD,SACA,KAGJ8H,EAAAA,EAAAA,IAAiB,kBAAkB,CAAChM,EAAQmD,EAASqO,KACnD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5C5E,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAC5D,IAAK0I,EACH,OAGF,MAAM,OAAExL,EAAM,SAAE0G,GAAa8E,EAEvB6+C,GAAaC,EAAAA,EAAAA,KAAiB1rD,EAAQoB,EAAQ0G,EAAU5D,GAE9D,GAAKunD,GAAoC,IAAtBA,EAAW5pD,OAEvB,CACL,MAAMsF,EAAYskD,EAAWE,MAE7B3rD,GAASolD,EAAAA,EAAAA,KAAsBplD,EAAQoB,EAAQ0G,EAAU,aAAc,IAAI2jD,GAAavnD,IAExF+G,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQ2J,aAAa,CACnB1L,SACA0G,WACAX,UAAWA,EACXjD,QACA8gD,mBAAmB,GAEvB,MAfE7hD,EAAQyoD,iBAAiB,CAAE1nD,SAiBb,KAGlB8H,EAAAA,EAAAA,IAAiB,gBAAgB,CAAChM,EAAQmD,EAASqO,KACjD,MAAM,OACJpQ,EAAM,SAAE0G,EAAWD,EAAAA,GAAc,gBAAE0H,EAAkB,SAAQ,YAAExC,EAAW,UAAEkO,EAAS,cAAE4wC,EAAa,eACpGC,EAAc,oBAAE9+C,EAAmB,qBAAE83C,EAAoB,kBAAEE,EAAiB,MAAE+G,EAAK,qBAAE3M,EAAoB,MACzGl7C,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,IAAI,UAAErK,GAAcqK,EAGpB,KADa/J,EAAAA,EAAAA,KAAWzH,EAAQoB,GAG9B,YADA+B,EAAQiM,iBAAiB,CAAEpO,SAASqb,EAAAA,EAAAA,IAAa,yCAA0CnY,UAI7F,QAAkBsF,IAAdyR,EAAyB,CAC3B,MAAMjR,GAAMgiD,EAAAA,EAAAA,KAAmChsD,EAAQ6rD,EAAgB5wC,GACnEjR,GAAKnI,UACLsF,IAAa8kD,EAAAA,EAAAA,IAAQjiD,GAE3B,CAEA,MAAM4C,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GACtDgoD,GAAoBt/C,GACxBxL,IAAWwL,EAAmBxL,QAC3B0G,IAAa8E,EAAmB9E,UAChCyH,IAAoB3C,EAAmBxK,KA0B5C,GAvBI2mD,KACFhhC,aAAaghC,IACbA,QAAcv/C,GAEhBu/C,GAAc1jC,OAAOja,YAAW,KAC9BpL,GAASqL,EAAAA,EAAAA,MACTrL,GAASmsD,EAAAA,EAAAA,KAAqB,CAAEnsD,UAAUkE,GAC1ClE,GAASosD,EAAAA,EAAAA,KAAqBpsD,OAAQwJ,EAAWtF,IACjD+G,EAAAA,EAAAA,IAAUjL,EAAO,GAChB+M,EAAc67C,GAnXI,MAqXrB5oD,GAASmsD,EAAAA,EAAAA,KAAqB,CAC5BnsD,SACAoB,SACA+F,YACAW,WACAiF,cACAC,sBACA++C,QACA3M,wBACCl7C,GACHlE,GAASosD,EAAAA,EAAAA,KAAqBpsD,OAAQwJ,EAAWtF,GAE7C4nD,EAAgB,CAClB,MAAML,GAAaC,EAAAA,EAAAA,KAAiB1rD,EAAQoB,EAAQ0G,EAAU5D,IAAU,GACxElE,GAASolD,EAAAA,EAAAA,KAAsBplD,EAAQoB,EAAQ0G,EAAU,aAAc,IAAI2jD,EAAYK,GAAiB5nD,EAC1G,CAEIgoD,IACFlsD,GAASosD,EAAAA,EAAAA,KAAqBpsD,EAAQqsD,EAAAA,GAAeC,OAAQpoD,IAG/D,MAAMoU,GAAc7P,EAAAA,EAAAA,KAAkBzI,EAAQoB,EAAQ0G,EAAU5D,GAChE,GAAIoU,GAAeA,EAAYhU,SAAS6C,GAUtC,OATA8D,EAAAA,EAAAA,IAAUjL,EAAQ,CAAE2Y,uBAAuB,SAC3CxV,EAAQkjB,WAAW,CACjBjlB,SACA0G,WACA1F,KAAMmN,EACNu1C,uBACAE,oBACA9gD,UASJ,GAJIgoD,IACFlsD,GAASolD,EAAAA,EAAAA,KAAsBplD,EAAQoB,EAAQ0G,EAAU,mBAAe0B,EAAWtF,IAGjFoU,IAAgB4zC,EAAkB,CACpC,MAAMp3C,EAAY3N,EAAYmR,EAAY,GAAK+zC,EAAAA,GAAeE,KAAOF,EAAAA,GAAeG,GACpFxsD,GAASosD,EAAAA,EAAAA,KAAqBpsD,EAAQ8U,EAAW5Q,EACnD,EAEIuoD,EAAAA,GAAAA,QACFC,EAAAA,GAAAA,OAGFzhD,EAAAA,EAAAA,IAAUjL,EAAQ,CAAE2Y,uBAAuB,IAE3CxV,EAAQkjB,WAAW,CACjBjlB,SACA0G,WACA1F,KAAMmN,EACNu1C,uBACAE,oBACA9gD,UAEFf,EAAQ8N,qBAAqB,CAC3B7P,SACA0G,WACA5D,QACAiU,mBAAmB,GAEL,KAGlBnM,EAAAA,EAAAA,IAAiB,qCAAqC,CAAChM,EAAQmD,EAASqO,KACtE,MAAM,+BAAE6zC,EAA8B,MAAEnhD,GAAQC,EAAAA,EAAAA,OAAsBqN,EACtE,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BqlD,kCACCnhD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,iBAAiB,CAAChM,EAAQmD,EAASqO,KAClD,MAAM,WACJkP,EAAU,UAAEvZ,EAAS,UAAE+e,EAAS,MAAEhiB,GAAQC,EAAAA,EAAAA,OACxCqN,EACJ,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B6lB,gBAAiB,CACfnF,aACAvZ,YACA+e,aAEFjE,0BAA0B,GACzB/d,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,WACJkP,EAAU,WAAE/R,EAAU,QAAEjC,EAAO,UAAEuO,EAAS,YAAE2F,EAAW,MAAE1c,GAAQC,EAAAA,EAAAA,OAC/DqN,EACJ,IAAIm7C,EAIJ,OAHI1xC,IACF0xC,GAAoBlP,EAAAA,EAAAA,KAA0Bz9C,EAAQ0gB,EAAYzF,KAE7DrN,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BuZ,gBAAiB,CACfmH,aACA/R,WAAYg+C,GAAqBh+C,EACjCjC,UACAkU,eAEFqB,0BAA0B,GACzB/d,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BuZ,gBAAiB,KACZrZ,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOqV,gBACjCoH,cAAUnX,EACVqX,WAAW,EACXC,YAAY,GAEdmB,0BAA0B,GACzB/d,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,UAAEqP,EAAS,MAAE3c,GAAQC,EAAAA,EAAAA,OAAsBqN,EAC3C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BuZ,gBAAiB,IACZ5L,EAAS4L,gBACZsH,YAEAC,WAAYD,GAAalT,EAAS4L,gBAAgBuH,aAEnD5c,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,WAAEsP,EAAU,MAAE5c,GAAQC,EAAAA,EAAAA,OAAsBqN,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BuZ,gBAAiB,KACZrZ,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOqV,gBACjCuH,aACAD,UAAWC,IAEZ5c,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElDxR,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BiiB,0BAA0B,EAC1B1I,gBAAiB,CAAC,EAClBsM,gBAAiB,CAAC,GACjB3hB,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,sCAAsC,CAAChM,EAAQmD,EAASqO,KACvE,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,IAAKyJ,EAASi/C,iBACZ,OAGF,MAAQxrD,OAAQsf,EAAU,WAAE/R,GAAehB,EAASi/C,iBAE9CC,EAAwBl+C,EAAW7M,QAAQQ,IAC/C,MAAMtB,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQ0gB,EAAYpe,GACtD,OAAOtB,IAAW2gB,EAAAA,EAAAA,KAAwB3hB,EAAQgB,EAAQ,IAGvD6rD,EAAsBhrD,QAI3BsB,EAAQ2pD,gBAAgB,CAAEpsC,aAAY/R,WAAYk+C,EAAuB3oD,SAAQ,KAGnF8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,MAAEqB,EAAK,MAAE3O,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEvC2Y,GAAO4iC,EAAAA,EAAAA,KAAal6C,EAAO,YACjC,GAAKsX,EAGL,OADS6iC,EAAAA,EAAAA,KAA2BhtD,EAAQ,CAACmqB,GAAOjmB,EACvC,KAGf8H,EAAAA,EAAAA,IAAiB,4BAA4B,CAAChM,EAAQmD,EAASqO,KAC7D,MAAM,YAAEy7C,EAAW,MAAE/oD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAInD,OAFSw7C,EAAAA,EAAAA,KAA2BhtD,EAAQitD,EAAa/oD,EAE5C,KAGf8H,EAAAA,EAAAA,IAAiB,iBAAiB,CAAChM,EAAQmD,EAASqO,KAClD,MAAM,MAAEqB,EAAK,cAAE7L,EAAa,MAAE9C,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEtD2Y,GAAO4iC,EAAAA,EAAAA,KAAal6C,EAAO,YACjC,IAAKsX,EAAM,OAEX,MACM+iC,EAAW,CACfC,KAFW,SAAUt6C,EAAQA,EAAMs6C,KAAO,EAG1CC,QAAQC,EAAAA,EAAAA,KAAex6C,EAAO,YAC9By6C,UAAUC,EAAAA,EAAAA,KAAiB16C,GAC3B26C,aAAcxmD,GAAe5F,OAC7BqsD,gBAAiBzmD,GAAe1E,IAGlC,OAAOorD,EAAAA,EAAAA,KAAuB1tD,EAAQmqB,EAAM+iC,EAAUhpD,EAAM,KAG9D8H,EAAAA,EAAAA,IAAiB,4BAA4B,CAAChM,EAAQmD,EAASqO,KAC7D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,IAAKyJ,EAASi/C,iBACZ,OAGF,MAAM,OAAExrD,EAAM,WAAEuN,GAAehB,EAASi/C,kBAClC,SAAE9kD,IAAa+E,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EAE3DyN,GAAe9H,EAAAA,EAAAA,KAAmB7J,EAAQoB,GAC3CuQ,GAAiB7J,GACL6G,EAAWF,KAAKnM,GAAOqP,EAAarP,KAClDR,QAAQd,IAAYkoD,EAAAA,EAAAA,KAAgClpD,EAAQgB,EAAS8G,GAAU6lD,cACzEzrD,SAASlB,IAChB,MAAM6R,GAAQ+6C,EAAAA,EAAAA,KAA4B5sD,GACrC6R,GACL1P,EAAQ0qD,cAAc,CAAEh7C,QAAO7L,cAAehG,EAASkD,SAAQ,GAC/D,KAGJ8H,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,UAAErK,EAAS,MAAEjD,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EACvDkM,GAAWmC,EAAAA,EAAAA,KAAkB7f,EAAQkE,GAC3C,OAAKwZ,GAIEowC,EAAAA,EAAAA,KAAuB9tD,EAAQ0d,EAASpb,GAAI6E,EAAWjD,GAHrDlE,CAG2D,KAGtEgM,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,UACJrK,EAAS,UACT8T,EAAS,gBACT8yC,EAAe,UACfC,EAAS,MACT9pD,GAAQC,EAAAA,EAAAA,OACNqN,EACE5E,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAC5D,IAAK0I,EACH,OAGF,MAAM,OAAExL,EAAM,SAAE0G,EAAU1F,KAAMmN,GAAoB3C,EAEpD5M,GAASiuD,EAAAA,EAAAA,KACPjuD,EAAQoB,EAAQ0G,EAAUyH,EAAiBpI,EAAW8T,EAAW8yC,EAAiBC,EAAW9pD,IAG/F+G,EAAAA,EAAAA,IAAUjL,GAENA,EAAOkuD,4BACT/qD,EAAQgrD,yBACRhrD,EAAQiM,iBAAiB,CAEvBpO,QAAU,mDAAkDotD,EAAAA,GAAe,WAAa,8BACxFlqD,UAEJ,KAGF8H,EAAAA,EAAAA,IAAiB,0BAA2BhM,IAC1C,GAAKA,EAAOkuD,0BAIZ,MAAO,IACFluD,EACHkuD,2BAA2B,EAC5B,KAGHliD,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO+U,EAAAA,EAAAA,KAAsBvmB,EAAQkE,EAAM,KAG7C8H,EAAAA,EAAAA,IAAiB,iBAAiB,CAAChM,EAAQmD,EAASqO,KAClD,MAAM,OAAEq2B,EAAM,MAAE3jC,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAE1D,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BquD,UAAW,CACT/Y,QAAQ,EACRzN,WAED3jC,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,kBAAkB,CAAChM,EAAQmD,EAASqO,KACnD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BquD,UAAW,CACT/Y,QAAQ,IAETpxC,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,4BAA4B,CAAChM,EAAQmD,KACpD,GAAImrD,EAAAA,KAAoB7rD,KAAKC,MAAQoI,OAAOwjD,EAAAA,KA1qBR,OA2qBlC,OAGF,MAAMC,EAAiBC,UAAYzzC,MAAM,KAAK5D,MAAM,EAAG,GAAGmF,KAAK,MACzD,qBAAExK,GAAyB9R,EAEjC,GAAI8R,EAAqBtO,MAAK,EAAG0rB,aAAcA,IAAYq/B,IACzD,OAGF,MAAMvtD,EAAkC,CACtCI,OAAQyQ,EAAAA,IACR6C,MAAM4qB,EAAAA,GAAAA,MACN95B,QAAS,CACP6I,MAAMogD,EAAAA,GAAAA,I,k8GAA8C,IAEtDprD,YAAY,GAGdF,EAAQsP,0BAA0B,CAChCzR,QAASA,EACTkuB,QAASq/B,GACT,KAGJviD,EAAAA,EAAAA,IAAiB,6BAA6B,CAAChM,EAAQmD,EAASqO,KAC9D,MAAM,QAAExQ,EAAO,QAAEkuB,GAAY1d,GACvB,qBAAEM,GAAyB9R,EAE3B+P,EAAQpP,KAAKE,KACjBuI,EAAAA,EAAAA,KAAwBpJ,EAAQ6R,EAAAA,MAAkC,KAC/DC,EAAqBrD,KAAI,EAAGnM,QAASA,KAEpCosD,GAAkB58C,EAAqBjQ,OAAS,GA3sBf,IA6sBjCS,EAAK3B,KAAK6B,MAAMuN,GAAS2+C,EAE/B1tD,EAAQ2I,gBAAkB3I,EAAQsB,GAClCtB,EAAQsB,GAAKA,EAEb,MAAMqsD,EAAsB,CAC1BrsD,KACAtB,UACAkuB,UACAtrB,UAAU,GAGZ5D,EAAS,IACJA,EACH8R,qBAAsB,IACjBA,EAAqBqF,OA5tBW,KA6tBnCw3C,KAGJ1jD,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQuZ,UAAU,CAChB,QAAS,aACTpa,GAAItB,EAAQsB,GACZlB,OAAQJ,EAAQI,OAChBJ,WACA,KAGJgL,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,OAAEpQ,EAAM,UAAE+F,EAAS,MAAEjD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEzD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B4uD,aAAc,CAAExtD,SAAQ+F,cACvBjD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B4uD,kBAAcplD,GACbtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,OAAEpQ,EAAM,UAAE+F,EAAS,MAAEjD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEzD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B6uD,YAAa,CAAEztD,SAAQ+F,cACtBjD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B6uD,iBAAarlD,GACZtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,kCAAkC,CAAChM,EAAQmD,EAASqO,KACnE,MAAM,OAAEpQ,EAAM,WAAE0tD,EAAU,MAAE5qD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE1D,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B+uD,2BAA4B,CAAE3tD,SAAQ0tD,eACrC5qD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,mCAAmC,CAAChM,EAAQmD,EAASqO,KACpE,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B+uD,gCAA4BvlD,GAC3BtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,OAAEpQ,EAAM,UAAE+F,EAAS,MAAEjD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEnDw9C,EAAiB7nD,GACnB8nD,EAAAA,EAAAA,KAA0CjvD,EAAQoB,EAAQ+F,EAAWjD,IACrEgrD,EAAAA,EAAAA,KAAuClvD,EAAQoB,EAAQ8C,GAE3D,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BmvD,kBAAmB,CAAE/tD,SAAQ+F,YAAW6nD,mBACvC9qD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BmvD,uBAAmB3lD,GAClBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,IAAKyJ,EAASi/C,iBACZ,OAGF,MAAM,OAAExrD,EAAM,WAAEuN,GAAehB,EAASi/C,iBACxC5D,GAAoBhpD,EAAQoB,EAAQuN,EAAW,KAGjD3C,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,WAAE7C,EAAU,MAAEzK,GAAQC,EAAAA,EAAAA,OAAsBqN,EAC5CpO,GAAOyc,EAAAA,EAAAA,KAAkB7f,EAAQkE,GAClCyK,GAAoC,IAAtBA,EAAW9M,QAAiBuB,GAI/C4lD,GAAoBhpD,EAAQoD,EAAKd,GAAIqM,EAAW,KAGlD3C,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,QAAExQ,EAAO,MAAEkD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAC/CxR,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BovD,kBAAmB,CACjBpuD,YAEDkD,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClDxR,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BovD,uBAAmB5lD,GAClBtF,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B4jB,mBAAepa,GACdtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B2e,iBAAanV,GACZtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,6BAA6B,CAAChM,EAAQmD,EAASqO,KAC9D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5CoS,GAAgB1jB,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO0f,cACpD,GAAKA,EAAL,CAIA,GAAsC,IAAlCA,EAAchF,SAAS/c,OAK3B,OAAO+L,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B4jB,cAAe,IACVA,EACHhF,SAAUgF,EAAchF,SAASzH,MAAM,GAAI,KAE5CjT,GATDf,EAAQugB,mBAAmB,CAAExf,SAH/B,CAYS,KAGX8H,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5CmN,GAAcze,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOya,YAClD,GAAKA,EAAL,CAIA,GAAoC,IAAhCA,EAAYC,SAAS/c,OAKzB,OAAO+L,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B2e,YAAa,IACRA,EACHC,SAAUD,EAAYC,SAASzH,MAAM,GAAI,KAE1CjT,GATDf,EAAQsb,iBAAiB,CAAEva,SAH7B,CAYS,KAGX8H,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,OAAEpQ,EAAM,UAAE+F,EAAS,MAAEjD,GAAQC,EAAAA,EAAAA,OAAsBqN,EACzD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BqvD,kBAAmB,CAAEjuD,SAAQ+F,cAC5BjD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BqvD,uBAAmB7lD,GAClBtF,EAAM,KAsCX8H,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,QACJxQ,EAAO,WAAEsuD,EAAU,MAAEC,EAAK,MAC1BrrD,GAAQC,EAAAA,EAAAA,OACNqN,EAEJxR,GAASqL,EAAAA,EAAAA,MAETrL,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BwvD,mBAAoB,CAClBF,aACAC,QACAvuD,YAEDkD,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BwvD,wBAAoBhmD,GACnBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,OAAEpQ,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAE1D,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5ByvD,cAAe,CACbruD,WAED8C,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5ByvD,mBAAejmD,GACdtF,EAAM,KE5iCX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,MAAE0Z,EAAK,MAAEhnB,GAAQC,EAAAA,EAAAA,OAAsBqN,GACvC,OAAEpQ,EAAM,eAAEsuD,IAAmBxvD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOisB,aAE3Dw/B,EAAiBzkC,GAASwkC,IAAmBE,EAAAA,GAAoBC,QACnE,CAAE5mD,OAAQ7H,EAAQ8O,UAAU,QAAS1G,EAEzC,OAAOinB,EAAAA,EAAAA,KAAmBzwB,EAAQ,CAChC4wB,cAAe,CAAC,EAChBF,aAAc,CAAC,EACfM,mBAAexnB,EACfmmD,iBACAzkC,SACChnB,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,MAAiB,UAAE2rD,GAAct+C,GAAW,CAAC,EAC7D,OAAOif,EAAAA,EAAAA,KAAmBzwB,EAAQ,CAChC8vD,aACC5rD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,GAAElP,GAAOkP,GACT,qBAAEu+C,GAAyB/vD,EAEjC,IAAK+vD,EACH,MAAO,IACF/vD,EACH+vD,qBAAsB,CAACztD,IAI3B,MAAM0tD,EAAeD,EAAqBjuD,QAAQV,GAAWA,IAAWkB,IAMxE,OALA0tD,EAAa3tD,QAAQC,GACjB0tD,EAAanuD,OAtCY,IAuC3BmuD,EAAarE,MAGR,IACF3rD,EACH+vD,qBAAsBC,EACvB,KAGHhkD,EAAAA,EAAAA,IAAiB,2BAA4BhM,IACpC,IACFA,EACH+vD,0BAAsBvmD,OAI1BwC,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,QAAEhM,EAAO,MAAEtB,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE/C,OAAOy+C,EAAAA,EAAAA,IAA0BjwD,EAAQwF,EAAStB,EAAM,KAG1D8H,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,GAAElP,EAAE,MAAE4B,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE1C,OAAOif,EAAAA,EAAAA,KAAmBzwB,EAAQ,CAAEoB,OAAQkB,EAAI4oB,WAAO1hB,EAAWwnB,mBAAexnB,GAAatF,EAAM,KC3DtG8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GAC5C,OAAEpQ,EAAM,SAAE0G,IAAa+E,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EACzE,GAAK9C,GAAW0G,EAIhB,OAAO6rB,EAAAA,EAAAA,KAAmB3zB,EAAQoB,EAAQ0G,EAAU,CAAC,EAAG5D,EAAM,KAGhE8H,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GAC5C,OAAEpQ,EAAM,SAAE0G,IAAa+E,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EACzE,GAAK9C,GAAW0G,EAIhB,OAAOw9C,EAAAA,EAAAA,KAAkBtlD,EAAQoB,EAAQ0G,EAAU5D,EAAM,KAG3D8H,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,OACJ3O,EAAM,MAAEqB,GAAQC,EAAAA,EAAAA,OACdqN,EAEJ,IAAIpQ,EACA0G,EACJ,GAAI0J,EAAQpQ,OACVA,EAASoQ,EAAQpQ,OACjB0G,EAAW0J,EAAQ1J,UAAYD,EAAAA,OAC1B,CACL,MAAM+E,GAAqBC,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAC5D,IAAK0I,EACH,OAEFxL,EAASwL,EAAmBxL,OAC5B0G,EAAW8E,EAAmB9E,QAChC,CAIA,OAFS6rB,EAAAA,EAAAA,KAAmB3zB,EAAQoB,EAAQ0G,EAAUjF,EAAQqB,EAEjD,KAGf8H,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GAC5C,OAAEpQ,EAAM,SAAE0G,IAAa+E,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EACzE,GAAK9C,GAAW0G,EAIhB,OAAOooD,EAAAA,EAAAA,KAAkBlwD,EAAQoB,EAAQ0G,EAAU5D,EAAM,KAG3D8H,EAAAA,EAAAA,IAAiB,4BAA4B,CAAChM,EAAQmD,EAASqO,KAC7D,MAAM,UAAEsB,EAAS,MAAE5O,GAAQC,EAAAA,EAAAA,OAAsBqN,GAC3C,OAAEpQ,EAAM,SAAE0G,IAAa+E,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EACzE,GAAK9C,GAAW0G,EAIhB,OAAOqoD,EAAAA,EAAAA,KAA4BnwD,EAAQoB,EAAQ0G,EAAUgL,EAAW5O,EAAM,KCpEhF8H,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,MAAE0Z,EAAK,MAAEhnB,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE7C,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BowD,cAAe,CACbllC,QACAkE,eAAW5lB,IAEZtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,MAAE0Z,EAAK,MAAEhnB,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE7C,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BwvB,UAAW,CACTtE,QACAhL,YAAQ1W,EAERjI,aAASiI,IAEVtF,EAAM,KCpBX8H,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,MACJ0Z,EAAK,MACLhnB,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,OAAOmwB,EAAAA,EAAAA,KAAiB3hC,EAAQ,CAC9B0hC,mBAAel4B,EACfi4B,kBAAcj4B,EACdmmD,eAAgBp3C,QAAQ2S,GACxBA,SACChnB,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,OAAE0K,EAAM,MAAEhY,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE9C,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BqwD,WAAY,CAAEn0C,WACbhY,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BqwD,WAAY,CACVC,iBAAiB,IAElBpsD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAOsvB,EAAAA,EAAAA,KAAsB9gC,EAAQkE,EAAM,KAG7C8H,EAAAA,EAAAA,IAAiB,6BAA6B,CAAChM,EAAQmD,EAASqO,KAC9D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5ByiC,0BAAsBj5B,GACrBtF,EAAM,I,yBClDX,MAAMqsD,GAAoB,qB,4BCAX,SAASC,GAAWC,GACjC5qD,SAAS6qD,iBAAkC,gDACxCxuD,SAASiwB,IACJs+B,EACGt+B,EAAK5M,KAAKjhB,SAAS,oBACtB6tB,EAAK5M,KAAO4M,EAAK5M,KAAKgP,QAAQ,UAAW,mBAG3CpC,EAAK5M,KAAO4M,EAAK5M,KAAKgP,QAAQ,iBAAkB,UAClD,GAEN,CCJO,SAASo8B,GAAoBC,GAC9B7K,EAAAA,GACF1gC,OAAO2gC,SAAU6K,eAAeD,GAK9B/qD,SAASyJ,QAAUshD,IACrB/qD,SAASyJ,MAAQshD,EAErB,CAGO,MAAME,IAAeh9C,EAAAA,EAAAA,IAAS68C,GAjBV,KAiBmD,GC+sB9E,IAAII,GA4IAC,IAl0BJhlD,EAAAA,EAAAA,IAAiB,kBAAkB,CAAChM,EAAQmD,EAASqO,KACnD,MAAM,MAAExI,EAAK,MAAE9E,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EACnD40C,OAA4B58C,IAAVR,EAAsBA,IAAS9I,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOkiD,gBAKrF,OAHApmD,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAAEomD,mBAAmBliD,GAC5C,IAAKlE,EAAQsmD,oBAAqBF,EAE9B,KAGfp6C,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,gBAAEnR,GAAoBmR,EAE5B,MAAO,IACFxR,EACHK,kBACD,KAGH2L,EAAAA,EAAAA,IAAiB,wBAAyBhM,IACjC,IACFA,EACHK,qBAAiBmJ,OAIrBwC,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAExI,EAAK,MAAE9E,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GACnD,OAAEpQ,IAAWyL,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EAE/D,IAAK9C,EACH,OAGF,MAAMuM,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B42B,WAAY,CACVhlB,SAAU,IACLjE,EAASipB,WAAWhlB,SACvB,CAACxQ,GAAS,IACLuM,EAASipB,WAAWhlB,SAASxQ,GAChC6vD,cAAoBznD,IAAVR,EAAsBA,IAAU2E,EAASipB,WAAWhlB,SAASxQ,IAAW,CAAC,GAAG6vD,aAI3F/sD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,+BAA+B,CAAChM,EAAQmD,EAASqO,KAChE,MAAM,OAAE0/C,EAAM,MAAEhtD,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GACpD,OAAEpQ,IAAWyL,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EAE/D,IAAK9C,EACH,OAGF,MAAMuM,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B42B,WAAY,CACVhlB,SAAU,IACLjE,EAASipB,WAAWhlB,SACvB,CAACxQ,GAAS,IACLuM,EAASipB,WAAWhlB,SAASxQ,GAChC6vD,UAAU,EACVE,WAAYD,MAIjBhtD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GAC5C,OAAEpQ,IAAWyL,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EAE/D,IAAK9C,EACH,OAGF,MAAMuM,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B42B,WAAY,CACVhlB,SAAU,IACLjE,EAASipB,WAAWhlB,SACvB,CAACxQ,GAAS,IACLuM,EAASipB,WAAWhlB,SAASxQ,GAChC6vD,UAAU,MAIf/sD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,EACtC,IAAKpR,EAAAA,EAAAA,QAAkBgxD,EAAAA,EAAAA,MAIvB,OAAOxjD,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BG,kBAAyE,KAAtDD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOmtD,aAAaxvD,QAC7DqC,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GAC5C,OAAEpQ,IAAWyL,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EAE/D,GAAK9C,EAIL,OAAOwM,EAAAA,EAAAA,GAAe5N,EAAQ,CAAEqmD,oBAAgB78C,EAAW28C,uBAAuB,GAASjiD,EAAM,KAGnG8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACxC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BulD,mBAAoB53C,EAAS43C,kBAC7BhF,WAAY,IACP5yC,EAAS4yC,WACZhrB,sBAAkB/rB,EAClB8nD,oBAAgB9nD,IAEjBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,MAAiB,UAAEgD,GAAcqK,GAAW,CAAC,EAC7D,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BugD,WAAY,KACPrgD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOq8C,WACjChrB,iBAAkBpuB,EAClBmqD,oBAAgB9nD,IAEjBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,MAAiB,QAAEuI,GAAY8E,GAAW,CAAC,EAC3D,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BugD,WAAY,KACPrgD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOq8C,WACjC+Q,eAAgB5kD,EAChB6oB,sBAAkB/rB,IAEnBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BG,oBAAoBD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO/D,mBACjD+D,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,kBAAkB,CAAChM,EAAQmD,EAASqO,KACnD,MAAM,MAAE9D,GAAU8D,GACZ,aAAE+/C,GAAiBvxD,EACzB,IAAKuxD,EACH,MAAO,IACFvxD,EACHuxD,aAAc,CAAC7jD,IAInB,MAAM8jD,EAAYD,EAAazvD,QAAQ2vD,GAAMA,IAAM/jD,IAMnD,OALA8jD,EAAUnvD,QAAQqL,GACd8jD,EAAU3vD,OA9KU,IA+KtB2vD,EAAU7F,MAGL,IACF3rD,EACHuxD,aAAcC,EACf,KAGHxlD,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,QAAE5L,GAAY4L,GACd,OAAE8Y,GAAWtqB,EAAOqqB,SAC1B,IAAKC,EACH,MAAO,IACFtqB,EACHqqB,SAAU,IACLrqB,EAAOqqB,SACVC,OAAQ,CACNH,KAAM,IACNE,SAAU,CAACzkB,MAMnB,MAAM8rD,EAAcpnC,EAAOD,SAASvoB,QAAQ+gD,GAAMA,EAAEvgD,KAAOsD,EAAQtD,KAGnE,OAFAovD,EAAYrvD,QAAQuD,GAEb,IACF5F,EACHqqB,SAAU,IACLrqB,EAAOqqB,SACVC,OAAQ,IACHA,EACHD,SAAUqnC,IAGf,KAGH1lD,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,WAAEgR,GAAehR,GACjB,mBAAEsa,GAAuB9rB,EAC/B,IAAK8rB,EACH,MAAO,IACF9rB,EACH8rB,mBAAoB,CAACtJ,IAIzB,MAAMgvC,EAAY1lC,EAAmBhqB,QAAQQ,GAAOA,IAAOkgB,IAM3D,OALAgvC,EAAUnvD,QAAQmgB,GACdgvC,EAAU3vD,OAnOU,IAoOtB2vD,EAAU7F,MAGL,IACF3rD,EACH8rB,mBAAoB0lC,EACrB,KAGHxlD,EAAAA,EAAAA,IAAiB,0BAA2BhM,IACnC,IACFA,EACH8rB,mBAAoB,QAIxB9f,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,MAAEmgD,EAAK,cAAEC,GAAkBpgD,EACjC,MAAO,IACFxR,EACHqqB,SAAU,IACLrqB,EAAOqqB,SACVoB,MAAO,CACLM,OAAU6lC,EAAwB5xD,EAAOqqB,SAASoB,MAAMM,OAA9B4lC,IAG9BlvC,aAAc,IACTziB,EAAOyiB,aACVgJ,MAAO,CACLM,OAAS6lC,EAAgBD,EAAQ3xD,EAAOyiB,aAAagJ,MAAMM,SAGhE,KAGH/f,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,SAAsB4N,GAAiBP,EACjDqgD,EAAa9/C,EAAa7C,QAChC6C,EAAa7C,UAAb6C,EAAa7C,SAAY4iD,EAAAA,GAAAA,MAEzB,MAAMC,EAAmB,KAAI7xD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO8tD,eACrDC,EAA4BF,EAAiBj7C,WAAWo7C,GAC5DL,EAAaK,EAAEhjD,UAAY6C,EAAa7C,QAAUgjD,EAAElxD,UAAY+Q,EAAa/Q,UAQ/E,OANmC,IAA/BixD,GACFF,EAAiB18B,OAAO48B,EAA2B,GAGrDF,EAAiBrmD,KAAKqG,IAEfnE,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BgyD,cAAeD,GACd7tD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,uCAAuC,CAAChM,EAAQmD,EAASqO,KACxE,MAAM,OAAEpQ,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsBqN,EAExCpO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,EAAM,OACX,MAAMwY,GAAeC,EAAAA,EAAAA,KAAmB7b,EAAQoB,IAE1C,iBACJ+wD,EAAgB,cAAEC,EAAa,cAAEC,EAAa,iBAAEC,EAAgB,cAAEC,EAAa,gBAC/EC,EAAe,mBAAEC,EAAkB,cAAEC,IACnCC,EAAAA,EAAAA,KAA4BvvD,EAAMwY,GAChCg3C,GAAiB3G,EAAAA,EAAAA,IAAQ,CAC7BkG,EAAmB,uCAAoC3oD,EACvD4oD,EAAgB,wCAAqC5oD,EACrD6oD,EAAgB,wCAAqC7oD,EACrDkpD,EAAgB,+CAA4ClpD,EAC5DipD,EAAqB,+CAA4CjpD,EACjE8oD,EAAmB,uCAAoC9oD,EACvD+oD,EAAgB,wCAAqC/oD,EACrDgpD,EAAkB,0CAAuChpD,IACxDiF,KAAKgR,GAAM0O,EAAAA,GAA0B1O,KAExC,IAAKmzC,EAAe/wD,OAKlB,YAJAsB,EAAQiM,iBAAiB,CACvBpO,QAASmtB,EAAAA,GAA0B,2BACnCjqB,UAKJ,MAAM2uD,EAAgB1kC,EAAAA,GAA0B,sCAC1C2kC,EAAuBF,EAAet2C,KAAK,MAAMiY,QAAQ,YAAc,GAAEs+B,OAE/E1vD,EAAQiM,iBAAiB,CACvBpO,QAASmtB,EAAAA,GAA0B,8BAA+B2kC,GAClE5uD,SACA,KAGJ8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,EAChCugD,GAAmB7xD,EAAAA,EAAAA,KAAeF,EAAQkE,GAC7C8tD,cAAclwD,QAAO,EAAGoN,aAAcA,IAAYsC,EAAQtC,UAE7D,OAAOtB,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BgyD,cAAeD,GACd7tD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,cAAc,CAAChM,EAAQmD,EAASqO,KAC/C,MAAM,KAAEwV,EAAI,MAAE9iB,GAAQC,EAAAA,EAAAA,OAAsBqN,EAG5C,GAAI,YAAawV,GAAQA,EAAK+rC,eAAgBC,EAAAA,GAAAA,IAAqBhsC,GACjE,OAAOhnB,EAGT,MAAMizD,EAAa,KAAI/yD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOgvD,SACrD,GAAI,YAAalsC,EAAM,CACrB,MAAMmsC,EAAqBF,EAAWn8C,WAAWs8C,GAASA,EAAiBpyD,UAAYgmB,EAAKhmB,WAChE,IAAxBmyD,GACFF,EAAW59B,OAAO89B,EAAoB,EAE1C,CAIA,OAFAF,EAAWvnD,KAAKsb,IAETpZ,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BkzD,QAASD,GACR/uD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,iBAAiB,CAAChM,EAAQmD,EAASqO,KAClD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5CyhD,EAAa,KAAI/yD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOgvD,SAIrD,OAFAD,EAAWtH,OAEJ/9C,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BkzD,QAASD,GACR/uD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAQ6S,IAAKgvC,EAAgB,MAAEnvD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE7D,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BqzD,oBACCnvD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,WAAE8hD,EAAU,MAAEpvD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BuzD,0BAA2BD,GAC1BpvD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BuzD,+BAA2B/pD,GAC1BtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,YAAY,CAAChM,EAAQmD,EAASqO,KAC7C,MAAM,IACJ6S,EAAG,OAAEjjB,EAAM,UAAE+F,EAAS,MAAEjD,GAAQC,EAAAA,EAAAA,OAC9BqN,EAEExQ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ+F,GAClD,IAAKnG,EAAS,OAEd,MAAMwhC,EAAQxhC,EAAQ0nC,WAAYL,EAAAA,EAAAA,KAAaroC,EAAQgB,IAAUsB,GACjE,GAAKkgC,EAAL,CAEA,KAAKsI,EAAAA,EAAAA,KAAmB9qC,EAAQwiC,GAY9B,OAXAxiC,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B+qC,gBAAiB,CACfvI,QACApgC,KAAM,OACN4oC,UAAW,CACT1gC,OAAQ,WACRkH,aAGHtN,QACH+G,EAAAA,EAAAA,IAAUjL,GAIZA,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9BwzD,WAAY,CACVnvC,MACAjjB,SACA+F,cAEDjD,IACH+G,EAAAA,EAAAA,IAAUjL,EAxBQ,CAwBD,KAGnBgM,EAAAA,EAAAA,IAAiB,aAAa,CAAChM,EAAQmD,EAASqO,KAC9C,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BwzD,gBAAYhqD,GACXtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,MACJtN,GAAQC,EAAAA,EAAAA,SAAsBsvD,GAC5BjiD,EAEJ,IAAKkiD,EAAAA,EAAAA,KAA0B1zD,GAE/B,OAAO4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B2zD,SAAU,CACRC,iBAAkBnxD,KAAKC,SACpB+wD,IAEJvvD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,eAAe,CAAChM,EAAQmD,EAASqO,KAChD,MAAM,OACJqiD,EAAM,OAAEC,EAAM,MAAE5vD,GAAQC,EAAAA,EAAAA,OACtBqN,EAEJ,IAAKuiD,EAAAA,MAAgCL,EAAAA,EAAAA,KAA0B1zD,GAAS,OAExE,MAAM2N,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAClC8vD,EAAkBrmD,EAASsmD,MAAMC,cAAgB,EACvD,OAAIzxD,KAAKC,MAAQsxD,EAAkBG,EAAAA,SAAnC,GAEOvmD,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bi0D,KAAM,CACJC,aAAczxD,KAAKC,MACnBmxD,SACAC,WAED5vD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,4BAA4B,CAAChM,EAAQmD,EAASqO,KAC7D,MAAM,eACJ4iD,EAAc,kBAAEC,EAAiB,gBAAEC,EAAe,iBAAEC,GAClD/iD,EAEJ,MAAO,IACFxR,EACHw0D,mBAAoB,CAClBJ,eAAgBA,GAAkBp0D,EAAOw0D,mBAAmBJ,eAC5DC,kBAAmBA,GAAqBr0D,EAAOw0D,mBAAmBH,kBAClEC,kBACAC,oBAEH,KAGHvoD,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEtC,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5By0D,4BAA4B,GAC3BvwD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEtC,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5By0D,gCAA4BjrD,GAC3BtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,OACJpQ,EAAM,SAAE0G,EAAQ,SAAE3F,EAAQ,MAAE+B,GAAQC,EAAAA,EAAAA,OAClCqN,EAEEgrC,EAA8B,UAAnBr6C,GAAUC,MAAoBD,EAASq6C,SACxD,IAAKA,EAAU,OAEf,MAAMF,EAASt0C,OAAOC,OAAOjI,EAAOy8C,qBACjCj5C,MAAMkxD,GAAkBA,EAAcnY,mBAAqBmY,EAAclY,WAAaA,IAEnF5/B,EAAW0/B,GAAQh6C,GAEnB0e,GAAuBC,EAAAA,EAAAA,KAA2BjhB,IACpDs8C,GAAQpuB,WAAclN,EAQrBpE,IAELzZ,EAAQwxD,wBAAwB,CAAEzwD,UAElCf,EAAQyxD,kBAAkB,CAAExzD,SAAQ0G,WAAU8U,cAX5CzZ,EAAQqgB,iBAAiB,CACvBC,eAAgB,UAChBvf,SASqD,KAG3D8H,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,MAAEqE,EAAK,MAAE3R,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE7C,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B60D,kBAAmB,CACjBh/C,UAED3R,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B60D,uBAAmBrrD,GAClBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B0qB,+BAA2BlhB,GAC1BtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,OAAEua,EAAM,MAAE7nB,GAAQC,EAAAA,EAAAA,OAAsBqN,EAC9C,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B80D,wBAAyB/oC,GACxB7nB,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B80D,6BAAyBtrD,GACxBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,kCAAkC,CAAChM,EAAQmD,EAASqO,KACnE,MAAM,IAAExH,GAAQwH,GACV,aAAEujD,GAAiB/0D,EAAOyiB,aAEhC,MAAO,IACFziB,EACHyiB,aAAc,IACTziB,EAAOyiB,aACVsyC,cAAchpD,EAAAA,EAAAA,IAAO,IAAIgpD,KAAiB/qD,IAAMmN,MAAM,EAAG69C,EAAAA,MAE5D,KAGHhpD,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,OAAEpQ,EAAM,MAAE8C,GAAQC,EAAAA,EAAAA,OAAsBqN,EAM9C,OAHoBqO,EAAAA,EAAAA,KAAkB7f,EAAQkE,IAC5Bf,EAAQua,SAAS,CAAEpb,GAAIlB,EAAQ8C,WAE1C0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bi1D,iBAAkB,CAChB7zD,WAED8C,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bi1D,sBAAkBzrD,GACjBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,OAAEpQ,EAAM,QAAE4J,EAAO,MAAE9G,GAAQC,EAAAA,EAAAA,OAAsBqN,EAMvD,OAHoBqO,EAAAA,EAAAA,KAAkB7f,EAAQkE,IAC5Bf,EAAQua,SAAS,CAAEpb,GAAIlB,EAAQ8C,WAE1C0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bk1D,eAAgB,CACd9zD,SACA4J,YAED9G,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bk1D,oBAAgB1rD,GACftF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,gBAAE2jD,GAAoBn1D,GACtB,SAAE6hD,EAAWsT,EAAgBtT,SAAQ,YAAEuT,EAAcD,EAAgBC,aAAgB5jD,EAE3F,MAAO,IACFxR,EACHm1D,gBAAiB,CACftT,WACAuT,eAEH,KAGHppD,EAAAA,EAAAA,IAAiB,gBAAgB,CAAChM,EAAQmD,EAASqO,KACjD,MAAM,SAAE6jD,EAAQ,KAAEC,EAAI,MAAEpxD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEtD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bu1D,SAAU,CACRC,MAAOH,EACPC,SAEDpxD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,iBAAiB,CAAChM,EAAQmD,EAASqO,KAClD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bu1D,cAAU/rD,GACTtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,mBAAoBhM,IACnCoyC,MAAO,eAAqB3vC,KAAKC,SAC9Bod,MAAMxB,GAAaA,EAASjQ,SAC5ByR,MAAMoP,KH/rBI,SAA8BumC,EAAuBC,EAAoBC,GACtF,MAAMC,EAAyBH,EAAcI,OAE7C,QAAKtF,GAAkBuF,KAAKF,IAQrBA,IAA2BF,CACpC,EGsrBUK,CAFJ7mC,EAAUA,EAAQ2mC,OAEgBrH,aAChCxuD,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHg2D,sBAAsB,IAExB/qD,EAAAA,EAAAA,IAAUjL,GACZ,IAEDi2D,OAAO7C,IACFx5B,EAAAA,KAEFC,QAAQzmB,MAAM,4BAA6BggD,EAC7C,GACA,KAGNpnD,EAAAA,EAAAA,IAAiB,gCAAgC,CAAChM,EAAQsK,EAAQkH,KAChExR,GAASqL,EAAAA,EAAAA,MACTrL,EAAS,IACJA,EACHk2D,0BAA2B39C,QAAQ/G,KAErCvG,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,eAAgBhM,KAC1BE,EAAAA,EAAAA,KAAeF,GAAQmE,EAAAA,EAAAA,OAAmBgyD,qBAC/CC,EAAAA,EAAAA,IAAyB,KAO3BpqD,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,UAAE6kD,EAAS,MAAEnyD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAmBjD,OAjBI6kD,GACEtF,IAAsBuF,cAAcvF,IAExCA,GAAuB1rC,OAAOkxC,aAAY,KACxCpzD,EAAQwiD,gBAAgB,CACtBzhD,SACA,GAXsB,OAc1BoyD,cAAcvF,IACdA,QAAuBvnD,GAGzBxJ,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bq2D,aACCnyD,GAEI,IACFlE,EACHw2D,2BAA4BH,GAAYI,EAAAA,GAAAA,WAA6BjtD,EACtE,KAGHwC,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GAC5C,sBAAEklD,GAA0B12D,EAAOm5B,SAAS6S,MAC5C/pC,EAAgBjC,EAAOiC,cACvB00D,EAAe32D,EAAO6hB,QAAQ80C,aAC9BC,EAASD,EAAe,OAAS,GAEvC,GAAI9wD,SAASyJ,MAAMhL,SAASuyD,EAAAA,KAG1B,OAFArG,IAAW,QACXG,GAAqB,GAAEiG,IAASE,EAAAA,OAAcD,EAAAA,OAIhD,GAAI72D,EAAOw2D,4BAA8B71D,KAAK6U,MAAM/S,KAAKC,MAAQ,KAAQ,GAAM,EAAG,CAChF,MAEMq0D,GAFoBN,EAAAA,GAAAA,MAEYz2D,EAAOw2D,2BAE7C,GAAIO,EAAY,EAGd,OAFApG,GAAqB,GAAEiG,IAASG,iBAAyBA,EAAY,EAAI,IAAM,WAC/EvG,IAAW,EAGf,CAEAA,IAAW,GAEX,MAAMz3C,GAAclM,EAAAA,EAAAA,KAAyB7M,EAAQkE,GAErD,GAAI6U,GAAe29C,IAA0B12D,EAAOg3D,SAASC,eAAgB,CAC3E,MAAM,OAAE71D,EAAM,SAAE0G,GAAaiR,EACvB+M,GAAcre,EAAAA,EAAAA,KAAWzH,EAAQoB,GACvC,GAAI0kB,EAAa,CACf,MAAMxW,GAAQ4nD,EAAAA,EAAAA,KAAa/oC,EAAAA,GAA2BrI,EAAa1kB,IAAWa,GACxEoH,GAAQe,EAAAA,EAAAA,KAAYpK,EAAQoB,EAAQ0G,GAC1C,OAAIge,EAAYxc,SAAWD,OACzBynD,GAAc,GAAE8F,IAAStnD,OAAWjG,EAAMiG,cAI5CwhD,GAAc,GAAE8F,IAAStnD,IAE3B,CACF,CAEAqhD,GAAoB5K,EAAAA,GAAc,GAAM,GAAE6Q,IAASE,EAAAA,MAAa,KAGlE9qD,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bm3D,wBAAoB3tD,GACnBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,6BAA6B,CAAChM,EAAQmD,EAASqO,KAC9D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo3D,0BAAsB5tD,GACrBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,6BAA6B,CAAChM,EAAQmD,EAASqO,KAC9D,MAAM,MAAEu0B,EAAK,MAAE7hC,GAAQC,EAAAA,EAAAA,OAAsBqN,EAC7C,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bq3D,uBAAwBtxB,GACvB7hC,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,4BAA4B,CAAChM,EAAQmD,EAASqO,MAC7D8lD,EAAAA,GAAAA,IAAiB9lD,EAAQm8B,SAAS,KAGpC3hC,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,SAAE+lD,GAAa/lD,GACf,gCACJgmD,EAA+B,8BAC/BC,EAA6B,6BAC7BC,GACE13D,EAAO8kB,WAAa,CAAC,GACjB6yC,oCAAqCC,GAAmB53D,EAAOm5B,SAEvE,GAAKq+B,GAAoCC,GAAkCC,KAGvEE,GAAkBn1D,KAAKC,MAAQk1D,EAAgD,IAA/BF,GAgBpD,OAdwB1vD,OAAOC,OAAOjI,EAAOkI,SAASpG,QAAQ2d,IAAOA,EAAE42C,YAAW5nD,KAAKgR,GAAMA,EAAEnd,KAE/EJ,SAASgC,IACvBf,EAAQiM,iBAAiB,CACvBE,MAAO6e,EAAAA,GAA0BopC,EAAW,qBAAuB,wBACnEv2D,QAASmtB,EAAAA,GACPopC,EAAW,4BAA8B,8BACzCA,EAAWE,EAAgCD,GAE7Cj1B,SAvzB2C,IAwzB3Cr+B,SACA,IAGG,IACFlE,EACHm5B,SAAU,IACLn5B,EAAOm5B,SACVw+B,oCAAqCl1D,KAAKC,OAE7C,IAIH,IACIm1D,GADAC,GAA+B,GAGnC96B,EAAAA,GAAAA,KAAah9B,IAEX,MAAM,gBAAE2lD,EAAe,eAAEoS,IAAmB9vC,EAAAA,EAAAA,MAEtC+vC,EAAkBh4D,EAAOg3D,SAASC,iBAAmBjG,GACrDiH,EAAmBjwD,OAAOC,OAAOjI,EAAOkI,SAASpG,QAAQ2d,GAAMA,EAAE42C,YAAWx0D,OAC5Eq7B,GAAch9B,EAAAA,EAAAA,KAAeF,GAAQmE,EAAAA,EAAAA,OAAmB+4B,YAE1D86B,GACFrS,IAGEsS,IAAqBH,IAAwB56B,IAC3C26B,IAAe9vC,aAAa8vC,IAEhCA,GAAgBxyC,OAAOja,YAAW,KAChCpL,GAASqL,EAAAA,EAAAA,MACT,MAAM6sD,EAAsBlwD,OAAOC,OAAOjI,EAAOkI,SAASpG,QAAQ2d,GAAMA,EAAE42C,YAAWx0D,OACrFk2D,EAAeG,KAAwBC,EAAAA,EAAAA,MAAuBt2D,OAAO,GAnBpD,MAuBrBmvD,GAAqBhxD,EAAOg3D,SAASC,eACrCa,GAAuBG,CAAgB,KC93BzCjsD,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAE5Ci/B,GADUvwC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOstC,QACvBf,QAAU,YAC3B2nB,GAAoBl4D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOk0D,kBAaxD,OAXAj1D,EAAQk1D,0BAA0B,CAChCC,WAAYF,EACZ3nB,SACAvsC,UAGFlE,GAASu4D,EAAAA,EAAAA,KAAav4D,EAAQkE,IACrBosC,EAAAA,EAAAA,KAActwC,EAAQ,CAC7BywC,UACCvsC,EAEU,KAGf8H,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAIlD,OAFAxR,GAASswC,EAAAA,EAAAA,KAActwC,EAAQ,CAAEywC,YAAQjnC,GAAatF,IAC7C6wC,EAAAA,EAAAA,KAAmB/0C,EAAQ,CAAEywC,YAAQjnC,GAAatF,EAC9C,KAGf8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,MAAE4B,EAAK,MAAElP,GAAQC,EAAAA,EAAAA,OAAsBqN,EAE7C,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BwxC,QAAS,KACJtxC,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOstC,QACjCf,OAAQ,SACRr9B,UAEDlP,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B+1C,mBAAevsC,GACdtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B24C,mBAAenvC,GACdtF,EAAM,I,iBCzDX8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,OACJpQ,EAAM,SAAE0G,EAAWD,EAAAA,GAAc,UAAEV,EAAS,WAAEqxD,EAAU,aAAEC,EAAY,mBAAEC,EAAkB,OAAE7N,EAAM,mBAClG8N,EAAkB,gBAAEC,EAAe,MAAE10D,GAAQC,EAAAA,EAAAA,OAC3CqN,EAEE7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B64D,YAAa,IACRlrD,EAASkrD,YACZz3D,SACA0G,WACAX,YACAqxD,WAAYA,GAAc,EAC1BC,eACAC,qBACA7N,SACA+N,kBACA/W,UAAU,EACV8W,sBAEFp/C,gBAAiB,CAAC,EAClB0I,0BAA0B,GACzB/d,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GAC5C,OACJs5C,EAAM,QAAExqB,EAAO,aAAEyqB,EAAY,SAAElJ,IAC7B3hD,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO20D,YAElC,OAAOjrD,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B64D,YAAa,CACX/N,SACAxqB,UACAuhB,WACAkJ,iBAED7mD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,OACJs5C,EAAM,MACN5mD,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B64D,YAAa,KACR34D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO20D,YACjC/N,SACAxqB,SAAS,IAEVp8B,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,8BAA8B,CAAChM,EAAQmD,EAASqO,KAC/D,MAAM,aACJu5C,EAAY,MACZ7mD,GAAQC,EAAAA,EAAAA,OACNqN,EAUJ,OARAxR,EAAS,IACJA,EACH64D,YAAa,IACR74D,EAAO64D,YACV7N,iBAAkBD,KAIfn9C,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B64D,YAAa,KACR34D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO20D,YACjC9N,iBAED7mD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,QACJ8uB,EAAO,MACPp8B,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B64D,YAAa,KACR34D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO20D,YACjCv4B,YAEDp8B,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,SAAEqwC,EAAQ,MAAE39C,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEhD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B64D,YAAa,KACR34D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAO20D,YACjChX,aAED39C,EAAM,I,oDC/FX,IAAI40D,IAAiB,GACrBC,EAAAA,EAAAA,KAAe,KAEb,MAAM/4D,GAASqL,EAAAA,EAAAA,MACVrL,EAAOg5D,UACRh5D,EAAOg3D,SAASiC,cAAgBH,IAAyD,IAAvC9wD,OAAOuG,KAAKvO,EAAOkI,SAASrG,SAChFq3D,EAAAA,GAAAA,KACF,KAGFltD,EAAAA,EAAAA,IAAiB,eAAegI,MAAOhU,EAAQmD,EAASqO,KACtD,MAAM,SAAEwlD,EAAQ,MAAE9yD,GAAQC,EAAAA,EAAAA,OAAsBqN,EAChDxR,GAASm5D,EAAAA,EAAAA,KAAuBn5D,EAAQ,CACtCgvB,WAAW,KAEb/jB,EAAAA,EAAAA,IAAUjL,SACJo5D,EAAAA,GAAAA,IAAcpC,GAEpB,MAAMqC,EAAc5lB,KAAKC,UAAU,KAAK4lB,EAAAA,GAAAA,MAAqBp9C,OAAQlc,EAAOiC,gBAC5EjC,GAASqL,EAAAA,EAAAA,MACT,MAAMkuD,GAAaC,EAAAA,GAAAA,KAAgBL,EAAAA,EAAAA,KAAuBn5D,EAAQ,CAChEi5D,aAAa,EACb7lD,WAAO5J,EACPwlB,WAAW,KAGb,UACQyqC,EAAAA,GAAAA,IAAeJ,EAAaE,IAElCG,EAAAA,EAAAA,MACA15D,GAASqL,EAAAA,EAAAA,MACTrL,GAASm5D,EAAAA,EAAAA,KAAuBn5D,EAAQ,CACtCi5D,aAAa,EACb7lD,WAAO5J,EACPwlB,WAAW,KAEb/jB,EAAAA,EAAAA,IAAUjL,IAEV25D,EAAAA,GAAAA,KAAiB,EACnB,CAAE,MAAOvG,IACPwG,EAAAA,GAAAA,KAEA55D,GAASqL,EAAAA,EAAAA,MACTrL,GAASm5D,EAAAA,EAAAA,KAAuBn5D,EAAQ,CACtCgvB,WAAW,KAEb/jB,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQiM,iBAAiB,CACvBpO,QAAS,yBACTkD,UAEFf,EAAQ02D,0BAA0B,CAAE3I,OAAQ4I,EAAAA,GAAgBC,iBAAkB71D,SAChF,MAGF8H,EAAAA,EAAAA,IAAiB,iBAAkBhM,KAC5Bg6D,EAAAA,GAAAA,OAEEC,EAAAA,EAAAA,KAAsBj6D,OAG/BgM,EAAAA,EAAAA,IAAiB,gBAAgB,CAAChM,EAAQmD,EAASqO,KACjD,MAAM0oD,EAAkBlyD,OAAOC,OAAOjI,EAAOkI,UACvC,YAAEmxD,EAAW,WAAEE,GAAe/nD,EAC9B2oD,EAAU1mB,KAAK2mB,MAAMf,IAC3BgB,EAAAA,GAAAA,IAAaF,EAASA,EAAQj+C,QAE9B,MAAMwd,EAAiB15B,GACvBA,EAASyzC,KAAK2mB,MAAMb,IACbrxD,QAAUwxB,EAAexxB,SAChCoyD,EAAAA,GAAAA,GAAat6D,GAAQu6D,EAAAA,EAAAA,IAAUC,GAAAA,KAE/Bx6D,GAASm5D,EAAAA,EAAAA,KACPn5D,EACA,CACEi3D,gBAAgB,EAChB7jD,WAAO5J,EACPixD,qBAAsB,KAG1BxvD,EAAAA,EAAAA,IAAUjL,IAEV05D,EAAAA,EAAAA,MAEAQ,EAAgBh4D,SAAQ,EAAGI,GAAI4B,EAAOg5B,iBAAkB/5B,EAAQu3D,KAAK,CAAEx2D,QAAOg5B,kBAC9E/5B,EAAQw3D,SAAS,KAMnB3uD,EAAAA,EAAAA,IAAiB,2BAA4BhM,IAC3C,MAAMy6D,GAAwBz6D,EAAOg3D,UAAUyD,sBAAwB,GAAK,EAE5E,OAAOtB,EAAAA,EAAAA,KAAuBn5D,EAAQ,CACpCy6D,uBACAG,aAAeH,GARU,EASrBh4D,KAAKC,MAR6B,UAQe8G,GACrD,KAGJwC,EAAAA,EAAAA,IAAiB,8BAA+BhM,IACvCm5D,EAAAA,EAAAA,KAAuBn5D,EAAQ,CACpCy6D,qBAAsB,EACtBG,kBAAcpxD,OAIlBwC,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAE4B,GAAU5B,EAElB,OAAO2nD,EAAAA,EAAAA,KAAuBn5D,EAAQ,CAAEoT,SAAQ,KAGlDpH,EAAAA,EAAAA,IAAiB,sBAAuBhM,IAC/Bm5D,EAAAA,EAAAA,KAAuBn5D,EAAQ,CAAEoT,WAAO5J,OAGjDwC,EAAAA,EAAAA,IAAiB,oBAAoB,KACnC8sD,IAAiB,CAAI,KC1HvB9sD,EAAAA,EAAAA,IAAiB,6BAA6B,CAAChM,EAAQmD,EAASqO,KAC9D,MAAM,WAAE8mD,EAAU,OAAE7nB,EAAM,MAAEvsC,GAAQC,EAAAA,EAAAA,OAAsBqN,GACpD,mBACJqpD,EAAkB,eAAEnc,EAAc,WAAEoc,EAAU,MAAEC,GAC9CzC,GAAc,CAAC,EAEnB,IAAKuC,GAAuBnc,GAAmBoc,GAAeC,KAI9D53D,EAAQ+hD,uBAAuB,CAAEhhD,UAElB,SAAXusC,GA2BJ,OAtBIoqB,IACF76D,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9B0wC,aAAcmqB,GACb32D,IAGDw6C,GACFv7C,EAAQ63D,iBAAiB,CACvB55D,OAAQs9C,EAAet9C,OACvB+F,UAAWu3C,EAAev3C,UAC1Bm3C,aAAcI,EAAe3N,OAC7B7sC,UAIA42D,GACF33D,EAAQ83D,aAAa,IAChBH,EACH52D,UAIGlE,CAAM,KAGfgM,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,MACJtN,GAAQC,EAAAA,EAAAA,OACNqN,GAAW,CAAC,EAEhB,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bk7D,2BAA2B,GAC1Bh3D,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,4BAA4B,CAAChM,EAAQmD,EAASqO,KAC7D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bk7D,+BAA2B1xD,GAC1BtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,+BAA+B,CAAChM,EAAQmD,EAASqO,KAChE,MAAM,MACJtN,GAAQC,EAAAA,EAAAA,OACNqN,GAAW,CAAC,EAEhB,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bm7D,wBAAyB,CACvB7lB,QAAQ,IAETpxC,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,gCAAgC,CAAChM,EAAQmD,EAASqO,KACjE,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bm7D,6BAAyB3xD,GACxBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,yCAAyC,CAAChM,EAAQmD,EAASqO,KAC1E,MAAM,OACJpQ,EAAM,UACN+F,EAAS,MACTjD,GAAQC,EAAAA,EAAAA,OACNqN,GAAW,CAAC,EAEVxQ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ+F,GAClD,IAAKnG,EAAS,OAEd,MAAMo6D,GAAcC,EAAAA,GAAAA,IAAqCr6D,GACzD,OAAKo6D,GAEEE,EAAAA,EAAAA,KAA0Bt7D,EAAQo7D,EAAal3D,QAFtD,CAE4D,KAG9D8H,EAAAA,EAAAA,IAAiB,yBAAyB,CAAChM,EAAQmD,EAASqO,KAC1D,MAAM,mBACJqpD,EAAkB,eAClBnc,EAAc,WACdoc,EAAU,MACVC,EAAK,oBACLQ,EAAmB,MACnBr3D,GAAQC,EAAAA,EAAAA,OACNqN,GAAW,CAAC,EAEVgqD,EAAcx7D,EAAO8wC,OAAOD,QAElC,MAAK0qB,GAAuBC,GAAeT,GAASA,EAAMU,eAAiBD,EAAYzqB,QAmBvF,OALA/wC,GAAS07D,EAAAA,EAAAA,KAAiB17D,EAAQkE,GAGlCf,EAAQ+xC,kBAEDtnC,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo4D,kBAAmB,CACjByC,qBACAnc,iBACAoc,aACAC,UAED72D,GAzBDf,EAAQiM,iBAAiB,CACvBpO,QAASmtB,EAAAA,GAA0B,wBACnC5c,WAAY4c,EAAAA,GAA0B,6BACtC7jB,OAAQ,CACNA,OAAQ,wBACRkH,QAAS,CAAEupD,QAAOQ,qBAAqB,EAAMr3D,UAE/Cy3D,KAAM,OACNz3D,SAiBK,KAGX8H,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo4D,uBAAmB5uD,GAClBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAE5Ck/B,GAAekE,EAAAA,EAAAA,KAAmB50C,EAAQkE,GAChD,IAAIusC,EAASC,GAAcD,OAK3B,OAJKA,GAAqB,YAAXA,IACbA,EAAS,cAGJ7iC,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B0wC,aAAc,CACZD,WAEDvsC,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,6BAA6B,CAAChM,EAAQmD,EAASqO,KAC9D,MAAM,YAAE4pD,EAAW,MAAEl3D,GAAQC,EAAAA,EAAAA,OAAsBqN,EACnD,OAAO8pD,EAAAA,EAAAA,KAA0Bt7D,EAAQo7D,EAAal3D,EAAM,KAG9D8H,EAAAA,EAAAA,IAAiB,gCAAgC,CAAChM,EAAQmD,EAASqO,KACjE,MAAM,OACJpQ,EAAM,UACN+F,EAAS,MACTjD,GAAQC,EAAAA,EAAAA,OACNqN,GAAW,CAAC,EAEVxQ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ+F,GAClD,IAAKnG,EAAS,OAEd,MAAMo6D,GAAcQ,EAAAA,GAAAA,IAA4B56D,GAChD,OAAKo6D,GAEEE,EAAAA,EAAAA,KAA0Bt7D,EAAQo7D,EAAal3D,QAFtD,CAE4D,KAG9D8H,EAAAA,EAAAA,IAAiB,8BAA8B,CAAChM,EAAQmD,EAASqO,KAC/D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B67D,2BAAuBryD,GACtBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,8BAA8B,CAAChM,EAAQmD,EAASqO,KAC/D,MAAM,aAAEsqD,EAAY,MAAE53D,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEpD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B+7D,uBAAwB,CACtBD,iBAED53D,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,+BAA+B,CAAChM,EAAQmD,EAASqO,KAChE,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B+7D,4BAAwBvyD,GACvBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,kBAAkB,CAAChM,EAAQmD,EAASqO,KACnD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bk2C,eAAW1sC,GACVtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAClD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo2C,eAAgB,CAAEd,QAAQ,IACzBpxC,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,gCAAgC,CAAChM,EAAQmD,EAASqO,KACjE,MAAM,OACJpQ,EAAM,UAAE+F,EAAS,MAAEjD,GAAQC,EAAAA,EAAAA,OACzBqN,EAEExQ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ+F,GAClD,IAAKnG,IAAYA,EAAQwE,QAAQ8E,OAAQ,OAEzC,MAAMA,EAAStJ,EAAQwE,QAAQ8E,OAC/B,GAAoB,aAAhBA,EAAOlI,KAAqB,OAChC,MAAM+uC,EAAW7mC,EAAO6mC,SAElB6qB,EAAiBh7D,EAAQqC,WAAarC,EAAQI,OAASpB,EAAOiC,cAE9D0uC,EAAO,CACXj8B,KAAM1T,EAAQ0T,KACdi8B,KAAMQ,EAASR,KACf3vC,QAASmwC,EAASnwC,QAClBi7D,eAAgB9qB,EAAS8qB,eACzBC,aAAc/qB,EAAS+qB,aACvBC,WAAYhrB,EAASirB,QACrBC,OAAQr7D,EAAQqC,WAAarD,EAAOiC,cAAgBjB,EAAQI,OAC5D+F,UAAanG,EAAQqC,YAAcjC,IAAWpB,EAAOiC,mBAA8BuH,EAAbxI,EAAQsB,GAC9Eg6D,YAAanrB,EAASmrB,aAGxBn5D,EAAQo5D,kBAAkB,CAAErgD,OAAQ8/C,EAAgBrrB,OAAMzsC,SAAQ,KAGpE8H,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,KACJm/B,EAAI,MAAEzsC,GAAQC,EAAAA,EAAAA,OACZqN,EAEE0K,EAAS,WAAY1K,EAAUA,EAAQ0K,YAAS1S,EAEtD,OAAOoE,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bw8D,cAAe,CACbtgD,SACAy0B,SAEDzsC,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bw8D,mBAAehzD,GACdtF,EAAM,KCnRX8H,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,OACJpQ,EAAM,MACN8C,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,OAAIpQ,GACKwM,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5By8D,eAAgB,CACdr7D,SACA+F,eAAWqC,EACXq9C,cAAUr9C,IAEXtF,IAGE0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5By8D,oBAAgBjzD,GACftF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,6BAA6B,CAAChM,EAAQmD,EAASqO,KAC9D,MAAM,OACJpQ,EAAM,UACN+F,EAAS,SACT0/C,EAAQ,MACR3iD,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5By8D,eAAgB,CACdr7D,SACA+F,YACA0/C,aAED3iD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,OACJxP,EAAM,QACN0K,EAAO,SACPm6C,EAAQ,cACR6V,EAAa,MACbx4D,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5By8D,eAAgB,CACdzjD,YAAahX,EACb0K,UACAgwD,gBACA7V,aAED3iD,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,SACJq1C,EAAQ,OACRzlD,EAAM,MACN8C,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5By8D,eAAgB,CACd5V,WACAzlD,SACAu7D,cAAc,IAEfz4D,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5By8D,eAAgB,IACX9uD,EAAS8uD,eACZt1D,eAAWqC,EACXq9C,cAAUr9C,EACVkD,aAASlD,EACTwP,iBAAaxP,EACbmzD,kBAAcnzD,IAEftF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,OAAEpQ,EAAM,UAAE+F,GAAcqK,EACxBxQ,GAAU8D,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQ+F,GAClD,IAAKnG,EACH,OAGF,MAAM,UAAEM,GAAcN,EAEtB,IAAKM,EACH,OAGF,MAAMs7D,EAAiBt7D,EAAUC,QAAQkN,KAAKtM,IAC5C,GAAIA,EAASuB,YAAa,CACxB,IAAKvB,EAAS2T,MAAO,OACrB,MAAO,IACF3T,EACHuB,iBAAa8F,EACbqzD,8BAA0BrzD,EAC1BszD,YAAa36D,EAAS06D,yBAE1B,CACA,OAAO16D,CAAQ,IACdL,OAAOyW,SAUV,OARAvQ,OAAOC,OAAOjI,EAAOkI,SAClBhG,SAAQ,EAAGI,GAAI4B,MACdf,EAAQ45D,oBAAoB,CAC1B7tD,SAASnL,EAAAA,EAAAA,IAAc/C,GACvBkD,SACA,KAGCvB,EAAAA,EAAAA,KAAkB3C,EAAQoB,EAAQ+F,EAAW,CAClD7F,UAAW,IACNA,EACHC,QAASq7D,IAEX,KCpHJ5wD,EAAAA,EAAAA,IAAiB,mBAAmBgI,MAAOhU,EAAQmD,EAASqO,KAC1D,MAAM,OACJxP,EAAM,QAAE0K,EAAO,aAAEswD,EAAY,cAAEC,EAAa,UAAEj8B,EAAS,UAAEk8B,EAAS,OAAErS,EAAM,MAAE3mD,GAAQC,EAAAA,EAAAA,OAClFqN,EAEE+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EACH,OAGF,MAAM5Q,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAClCo9C,GAAcQ,EAAAA,EAAAA,KAAkB9hD,EAAQgC,GAE9C,GAAI0K,KAAa40C,IAAgBA,EAAYp4C,KAAKwD,IAAW,CAC3D,MAAMkJ,QAAehB,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE2J,OAAMvU,IAAK,CAAC0C,KAEpE,IAAKkJ,EACH,OAEF5V,GAASqL,EAAAA,EAAAA,MACTrL,GAASgiD,EAAAA,EAAAA,KAAkBhiD,EAAQgC,EAAQ4T,EAAOqrC,QACpD,CAEA,MAAMkc,EAAYxvD,EAASyvD,YAAYD,YAClCE,EAAAA,EAAAA,KAAyBr9D,EAAQgC,EAAQ0K,EAASuwD,EAAeD,EAAch8B,EAAWk8B,GAE/Fl9D,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bo9D,YAAa,IACRzvD,EAASyvD,YACZp7D,SACA0K,QAASA,IAAW4wD,EAAAA,EAAAA,KAA6Bt9D,EAAQgC,KAAWu7D,EAAAA,EAAAA,KAAuBv9D,EAAQgC,GACnGg7D,eACAh8B,YACAk8B,YACAD,gBACAO,eAAWh0D,EACXqhD,SACAsS,cAEDj5D,IACH+G,EAAAA,EAAAA,IAAUjL,EAAO,KAGnBgM,EAAAA,EAAAA,IAAiB,6BAA6BgI,MAAOhU,EAAQmD,EAASqO,KACpE,MAAM,SACJ4Z,EAAQ,QAAE1e,EAAO,OAAEm+C,EAAM,MAAE3mD,GAAQC,EAAAA,EAAAA,OACjCqN,EAEEpO,QAAayqC,EAAAA,EAAAA,IAAoB7tC,EAAQorB,GAE1ChoB,GAILD,EAAQs6D,gBAAgB,CACtBz7D,OAAQoB,EAAKd,GACboK,UACAswD,cAAc,EACdC,eAAe,EACfpS,SACA3mD,SACA,KAGJ8H,EAAAA,EAAAA,IAAiB,oBAAoB,CAAChM,EAAQmD,EAASqO,KACrD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,GAC5C,QACJ8uB,EAAO,cAAEo9B,EAAa,sBAAEC,EAAqB,QAAEjxD,IAC7CxM,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOk5D,YAElC,OAAK1wD,EAEL1M,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bo9D,YAAa,CACX98B,UACAo9B,gBACAC,wBACAC,yBAAqBp0D,EACrB2zD,eAAW3zD,IAEZtF,GAVkBlE,CAYR,KAGfgM,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,QACJ8uB,EAAO,MACPp8B,GAAQC,EAAAA,EAAAA,OACNqN,EAEJ,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo9D,YAAa,KACRl9D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOk5D,YACjC98B,YAEDp8B,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,QAAEqsD,EAAO,WAAElvC,EAAU,MAAEzqB,GAAQC,EAAAA,EAAAA,OAAsBqN,EAErDo1C,EAAa5mD,EAAOihD,QAAQ6c,eAAenvC,EAAa,WAAa,UAC3E,OAAKi4B,GAAY/kD,QAIV+L,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo9D,YAAa,KACRl9D,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOk5D,YACjC,CAACzuC,EAAa,wBAA0B,iBAAkBkvC,IAE3D35D,GARMlE,CAQA,KAGXgM,EAAAA,EAAAA,IAAiB,qBAAqB,CAAChM,EAAQmD,EAASqO,KACtD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,IAClC,OACJlC,EAAM,QAAE0K,EAAO,aAAEswD,EAAY,cAAEC,EAAa,UAAEE,GAC5CxvD,EAASyvD,YAEb,GAAIH,IAAkBE,EAEpB,YADAh6D,EAAQwhB,iBAAiB,CAAEzgB,UAI7B,IAAKlC,IAAW0K,EACd,OAGF,MAAM6R,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAEhC,KADoB8/C,EAAAA,EAAAA,KAAkB9hD,EAAQgC,KACzBuc,EACnB,OAGF,MAAQoS,QAASmtC,EAAc,iBAAEC,GAAqBZ,EAEhDa,GADeD,EAAiB/7D,IAAW,IACV0zB,QAAQhpB,GAC/C,IAAIuxD,EACAC,EAEJ,GAAIF,EAAoB,EACtBC,EAAqBD,EAAoB,EACzCE,EAAiBl8D,MACZ,CACL,MAAMm8D,EAAsBL,EAAepoC,QAAQ1zB,GAAU,EAC7D,GAAIg7D,GAAgBmB,EAAsB,EACxC,OAGFD,EAAiBJ,EAAeK,GAChCF,GAAsBF,IAAmBG,IAAiBr8D,QAAU,GAAK,CAC3E,CAEA,MAAMu8D,EAAkBL,IAAmBG,KAAkBD,GAC7D,OAAKG,GAIExwD,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo9D,YAAa,IACRzvD,EAASyvD,YACZp7D,OAAQk8D,EACRxxD,QAAS0xD,IAEVl6D,QAVH,CAUS,KAGX8H,EAAAA,EAAAA,IAAiB,iBAAiB,CAAChM,EAAQmD,EAASqO,KAClD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,IAClC,OACJlC,EAAM,QAAE0K,EAAO,aAAEswD,EAAY,cAAEC,EAAa,UAAEE,GAC5CxvD,EAASyvD,YACb,GAAIH,IAAkBE,EAEpB,YADAh6D,EAAQwhB,iBAAiB,CAAEzgB,UAI7B,IAAKlC,IAAW0K,EACd,OAGF,MAAM6R,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAEhC,KADoB8/C,EAAAA,EAAAA,KAAkB9hD,EAAQgC,KACzBuc,EACnB,OAGF,MAAQoS,QAASmtC,EAAc,iBAAEC,GAAqBZ,EAChDkB,EAAeN,EAAiB/7D,IAAW,GAC3Cg8D,EAAoBK,EAAa3oC,QAAQhpB,GAC/C,IAAI4xD,EACAC,EAEJ,GAAIP,EAAoBK,EAAax8D,OAAS,EAC5Cy8D,EAAiBN,EAAoB,EACrCO,EAAav8D,MACR,CACL,MAAMw8D,EAAkBV,EAAepoC,QAAQ1zB,GAAU,EACzD,GAAIg7D,GAAgBwB,EAAkBV,EAAej8D,OAAS,EAE5D,YADAsB,EAAQwhB,iBAAiB,CAAEzgB,UAI7Bq6D,EAAaT,EAAeU,GAC5BF,EAAiB,CACnB,CAEA,MAAMG,EAAcV,IAAmBQ,KAAcD,GACrD,OAAKG,GAIE7wD,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo9D,YAAa,IACRzvD,EAASyvD,YACZp7D,OAAQu8D,EACR7xD,QAAS+xD,IAEVv6D,QAVH,CAUS,KAGX8H,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,QAAE9E,EAAO,MAAExI,GAAQC,EAAAA,EAAAA,OAAsBqN,EACzC7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo9D,YAAa,IACRzvD,EAASyvD,YACZI,UAAW,CACT9wD,UACA+T,WAAY,GACZuO,WAAW,KAGd9qB,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,uBAAuB,CAAChM,EAAQmD,EAASqO,KACxD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo9D,aAAaztD,EAAAA,EAAAA,IAAKhC,EAASyvD,YAAa,CAAC,eACxCl5D,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,iBAAiBgI,MAAOhU,EAAQmD,EAASqO,KACxD,MAAM,OAAExP,EAAM,QAAE0K,EAAO,MAAExI,GAAQC,EAAAA,EAAAA,OAAsBqN,EAEjD+M,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EACH,OAGF,MAAM4T,QAAavd,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE2J,OAAM7R,YAChDylB,KAILuV,EAAAA,EAAAA,IAAoBvV,GACpBhvB,EAAQiM,iBAAiB,CACvBpO,QAASmtB,EAAAA,GAA0B,cACnCjqB,UACA,KAGJ8H,EAAAA,EAAAA,IAAiB,eAAe,CAAChM,EAAQmD,EAASqO,KAChD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAChC,QAAE9E,EAAS1K,OAAQgX,IAAgBC,EAAAA,EAAAA,KAAyBjZ,EAAQkE,GAG1E,IAFqBqU,QAAQ7L,GAAWsM,GAGtC,OAGF,MAAM,IAAE6U,EAAG,QAAEjoB,EAAO,WAAEX,GAAeuM,EAErC,IAAIxQ,EAEFA,EADE6sB,EACQ,wBACDjoB,EACC,4BACDX,EACC,6BAEA,4BAGZ9B,EAAQiM,iBAAiB,CACvBpO,QAASmtB,EAAAA,GAA0BntB,GACnCuQ,WAAY4c,EAAAA,GAA0B,yBACtC7jB,OAAQ,CAAC,CACPA,OAAQ,mBACRkH,aAAShI,GACR,CACDc,OAAQ,WACRkH,QAAS,CAAElP,GAAI0W,KAEjB9U,SACA,KAGJ8H,EAAAA,EAAAA,IAAiB,0BAA0B,CAAChM,EAAQmD,EAASqO,KAC3D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo9D,YAAa,IACRzvD,EAASyvD,YACZsB,oBAAoB,IAErBx6D,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,2BAA2B,CAAChM,EAAQmD,EAASqO,KAC5D,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAC5C7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo9D,YAAa,IACRzvD,EAASyvD,YACZsB,oBAAoB,IAErBx6D,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,sBAAsB,CAAChM,EAAQmD,EAASqO,KACvD,MAAM,OAAE8jC,EAAM,MAAEpxC,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EACpD7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAO0J,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo9D,YAAa,IACRzvD,EAASyvD,YACZuB,mBAAoBrpB,IAErBpxC,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,UAAEwd,EAAS,MAAE9qB,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAEvD7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GAExC,OAAKyJ,EAASyvD,YAAYI,WAEnB5vD,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo9D,YAAa,IACRzvD,EAASyvD,YACZI,UAAW,IACN7vD,EAASyvD,YAAYI,UACxB50C,WAAOpf,EACPwlB,YACAvO,WAAY,MAGfvc,GAZyClE,CAYnC,KAGXgM,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,OACJ0K,EAAM,cAAE0iD,EAAa,kBAAEC,EAAiB,MAAE36D,GAAQC,EAAAA,EAAAA,OAChDqN,EAEE7D,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,IAClC,UAAEs5D,GAAc7vD,EAASyvD,YAC/B,IAAKI,GAAW9wD,QAAS,OAEzB,MAAMoyD,EAAetB,GAAW50C,OAAOna,KAAKswD,GACtCA,EAAK/8D,SAAWka,EACX,IACF6iD,EACHH,cAAeA,QAAiBp1D,EAChCq1D,kBAAmBA,QAAqBr1D,GAIrCu1D,IAGT,OAAOnxD,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bo9D,YAAa,IACRzvD,EAASyvD,YACZI,UAAW,IACNA,EACH50C,MAAOk2C,KAGV56D,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,mBAAmB,CAAChM,EAAQmD,EAASqO,KACpD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bq2C,gBAAY7sC,GACXtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,wBAAwB,CAAChM,EAAQmD,EAASqO,KACzD,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5B02C,qBAAiBltC,GAChBtF,EAAM,KAGX8H,EAAAA,EAAAA,IAAiB,+BAA+B,CAAChM,EAAQmD,EAASqO,KAChE,MAAM,MAAEtN,GAAQC,EAAAA,EAAAA,OAAsBqN,GAAW,CAAC,EAElD,OAAO5D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5Bk3C,4BAAwB1tC,GACvBtF,EAAM,I,SCtYX8H,EAAAA,EAAAA,IAAiB,aAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAMwvB,GAAY5qB,EAAAA,EAAAA,KAAWzH,EAAQ6C,EAAOP,KACpCgH,QAAS01D,EAAW,wBAAEC,GAA4B5sC,GAAa,CAAC,EAEpExvB,EAAOO,KAAK67D,yBAA2BA,GACtCp8D,EAAOO,KAAK67D,wBAA0BA,IACzCp8D,EAAS,IACJA,EACHO,MAAMuM,EAAAA,EAAAA,IAAK9M,EAAOO,KAAM,CAAC,6BAI7BpD,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOP,GAAIO,EAAOO,MAE1CivB,GAAW6sC,mBAAqBr8D,EAAOO,KAAK87D,mBAC9Cl/D,GAASmkD,EAAAA,EAAAA,KAAwBnkD,EAAQ6C,EAAOP,GAAIO,EAAOO,KAAK87D,mBAAoB,KAGtFj0D,EAAAA,EAAAA,IAAUjL,GAEV,MAAMm/D,GAAc13D,EAAAA,EAAAA,KAAWzH,EAAQ6C,EAAOP,IA2B9C,OA1BKO,EAAOu8D,oBAAsBhyD,EAAAA,EAAAA,KAAmBpN,EAAQ6C,EAAOP,KAC5D68D,GAAahyD,aAEnBhK,EAAQkK,eAGNxK,EAAOO,KAAKd,KACd+8D,EAAAA,EAAAA,IAA0B,CACxBj+D,OAAQyB,EAAOO,KAAKd,GACpB0N,uBAAwBnN,EAAOO,KAAK4M,8BAIxChI,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAI4B,MAC3C,MAAQ9C,OAAQoM,IAAkBX,EAAAA,EAAAA,KAAyB7M,EAAQkE,IAAU,CAAC,EACxEo7D,EAAaz8D,EAEf2K,IAAkB8xD,EAAWh9D,IAC5B,YAAag9D,EAAWl8D,MAAQ47D,IAAgBM,EAAWl8D,KAAKkG,UAC/D01D,GACF77D,EAAQuiD,gBAAgB,CAAExhD,UAE5Bf,EAAQua,SAAS,CAAEpb,GAAIkL,EAAetJ,UACxC,GAIJ,CAEA,IAAK,iBAAkB,CACrB,MAAMm2B,GAAWklC,EAAAA,EAAAA,KAAmBv/D,EAAQ6C,EAAOP,IAC7Cc,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQ6C,EAAOP,IAWvC,GATAtC,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOP,GAAI,CAAE6K,aAAa,KACtDlC,EAAAA,EAAAA,IAAUjL,GAENoD,GACFD,EAAQsH,kBAAkB,CAAErJ,OAAQgC,EAAKd,KAG3Ca,EAAQ6N,aAAa,CAAE5P,OAAQyB,EAAOP,GAAI0G,OAAO,KAE5CqxB,EACH,OAOF,OAJAr6B,GAASqL,EAAAA,EAAAA,MACTrL,GAASw/D,EAAAA,EAAAA,KAAex/D,EAAQq6B,EAAU,CAACx3B,EAAOP,UAClD2I,EAAAA,EAAAA,IAAUjL,EAGZ,CAEA,IAAK,kBAAmB,CACtBA,GAASy/D,EAAAA,EAAAA,KAAUz/D,EAAQ6C,EAAOP,IAClC,MAAMc,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQ6C,EAAOP,IACvC,GAAIc,IAAQia,EAAAA,EAAAA,KAAcja,GAAO,CAC/B,MAAMuO,GAAe9H,EAAAA,EAAAA,KAAmB7J,EAAQ6C,EAAOP,IACvD,GAAIqP,EAAc,CAChB,MAAM+tD,EAAkB13D,OAAOuG,KAAKoD,GAAclD,IAAI3D,QAAQhJ,OAAO2D,EAAAA,IACrEzF,GAASsL,EAAAA,EAAAA,KAAmBtL,EAAQoD,EAAKd,GAAIo9D,EAC/C,CACF,CAEA,OAAO1/D,CACT,CAEA,IAAK,kBACH,OAAO8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOP,GAAIO,EAAOO,MAG9C,IAAK,yBAA0B,CAC7B,MAAM,GAAEd,EAAE,SAAEwF,EAAWD,EAAAA,GAAc,aAAE83D,GAAiB98D,EAaxD,OAZA7C,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQsC,EAAIwF,EAAU,eAAgB63D,IAClE10D,EAAAA,EAAAA,IAAUjL,QAEVoL,YAAW,KACTpL,GAASqL,EAAAA,EAAAA,MACT,MAAMu0D,GAAsBC,EAAAA,EAAAA,KAAkB7/D,EAAQsC,EAAIwF,EAAU,gBAChE63D,GAAgBC,GAAuBD,EAAahpC,YAAcipC,EAAoBjpC,YACxF32B,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQsC,EAAIwF,EAAU,oBAAgB0B,IAClEyB,EAAAA,EAAAA,IAAUjL,GACZ,GA3G0B,IA+G9B,CAEA,IAAK,aAAc,CACjB,MAAM,QAAEgB,GAAY6B,EAEpB,GAAI7B,EAAQ8+D,WAAa9/D,EAAOiC,gBAAkBjB,EAAQ++D,gBACxD,OAGF,MAAMxzD,GAAU9G,EAAAA,EAAAA,IAAiBzE,EAAQsB,IAEnCc,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQ6C,EAAOzB,QACvC,IAAKgC,EACH,OAGF,MAAM48D,EAAaznD,QAAQ1V,EAAO7B,QAAQsB,IAAMO,EAAO7B,QAAQi/D,kBAE/D,IAAK1zD,EAAS,CACZvM,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOzB,OAAQ,CACzCuG,YAAavE,EAAKuE,YAAcvE,EAAKuE,YAAc,EAAI,IAGrDq4D,IACFhgE,GAASkY,EAAAA,EAAAA,KAAkBlY,EAAQ6C,EAAOzB,OAAQgC,EAAM,CAACP,EAAO7B,QAAQsB,KAAM,IAGhF,MAAM+G,EAAQjG,EAAKkG,SAAUC,EAAAA,EAAAA,KAAuBvJ,EAAQgB,QAAyBwI,EACjFH,IACFrJ,GAASyJ,EAAAA,EAAAA,KAAYzJ,EAAQ6C,EAAOzB,OAAQiI,EAAM/G,GAAI,CACpDqF,YAAa0B,EAAM1B,YAAc0B,EAAM1B,YAAc,EAAI,IAG/D,CASA,OAPAsD,EAAAA,EAAAA,IAAUjL,QAEVgF,EAAAA,EAAAA,IAAmB,CACjB5B,OACApC,WAIJ,CAEA,IAAK,0BACL,IAAK,wBAAyB,CAC5B,MAAM,IAAEgJ,EAAG,cAAE5E,GAAkBvC,EAmB/B,OAjBAmH,EAAI9H,SAASI,IACX,MAAMlB,EAAU,cAAeyB,EAASA,EAAOsP,WAAY1G,EAAAA,EAAAA,KAAsBzL,EAAQsC,GACnFc,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAE5BgE,EAAc9D,WAAa8B,GAAMqB,wBAC7BD,EAAAA,EAAAA,KAA0BxE,EAAQoF,EAAc9D,aACtDtB,EAAS4C,EAAsB5C,EAAQoB,EAAQ,CAC7CqD,qBAAsB9D,KAAKE,IAAIuC,EAAKqB,qBAAuB,EAAG,SAAM+E,EACpEnF,gBAAiBjB,EAAKiB,iBAAiBvC,QAAQoD,GAAMA,IAAM5C,QAI1D8C,EAAc66D,kBAAoB78D,GAAMghB,sBAC3CpkB,GAASgkB,EAAAA,EAAAA,KAAqBhkB,EAAQoB,EAAQgC,EAAM,CAACd,IAAK,GAC5D,IAGKtC,CACT,CAEA,IAAK,qBACH,OAAO+iB,EAAAA,EAAAA,KAAmB/iB,EAAQ6C,EAAOP,GAAIO,EAAO6jB,UAGtD,IAAK,sBAAuB,CAC1B,MAAM,IAAE1c,EAAG,SAAEk2D,GAAar9D,EACpBw3B,EAAW6lC,IAAaC,EAAAA,IAAqB,WAAa,SAEhE,MAAO,IACFngE,EACHiJ,MAAO,IACFjJ,EAAOiJ,MACVm3D,iBAAkB,IACbpgE,EAAOiJ,MAAMm3D,iBAChB,CAAC/lC,GAAWrwB,EAAInI,OAASmI,OAAMR,IAIvC,CAEA,IAAK,6BAA8B,CACjC,MAAM,IAAEQ,GAAQnH,EAEhB,MAAO,IACF7C,EACHiJ,MAAO,IACFjJ,EAAOiJ,MACVm3D,iBAAkB,IACbpgE,EAAOiJ,MAAMm3D,iBAChBzyC,MAAO3jB,EAAInI,OAASmI,OAAMR,IAIlC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAElH,EAAE,SAAE2N,GAAapN,EACnBw3B,GAAWklC,EAAAA,EAAAA,KAAmBv/D,EAAQsC,GAC5C,IAAK+3B,EACH,OAGF,MAAQ,CAACA,GAAW+lC,GAAqBpgE,EAAOiJ,MAAMm3D,iBAEtD,IAAIC,EAAsBD,GAAoB,GAC9C,GAAKnwD,GAEE,IAAKowD,EAAoB/7D,SAAShC,GAAK,CAK5C,GAAiB,WAAb+3B,GAAyBgmC,EAAoBx+D,QAAUy+D,EAAAA,IAAyB,CAClF,MAAMC,EAAUvgE,EAAOiJ,MAAMs3D,QAAQ1hB,OACrCwhB,EAAsBA,EAAoBv+D,QAAQ0+D,GAAaD,GAAWA,EAAQj8D,SAASk8D,IAC7F,CAEAH,EAAsB,CAAC/9D,KAAO+9D,EAChC,OAZEA,EAAsBA,EAAoBv+D,QAAQ0+D,GAAaA,IAAal+D,IAc9E,MAAO,IACFtC,EACHiJ,MAAO,IACFjJ,EAAOiJ,MACVm3D,iBAAkB,IACbpgE,EAAOiJ,MAAMm3D,iBAChB,CAAC/lC,GAAWgmC,EAAoBx+D,OAASw+D,OAAsB72D,IAIvE,CAEA,IAAK,0BAA2B,CAC9B,MAAM,GAAElH,EAAE,SAAE2N,GAAapN,GAEjB8qB,MAAOyyC,GAAqBpgE,EAAOiJ,MAAMm3D,iBAEjD,IAAIC,EAAsBD,GAAoB,GAO9C,OANKnwD,EAEOowD,EAAoB/7D,SAAShC,KACvC+9D,EAAsB,CAAC/9D,KAAO+9D,IAF9BA,EAAsBA,EAAoBv+D,QAAQ0+D,GAAaA,IAAal+D,IAKvE,IACFtC,EACHiJ,MAAO,IACFjJ,EAAOiJ,MACVm3D,iBAAkB,IACbpgE,EAAOiJ,MAAMm3D,iBAChBzyC,MAAO0yC,EAAoBx+D,OAASw+D,OAAsB72D,IAIlE,CAEA,IAAK,qBAAsB,CACzB,MAAM,GAAElH,EAAE,SAAE49D,GAAar9D,EAEzB,OAAO49D,EAAAA,EAAAA,KAAmBzgE,EAAQsC,EAAI49D,EACxC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAE59D,EAAE,OAAEub,GAAWhb,GACfqG,KAAMw3D,EAAe,WAAE9Z,GAAe5mD,EAAO4d,YAE/C5L,OAAuBxI,IAAXqU,EAElB7V,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAI4B,MAC3C,MAAMyJ,GAAWzN,EAAAA,EAAAA,KAAeF,EAAQkE,GACjB8D,OAAOC,OAAOy4D,GAAiB/yD,EAASgzD,iBAAmB,IAAIr+D,KAAOA,IAG3FtC,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAAE2gE,iBAAkB,GAAKz8D,GAC3D,IAGF,MAAM08D,EAAsB5uD,GAAmDrC,EAAAA,EAAAA,IAAK+wD,EAAiB,CAACp+D,IAA9D,IAAKo+D,EAAiB,CAACp+D,GAAKub,GAC9DgjD,EAAiB7uD,EAEnB40C,GAAY9kD,QAAQg/D,GAAcA,IAAcx+D,IADhDskD,GAAYtiD,SAAShC,GAAMskD,EAAa,IAAKA,GAAc,GAAKtkD,GAGpE,MAAO,IACFtC,EACH4d,YAAa,IACR5d,EAAO4d,YACV1U,KAAM03D,EACNha,WAAYia,EACZ/oC,SAASnoB,EAAAA,EAAAA,IAAK3P,EAAO4d,YAAYka,QAAS,CAACx1B,KAGjD,CAEA,IAAK,yBAA0B,CAC7B,MAAM,WAAEskD,GAAe/jD,EAEvB,MAAO,IACF7C,EACH4d,YAAa,IACR5d,EAAO4d,YACVgpC,cAGN,CAEA,IAAK,+BAAgC,CACnC,MAAM,QAAEjpC,GAAY9a,EAEpB,MAAO,IACF7C,EACH4d,YAAa,IACR5d,EAAO4d,YACVmjD,YAAapjD,GAGnB,CAEA,IAAK,oBAAqB,CACxB,MAAMqjD,GAAqBnlD,EAAAA,EAAAA,KAAmB7b,EAAQ6C,EAAOP,KACvD,gBAAE2+D,EAAe,YAAEC,EAAW,gBAAEC,GAAoBt+D,EAC1D,IAAKm+D,EACH,OAGF,IAAII,GAAe,EACfC,EAAUL,GAAoBK,QAC9B,IAAIL,EAAmBK,SACvB,GAEJ,GAAIJ,EACFI,EAAUJ,EACVG,GAAe,OACV,GAAIF,EAENG,EAAQx/D,QACLw/D,EAAQjwD,MAAMoQ,GAAMA,EAAEtF,SAAWglD,EAAYhlD,WAEjDmlD,EAAQ31D,KAAKw1D,GACbE,GAAe,QAEZ,GAAIC,EAAQx/D,QAAUs/D,EAAiB,CAC5C,MAAMG,EAAcD,EAAQvqD,WAAW0K,GAAMA,EAAEtF,SAAWilD,IACtDG,GAAe,IACjBD,EAAQlqD,MAAMmqD,EAAa,GAC3BF,GAAe,EAEnB,CAEA,GAAIA,EAAc,CAChB,MAAMG,EAAeF,EAAQv/D,QAAO,EAAG0/D,UAASC,aAAcD,GAAWC,IASzE,OANAzhE,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQ6C,EAAOP,GAAI,CAAEo/D,aAAcL,EAAQx/D,SAC/D7B,GAAS+iB,EAAAA,EAAAA,KAAmB/iB,EAAQ6C,EAAOP,GAAI,CAC7C++D,UACAM,kBAAkB7yD,EAAAA,EAAAA,IAAqByyD,EAAc,WAIzD,CAEA,MACF,CAEA,IAAK,eAAgB,CACnB,MAAM,OACJngE,EAAM,SAAE0G,EAAQ,MAAEoM,GAChBrR,EAEJ,IADa7C,EAAOiJ,MAAMC,KAAK9H,GAE7B,OAKF,OAFApB,GAAS0I,EAAAA,EAAAA,KAAmB1I,EAAQoB,EAAQ0G,GAAYD,EAAAA,GAAgB,QAASqM,GACjFlU,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAEuT,UAAWT,GAAOQ,MAE1D,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAEtT,EAAM,gBAAE83B,EAAe,mBAAED,GAAuBp2B,EAExD,IADa7C,EAAOiJ,MAAMC,KAAK9H,GAE7B,OAUF,OAPApB,GAAS+iB,EAAAA,EAAAA,KAAmB/iB,EAAQoB,EAAQ,CAC1C83B,kBACAD,wBAEFhuB,EAAAA,EAAAA,IAAUjL,QAEVmD,EAAQy+D,qBAAqB,CAAExgE,UAEjC,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAEA,EAAM,QAAE4J,EAAO,SAAEiF,GAAapN,EAGtC,IADa7C,EAAOiJ,MAAMC,KAAK9H,GAE7B,OAQF,OALApB,GAASyJ,EAAAA,EAAAA,KAAYzJ,EAAQoB,EAAQ4J,EAAS,CAC5CiF,kBAEFhF,EAAAA,EAAAA,IAAUjL,EAGZ,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAEoB,EAAM,MAAEuwD,GAAU9uD,EAG1B,IADa7C,EAAOiJ,MAAMC,KAAK9H,GACpB,OAKX,OAHApB,GAAS6hE,EAAAA,EAAAA,KAAsB7hE,EAAQoB,EAAQuwD,QAC/C1mD,EAAAA,EAAAA,IAAUjL,EAGZ,CAEA,IAAK,cAAe,CAClB,MAAM,OAAEoB,EAAM,QAAE4J,GAAYnI,EAEtBO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,GAAMkG,QAAS,OAIpB,YAFAnG,EAAQ4H,cAAc,CAAE3J,SAAQ4J,WAGlC,CAEA,IAAK,eAAgB,CACnB,MAAM,OAAE5J,GAAWyB,EAEbO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,GAAMkG,QAAS,OAIpB,YAFAnG,EAAQm5B,WAAW,CAAEl7B,SAAQ4H,OAAO,GAGtC,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAE5H,EAAM,UAAEisC,GAAcxqC,EAExBO,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAChC,IAAKgC,GAAMkG,QAAS,OAEpBtJ,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClC0gE,kBAAmBz0B,KAErBpiC,EAAAA,EAAAA,IAAUjL,GACV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,OAAEgC,EAAM,MAAE0D,GAAU7C,EAE1B7C,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQgC,EAAQ,CAClC88B,cAAep5B,EAAMpD,MAEvB2I,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQm2B,sBAAsB,CAAEt3B,SAAQu3B,uBAAuB,IAE/D,KACF,CAEA,IAAK,2BAA4B,CAC/B,MAAM,OAAEv3B,EAAM,QAAE+/D,GAAYl/D,EAEtB0b,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAChC,IAAKuc,EACH,OAGGwjD,GAAWxjD,EAAKugB,gBAAkBijC,EAMrC/hE,GAASuK,EAAAA,EAAAA,KAAgBvK,EAAQgC,EAAQ+/D,IALzC/hE,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQgC,EAAQ,CAClC88B,mBAAet1B,IAEjBxJ,GAASgiE,EAAAA,EAAAA,KAAkBhiE,EAAQgC,OAAQwH,KAI7CyB,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQm2B,sBAAsB,CAAEt3B,SAAQu3B,uBAAuB,IAE/D,KACF,EAGc,IC9hBlB,MAAM0oC,IAA4BC,E,QAAAA,KAIlC,WAEE,IAAIliE,GAASqL,EAAAA,EAAAA,MAEbrL,GAASspB,EAAAA,EAAAA,KAAoBtpB,EAAQ,IAChCA,EAAOq8B,MAAM8C,gBACbgjC,MAELl3D,EAAAA,EAAAA,IAAUjL,GAEVmiE,GAAuB,CAAC,CAC1B,IAbA,IAAIA,GAAsD,CAAC,GAe3Dn2D,EAAAA,EAAAA,IAAiB,aAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,gBACH,OAAOu/D,EAAAA,EAAAA,KAAcpiE,EAAQ6C,EAAOP,IAGtC,IAAK,aAAc,CACjB0F,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAI4B,OACvC/C,EAAAA,EAAAA,KAAqBnB,EAAQ6C,EAAOP,KAAOO,EAAOwR,KAAK6Z,aAAcjN,EAAAA,EAAAA,KAA2BjhB,KAC9F6C,EAAOwR,KAAK6Z,WAAaluB,EAAOkI,QAAQhE,GAAOkxC,cACjDjyC,EAAQqgB,iBAAiB,CAAE6qB,WAAW,EAAMnqC,UAI9ClE,EAAS,IACJA,EACHyT,aAAc,CACZ7B,SAAU,CAAC,IAGjB,IAGF,MAAMywD,GAAY/tD,EAAAA,EAAAA,KAAWtU,EAAQ6C,EAAOP,IAW5C,OATAtC,GAASk/B,EAAAA,EAAAA,KAAWl/B,EAAQ6C,EAAOP,GAAIO,EAAOwR,MAC1CxR,EAAO6jB,WACT1mB,GAAS8jB,EAAAA,EAAAA,KAAmB9jB,EAAQ6C,EAAOP,GAAIO,EAAO6jB,WAGpD27C,GAAWnD,mBAAqBr8D,EAAOwR,KAAK6qD,mBAC9Cl/D,GAASmkD,EAAAA,EAAAA,KAAwBnkD,EAAQ6C,EAAOP,GAAIO,EAAOwR,KAAK6qD,mBAAoB,IAG/El/D,CACT,CAEA,IAAK,0BACHmD,EAAQm/D,aAAa,CAAEpmD,OAAQrZ,EAAOP,KACtC,MAGF,IAAK,wBACH,OAAO48B,EAAAA,EAAAA,KAAWl/B,EAAQ6C,EAAOqZ,OAAQ,CAAEqmD,YAAa1/D,EAAO0/D,cAGjE,IAAK,mBAIH,OAFAJ,GAAqBt/D,EAAOqZ,QAAUrZ,EAAO4tC,YAC7CwxB,KAIF,IAAK,qBAAsB,CACzB,MAAM,GAAE3/D,EAAE,SAAEokB,GAAa7jB,EAEzB,OAAOihB,EAAAA,EAAAA,KAAmB9jB,EAAQsC,EAAIokB,EACxC,CAEA,IAAK,sBAAuB,CAC1B,MAAM,MAAE8b,EAAK,OAAEiF,GAAW5kC,EAEpB2/D,GAAqB77C,EAAAA,EAAAA,KAAmB3mB,EAAQwiC,GACtD,IAAKggC,GAAoBC,QACvB,OAGF,OAAO3+C,EAAAA,EAAAA,KAAmB9jB,EAAQwiC,EAAO,CACvCigC,QAAS,IACJD,EAAmBC,QACtBC,WAAYj7B,IAGlB,EAGc,KCzGlBz7B,EAAAA,EAAAA,IAAiB,aAAa,CAAChM,EAAQmD,EAASN,KAC9C,GACO,qBADCA,EAAO,SAEX,OAAOioB,EAAAA,EAAAA,KAAiB9qB,EAAQ6C,EAAOP,GAAIO,EAAO4nB,WAItC,KCWlBze,EAAAA,EAAAA,IAAiB,aAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,iBAAkB,CACrB,MAAM,MACJw5B,EAAK,MAAEpzB,EAAK,YAAE05D,EAAW,MAAEC,GACzB//D,EACAw5B,IAAOr8B,GAAS6iE,EAAAA,EAAAA,KAAS7iE,EAAQq8B,IACjCpzB,IAAOjJ,GAAS8iE,EAAAA,EAAAA,KAAS9iE,EAAQiJ,IACjC05D,IAAa3iE,GAAS2Q,EAAAA,EAAAA,KAAkB3Q,EAAQ2iE,IAChDC,GACFA,EAAM1gE,SAASiK,IACbnM,GAASkN,EAAAA,EAAAA,KAAWlN,EAAQmM,EAAK7J,GAAI6J,EAAK,KAG9ClB,EAAAA,EAAAA,IAAUjL,GACV,KACF,CAEA,IAAK,oBACH,OAAI6C,EAAO2nC,WACFu4B,EAAAA,EAAAA,KAAe/iE,EAAQ6C,EAAOP,IAC5BO,EAAOmgE,qBACThjE,GAEAgpC,EAAAA,EAAAA,KAAkBhpC,EAAQ6C,EAAOP,IAG5C,IAAK,yBACHtC,EAAS,IACJA,EACHu/B,YAAa,CACX5jB,QAAS,MAGb1Q,EAAAA,EAAAA,IAAUjL,GACV,MAEF,IAAK,eACHmD,EAAQ87C,aACR,MAEF,IAAK,yBAEH97C,EAAQ8/D,qBACR,MAGF,IAAK,yBACH9/D,EAAQ+/D,uBACR,MAEF,IAAK,uBACH//D,EAAQ+mB,qBACR,MAEF,IAAK,wBACH/mB,EAAQggE,sBACR,MAEF,IAAK,4BACHhgE,EAAQigE,0BACR,MAEF,IAAK,0BACHjgE,EAAQi7C,wBACR,MAEF,IAAK,4BAA6B,CAChC,MAAMilB,EAAWxgE,EAAO+uD,cAAgB5xD,EAAOyiB,aAAagJ,MAAMM,OAAS/rB,EAAOqqB,SAASoB,MAAMM,OACjG,IAAKs3C,EAAU,OAAOrjE,EACtB,MAAMsjE,EAAW,CAACzgE,EAAOP,MAAO+gE,EAASvhE,QAAQQ,GAAOA,IAAOO,EAAOP,MACtEa,EAAQogE,mBAAmB,CAAE5R,MAAO2R,EAAU1R,cAAe/uD,EAAO+uD,gBACpE,KACF,CAEA,IAAK,oBACHzuD,EAAQqgE,kBACR,MAEF,IAAK,yBAA0B,CAE7B,MAAM7R,EAAQ9uD,EAAO8uD,MAAM7vD,QAAQ2hE,GAAUlrD,QAAQvY,EAAOqqB,SAAS4B,SAASw3C,MAE9EtgE,EAAQogE,mBAAmB,CAAE5R,QAAOC,cAAe/uD,EAAO+uD,gBAC1D,KACF,CAEA,IAAK,kBACHzuD,EAAQugE,gBACR,MAEF,IAAK,gBACH1jE,EAAS,IACJA,EACHm5B,SAAU,IACLn5B,EAAOm5B,SACVoqB,QAAS,IACJvjD,EAAOm5B,SAASoqB,QACnB,CAAC1gD,EAAOwM,KAAMxM,EAAO8gE,UAI3B14D,EAAAA,EAAAA,IAAUjL,GACV,MAEF,IAAK,kCACHgI,OAAOC,OAAOjI,EAAOkI,SAAShG,SAAQ,EAAGI,GAAI4B,MAC3ClE,GAAS4jE,EAAAA,EAAAA,KAAqB5jE,EAAQ6C,EAAOwhB,IAAKngB,GAClDlE,GAAS+vC,EAAAA,EAAAA,KAAe/vC,EAAQgwC,EAAAA,GAAY6zB,eAAgB3/D,EAAM,KAEpE+G,EAAAA,EAAAA,IAAUjL,GACV,MAEF,IAAK,0BACHgI,OAAOC,OAAOjI,EAAOkI,SAAShG,SAASyL,IACrC3F,OAAOsI,QAAQ3C,EAASu2B,QAAQD,eAAe/hC,SAAQ,EAAE8/B,EAAWwC,MAC9DA,EAAO2F,UAAYtnC,EAAOsnC,UAC5BhnC,EAAQ2lC,oBAAoB,CAAE5kC,MAAOyJ,EAASrL,KAC9Ca,EAAQ2gE,YAAY,CAAEz0D,IAAK2yB,EAAW99B,MAAOyJ,EAASrL,KACxD,GACA,IAEJ,MAEF,IAAK,cACHtC,GAASgiD,EAAAA,EAAAA,KAAkBhiD,EAAQ6C,EAAOb,OAAQ,CAAE,CAACa,EAAOqkB,MAAM5kB,IAAKO,EAAOqkB,QAC9ElnB,GAASuhD,EAAAA,EAAAA,KAAuBvhD,EAAQ,CAAE,CAAC6C,EAAOb,SAAS8/C,EAAAA,EAAAA,KAAkB9hD,EAAQ6C,EAAOb,WAC5FiJ,EAAAA,EAAAA,IAAUjL,GACV,MAEF,IAAK,cACHA,GAASuiD,EAAAA,EAAAA,KAAgBviD,EAAQ6C,EAAOb,OAAQa,EAAO6J,UACvDzB,EAAAA,EAAAA,IAAUjL,GACV,MAEF,IAAK,oBACHA,GAASsiD,EAAAA,EAAAA,KAA2BtiD,EAAQ6C,EAAOb,OAAQa,EAAOw/C,aAClEp3C,EAAAA,EAAAA,IAAUjL,GACV,MAEF,IAAK,0BAA2B,CAC9B,MAAM,OAAEgC,EAAM,QAAE0K,EAAO,SAAEvK,GAAaU,EAEtC,KADcskB,EAAAA,EAAAA,KAAgBnnB,EAAQgC,EAAQ0K,GAClC,OAAO1M,EACnBA,GAASyiD,EAAAA,EAAAA,KAAgBziD,EAAQgC,EAAQ0K,EAAS,CAAEg4C,aAAcviD,KAClE8I,EAAAA,EAAAA,IAAUjL,GACV,KACF,CAEA,IAAK,oBACHA,GAASwhD,EAAAA,EAAAA,KAAkBxhD,EAAQ6C,EAAO4+C,cAC1Cx2C,EAAAA,EAAAA,IAAUjL,GACV,MAEF,IAAK,uBACHmD,EAAQ+pC,iBACR,MAEF,IAAK,yBACH/pC,EAAQ4gE,wBAAwB,CAC9BxM,SAAU10D,EAAO00D,WAEnB,MAGF,IAAK,4BACHv3D,EAAS,IACJA,EACHm5B,SAAU,IACLn5B,EAAOm5B,SACV6qC,oBAAqBnhE,EAAOm+B,aAGhC/1B,EAAAA,EAAAA,IAAUjL,GACV,MAGF,IAAK,yBACHikE,EAAAA,GAAAA,IAA0BphE,EAAO8qC,UACjC,MAGF,IAAK,kBACHu2B,EAAAA,GAAAA,IAAwBrhE,EAAOqsB,QAASrsB,EAAOshE,QAASthE,EAAOuhE,cAInD,KC1MlBp4D,EAAAA,EAAAA,IAAiB,aAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,uBACH,OAAOwhE,EAAAA,EAAAA,KAAqBrkE,EAAQ6C,EAAOyhE,SAAUzhE,EAAOqa,SAAUra,EAAO0hE,oBAG/E,IAAK,yBAA0B,CAC7B,MAAM,OACJnjE,EAAM,QAAEk/B,EAAO,SAAEpjB,EAAQ,mBAAEqnD,GACzB1hE,EACS7C,EAAOiJ,MAAMC,KAAK9H,KAG7BpB,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAAEk/B,aAGxCtgC,GAASwkE,EAAAA,EAAAA,KAAmBxkE,EAAQoB,EAAQ,CAAEk/B,UAASpjB,WAAUqnD,wBACjEt5D,EAAAA,EAAAA,IAAUjL,GACV,KACF,CAEA,IAAK,8BAA+B,CAClC,MAAM,OACJoB,EAAM,QAAE4J,EAAO,QAAEs1B,GACfz9B,EAEJ7C,GAASyJ,EAAAA,EAAAA,KAAYzJ,EAAQoB,EAAQ4J,EAAS,CAAEs1B,aAEhDr1B,EAAAA,EAAAA,IAAUjL,GACV,KACF,EAGc,KCrClBgM,EAAAA,EAAAA,IAAiB,aAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,2BACH,MAAO,IACF7C,EACHykE,cAAe,IACVzkE,EAAOykE,cACVz1C,WAAW,EACXwf,uBAAwB3rC,EAAOhB,SAKrC,IAAK,mBACH,MAAO,IACF7B,EACHykE,cAAe,IACVzkE,EAAOykE,cACVrxD,MAAOvQ,EAAO7B,UAMN,KCxBlBgL,EAAAA,EAAAA,IAAiB,aAAa,CAAChM,EAAQmD,EAASN,KAC9C,GACO,wBADCA,EAAO,SAEX,MAAO,IACF7C,EACH0kE,iBAAkB,IACb1kE,EAAO0kE,iBACV11C,WAAW,EACX5b,MAAOvQ,EAAOuQ,OAMN,I,6BCHlBpH,EAAAA,EAAAA,IAAiB,aAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,kBAAmB,CACtB,GAAoC,cAAhCA,EAAO8hE,KAAKxlD,gBACd,OAAInf,EAAO4kE,WAAWC,uBAChB,mBAAoB1hE,GAASA,EAAQ2hE,eAAe,CAAEC,cAAc,EAAM7gE,OAAOC,EAAAA,EAAAA,UAG9E6gE,EAAAA,GAAAA,IAAgBhlE,EAAQ6C,EAAO8hE,KAAKriE,IAI/C,MAAM2iE,GAAYC,EAAAA,GAAAA,IAAgBllE,EAAQ6C,EAAO8hE,KAAKriE,IAChDlB,EAAS6jE,GAAW7jE,OAO1B,OANIA,IACFpB,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClC+jE,eAAiBF,EAAUG,kBAAoB,GAAK7sD,QAAQ0sD,EAAUI,cAAcxjE,YAIjFyjE,EAAAA,GAAAA,IACLtlE,EACA6C,EAAO8hE,KAAKriE,IACZqN,EAAAA,EAAAA,IAAK9M,EAAO8hE,KAAM,CAAC,yBACnBn7D,EACA3G,EAAO8hE,KAAKS,kBAEhB,CACA,IAAK,wBAOH,OANa39D,EAAAA,EAAAA,KAAWzH,EAAQ6C,EAAOzB,UAErCpB,GAAS+iB,EAAAA,EAAAA,KAAmB/iB,EAAQ6C,EAAOzB,OAAQ,CACjDmkE,YAAa1iE,EAAO8hE,KAAKriE,MAGtBtC,EAET,IAAK,8BAA+B,CAClC,MAAM,YAAEulE,EAAW,aAAEF,EAAY,WAAE5kD,GAAe5d,GAC5C,cAAEZ,GAAkBjC,EAG1BA,GAASqL,EAAAA,EAAAA,MACTg6D,EAAanjE,SAASsjE,IAChBA,EAAYljE,KACdtC,GAASylE,EAAAA,GAAAA,IACPzlE,EAAQulE,EAAaC,EAAYljE,GAAIkjE,EAAajtD,QAAQkI,IAAexe,IAAkBujE,EAAYljE,IAE3G,IAEEme,IACFzgB,GAASslE,EAAAA,GAAAA,IAAgBtlE,EAAQulE,EAAa,CAC5C9kD,gBAIJ,MAAMwkD,GAAYC,EAAAA,GAAAA,IAAgBllE,EAAQulE,GACpCnkE,EAAS6jE,GAAW7jE,OAM1B,OALIA,IACFpB,GAAS8C,EAAAA,EAAAA,KAAW9C,EAAQoB,EAAQ,CAClC+jE,eAAiBF,EAAUG,kBAAoB,GAAK7sD,QAAQ0sD,EAAUI,cAAcxjE,WAGjF7B,CACT,CACA,IAAK,kBAAmB,CACtB,IAAK0lE,EAAAA,GAAqB,OAE1B,MAAM,UACJC,EAAS,cACT1jE,GACEjC,GAEE,KAAE2kE,GAAS9hE,EAEjB,GAAI8iE,EACF,MAAmB,cAAfhB,EAAKp5B,OACPpoC,EAAQyiE,mBAAmB,CAAEC,MAAO,QAChC,WAAY1iE,GAASA,EAAQ2iE,OAAO,CAAE5hE,OAAOC,EAAAA,EAAAA,QAE1C,IACFnE,KACC2kE,EAAKoB,YAAc,CAAEC,gBAAiBrB,UAI9C,EAKF,GAFmBA,GAAMhtC,UAAY11B,GAEH,cAAf0iE,EAAKp5B,MAgBtB,OAfAxmC,EAAAA,EAAAA,KAAU,KACR/E,GAASqL,EAAAA,EAAAA,OACT46D,EAAAA,EAAAA,IAAgB,CACdtB,OACAtwD,MAAM6xD,EAAAA,GAAAA,IAAoBlmE,IAC1B,KAGJmmE,EAAAA,GAAAA,OACKC,EAAAA,GAAAA,IAAmCpmE,EAAQmD,EAASwhE,EAAK0B,SAASliE,EAAAA,EAAAA,OACvEnE,EAAS,IACJA,EACH2lE,UAAWhB,IAGN/2D,EAAAA,EAAAA,GAAe5N,EAAQ,CAC5BsmE,oBAAoB,IACnBniE,EAAAA,EAAAA,MAEP,EAGc,I,iBCxHlB6H,EAAAA,EAAAA,IAAiB,aAAa,CAAChM,EAAQmD,EAASN,KAC9C,OAAQA,EAAO,UACb,IAAK,8BAA+B,CAClC,MAAM,aAAEuxC,EAAY,MAAElwC,GAAUrB,EAC1BwtC,EAAO+D,EAAa/D,MACpB,QAAEz9B,GAAYy9B,GAEd,YAAEk2B,EAAW,SAAE/sB,GAAa5mC,EAEM,UAApCwhC,EAAa7E,cAAcntC,MAC7Be,EAAQ+hD,uBAAuB,CAAEhhD,UACjCf,EAAQiM,iBAAiB,CACvBpO,QAASmtB,EAAAA,GAA0B,oBAAqBimB,EAAa7E,aAAauB,OAClFxhC,MAAO6e,EAAAA,GAA0B,iBACjCwtC,KAAM,OACNz3D,UAEFf,EAAQ01C,gBAAgB,CAAEC,WAAW,EAAM50C,WAE3Cf,EAAQiM,iBAAiB,CACvBlL,QACAlD,QAASmtB,EAAAA,GAA0B,kBAAmB,EACpDq4C,EAAAA,GAAAA,GAAuBD,EAAa/sB,EAAUrrB,EAAAA,KAAgCsgB,MAC9E4B,EAAK/gC,WAKXrE,EAAAA,EAAAA,IAAUjL,GAEV,KACF,CAEA,IAAK,kCAAmC,CACtC,MAAM,aAAEo0C,EAAY,MAAElwC,GAAUrB,GAC1B,aAAE0sC,EAAY,iBAAEsF,EAAgB,KAAExE,GAAS+D,EACjD,GAA2B,2BAAvB7E,GAAcntC,MAAqCyyC,EAAkB,CACvE,MAAM9D,EAAS8D,EAAiB4xB,oBAAqB11B,OAErD5tC,EAAQiM,iBAAiB,CACvBlL,QACAoL,MAAO6e,EAAAA,GAA0B,8BACjCntB,QAASmtB,EAAAA,GAA0B,iCAAkC,CACnE4iB,EACA8D,EAAiBvlC,YAChB9F,EAAWunC,GACd4qB,KAAM,QAEV,CAEA,GAAItrB,GAAMz9B,QAAQ8zD,mBAAoB,CACpC,MAAM31B,EAASV,EAAKz9B,QAAQ2zD,YAC5BpjE,EAAQiM,iBAAiB,CACvBlL,QACAoL,MAAO6e,EAAAA,GAA0B,8BACjCntB,QAASmtB,EAAAA,GAA0B,iCAAkC,CACnE4iB,EACAV,EAAK/gC,YACJ9F,EAAWunC,GACd4qB,KAAM,QAEV,CAEA,GAA2B,aAAvBpsB,GAAcntC,KAAqB,CACrC,IAAKmtC,EAAa5zB,QAChB,OAEF,MAAMgrD,GAAiBzmE,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOgyC,UAEjDywB,GAAkBp3B,EAAa5zB,QAAQ,KAAOgrD,EAAe1wB,YAC/Dj2C,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bk2C,UAAW,IACNywB,EACHC,aAAa,IAEd1iE,GAEP,CAEA,GAA2B,cAAvBqrC,GAAcntC,KAAsB,CACtC,IAAKmtC,EAAarzB,OAChB,OAEF,MAAM2qD,GAAkB3mE,EAAAA,EAAAA,KAAeF,EAAQkE,GAAOkyC,eAElDywB,GAAiBvxB,QAAU/F,EAAarzB,SAAW2qD,EAAgB5wB,YACrEj2C,GAAS4N,EAAAA,EAAAA,GAAe5N,EAAQ,CAC9Bo2C,eAAgB,IACXywB,EACHD,aAAa,IAEd1iE,IAGLf,EAAQ01C,gBAAgB,CAAEC,WAAW,EAAM50C,SAC7C,CACA,KACF,CAEA,IAAK,qBAEH,IADclE,EAAO8wC,MAEnB,OAGF9wC,GAASu6C,EAAAA,EAAAA,KAAmBv6C,EAAQ6C,EAAOguC,UAE3C5lC,EAAAA,EAAAA,IAAUjL,GAEVmD,EAAQ+xC,iBAGZ,I,gKCrHF,MAAM4xB,GAAejhE,SAASkhE,cAAc,yBACtCC,GAAyBF,IAAcG,aAAa,YAAc,GAkCxE,SAASC,GAAazV,GACpBA,EAAE0V,gBACJ,C,4EC9BA,MAOA,GAP6CC,IAC3C,MAAM,SAAEnW,GAAamW,EACfC,GAAmBC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,oBAAqBvW,GAE7E,OAAOoW,EAAmBI,GAAAA,GAAAC,cAACL,EAAgB,WAAM79D,CAAS,ECE5D,GARsC49D,IACpC,MAAM,YAAE7B,GAAgB6B,EAClBO,GAAYL,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,aAAcjC,GAG/D,OAAOoC,EAAYF,GAAAA,GAAAC,cAACC,EAAcP,QAAY59D,CAAS,ECIzD,GAPsC49D,IACpC,MAAM,SAAEnW,GAAamW,EACfQ,GAAYN,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,aAAcvW,GAE/D,OAAO2W,EAAYH,GAAAA,GAAAC,cAACE,EAAS,WAAMp+D,CAAS,ECE9C,GAR+C49D,IAC7C,MAAM,OAAE9xB,GAAW8xB,EACbS,GAAqBP,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQC,MAAO,sBAAuBlyB,GAGjF,OAAOuyB,EAAqBJ,GAAAA,GAAAC,cAACG,EAAuBT,QAAY59D,CAAS,ECG3E,GARiD49D,IAC/C,MAAM,kBAAEj7C,GAAsBi7C,EACxBU,GAAuBR,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,wBAAyB57C,GAGrF,OAAO27C,EAAuBL,GAAAA,GAAAC,cAACI,EAAyBV,QAAY59D,CAAS,ECG/E,GAR+C49D,IAC7C,MAAM,OAAE9xB,GAAW8xB,EACbY,GAAqBV,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,sBAAuBzyB,GAGjF,OAAO0yB,EAAqBP,GAAAA,GAAAC,cAACM,EAAuBZ,QAAY59D,CAAS,ECG3E,GAR4C49D,IAC1C,MAAM,OAAE9xB,GAAW8xB,EACba,GAAkBX,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,mBAAoBzyB,GAG3E,OAAO2yB,EAAkBR,GAAAA,GAAAC,cAACO,EAAoBb,QAAY59D,CAAS,E,wCCDrE,MAmBA,IAAe0+D,EAAAA,GAAAA,KAnBqBC,EAAGC,qBACrCC,EAAAA,GAAAA,MACA,MAAMC,GAA2B7R,EAAAA,GAAAA,MAQjC,IANA8R,EAAAA,GAAAA,KAAU,KACJH,IACFI,EAAAA,GAAAA,GAAeF,EACjB,GACC,CAACF,EAAeE,KAEfF,GAAkBE,EAItB,OACEb,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,wBAAuBo6C,EAAAA,GAAAA,IAAqBH,GAAgC,I,mGCjB/F,MAOA,GAP0ClB,IACxC,MAAMsB,GAAgBpB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,iBAGrD,OAAOW,EAAgBjB,GAAAA,GAAAC,cAACgB,EAAkBtB,GAAYK,GAAAA,GAAAC,cAACiB,GAAAA,EAAO,KAAG,E,4ECOnE,MAgEA,GAhEoCC,EAClC/K,UACAgL,mBACAC,eACAC,iBAEA,MAAOC,EAAYC,IAAiBC,EAAAA,GAAAA,KAAS,IAE7CX,EAAAA,GAAAA,KAAU,KACH1K,GACHoL,GAAc,EAChB,GACC,CAACpL,IAEJ,MAAM5U,GAAOkgB,EAAAA,GAAAA,KAEPC,GAAeC,EAAAA,GAAAA,GACnB,gBACAxL,GAAW,WACXmL,GAAc,gBAGVM,GAAmBC,EAAAA,GAAAA,KAAY,KACnCN,GAAeD,EAAW,GACzB,CAACA,IAEEQ,GAAcD,EAAAA,GAAAA,KAAY,KAC9BN,GAAc,EAAM,GACnB,IAEGQ,GAAYC,EAAAA,GAAAA,KAAQ,IACxBjC,GAAAA,GAAAC,cAAAD,GAAAA,GAAAkC,SAAA,KACElC,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CAACjO,KAAK,UAAUkO,QAASf,GAAe7f,EAAK,eACtDwe,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CAACjO,KAAK,QAAQkO,QAASd,GAAa9f,EAAK,aAClDwe,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CAACjO,KAAK,OAAOkO,QAAShB,GAAmB5f,EAAK,sBAExD,CAACA,EAAM6f,EAAcC,EAAYF,IAEpC,OACEpB,GAAAA,GAAAC,cAAA,OAAKr5C,UAAW+6C,EAAcU,IAAK7gB,EAAK8gB,MAAQ,WAAQvgE,GACtDi+D,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLx0D,OAAK,EACLy0D,MAAM,UACN57C,UAAW26C,EAAa,SAAW,GACnCa,QAASP,EACTY,UAAWjhB,EAAK+f,EAAa,QAAU,mBACvCmB,UAAW,GAEX1C,GAAAA,GAAAC,cAAA,KAAGr5C,UAAU,8BACbo5C,GAAAA,GAAAC,cAAA,KAAGr5C,UAAU,qBAEfo5C,GAAAA,GAAAC,cAAC0C,GAAAA,EAAI,CACH90B,OAAQ0zB,EACRqB,UAAWphB,EAAK8gB,MAAQ,OAAS,QACjCO,UAAU,SACVC,WAAS,EACTC,QAAShB,GAERC,GAEC,EChEV,GAPuCrC,IACrC,MAAMqD,GAAanD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,cAGlD,OAAO0C,EAAahD,GAAAA,GAAAC,cAAC+C,EAAerD,GAAYK,GAAAA,GAAAC,cAACiB,GAAAA,EAAO,KAAG,E,wFC4C7D,MAuSA,IAAeT,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KACjB1qE,IACC,MACE4d,aACE1U,KAAMw3D,EACN9Z,WAAY+jB,EACZ7yC,QAAS8yC,GAEX3hE,OACEs3D,SAAS,SACPsK,IAGJ5pB,SACE6c,gBACE+M,SAAUC,IAGdztC,gBACEC,OAAQytC,GACT,cACD9oE,EAAa,gBACbkzD,GACEn1D,GACE,4BAAEgrE,EAA2B,iBAAErK,IAAqBzgE,EAAAA,EAAAA,KAAeF,IACjEo9D,aAAeM,cAAeuN,KAAyB/qE,EAAAA,EAAAA,KAAeF,GAE9E,MAAO,CACL0gE,kBACAkK,oBACAD,mBACAhK,mBACA1+D,gBACA+oE,8BACAE,iBAAkB3yD,QAAQsyD,GAAUhpE,QACpCspE,mBAAoB5yD,QAAQuyD,GAAiBjpE,QAC7CupE,YAAYr9C,EAAAA,GAAAA,GAAmB/tB,EAAQ,iBACvCqrE,kBAAkBt9C,EAAAA,GAAAA,GAAmB/tB,EAAQ,mBAC7CsrE,cAAcv9C,EAAAA,GAAAA,GAAmB/tB,EAAQ,kBACzCm1D,kBACA8V,qBACAF,WACD,GA1CeL,EApS2Ba,EAC7CC,kBACAC,yBACAC,4BACAhL,kBACAiK,mBACAhK,mBACA1+D,gBACA0pE,mBACAX,8BACAI,aACAE,eACAM,uBACAhB,oBACAS,mBACAH,mBACAC,qBACAhW,kBACA8V,qBACAF,eAEA,MAAM,gBACJc,EAAe,oBACfC,EAAmB,SACnBpuD,EAAQ,yBACRquD,EAAwB,0BACxBC,EAAyB,mBACzBC,EAAkB,sBAClB50C,IACEpP,EAAAA,EAAAA,MAGEikD,GAAgBC,EAAAA,GAAAA,IAAuB,MAEvCljB,GAAOkgB,EAAAA,GAAAA,MAEbZ,EAAAA,GAAAA,KAAU,KACRsD,GAAiB,GAChB,IAEH,MAAM,IACJO,EACAC,aAAcC,EACdC,aAAcC,IACZC,EAAAA,GAAAA,GAAkB,CACpBn3B,OAAQ21B,EACR58C,WAAW,EACXq+C,kBAAkB,IAEdC,GAAuBC,EAAAA,GAAAA,GAAgBJ,GAEvCK,GAAgCnD,EAAAA,GAAAA,KAAQ,KACrC,CACLpnE,GAAIwqE,EAAAA,IACJx9D,MAAOq7D,IAAmB,KAAOmC,EAAAA,IAAgB7jB,EAAK,uBAAyBA,EAAK,kBACpFnrC,gBAAiBivD,GAAAA,EACjBC,gBAAiBD,GAAAA,KAElB,CAACpC,EAAkB1hB,IAEhBgkB,GAAmBvD,EAAAA,GAAAA,KAAQ,IACxBiB,EACHA,EAAiBl8D,KAAKnM,GAClBA,IAAOwqE,EAAAA,IACFD,EAGFnM,EAAgBp+D,IAAO,CAAC,IAC9BR,OAAOyW,cACR/O,GACH,CAACk3D,EAAiBmM,EAAgBlC,IAE/BuC,EAAsBD,GAAkBn2D,WAAW+G,GAAWA,EAAOvb,KAAOwqE,EAAAA,MAC5EK,EAAqBD,IAAwBvM,EAC7CyM,EA5EmB,IA4EsBzM,EAEzC0M,GAAqBhF,EAAAA,GAAAA,MACrBiF,GAAa5D,EAAAA,GAAAA,KAAQ,KACzB,GAAKuD,GAAqBA,EAAiBprE,OAI3C,OAAOorE,EAAiBx+D,KAAI,CAACoP,EAAQ3Y,KACnC,MAAM,GAAE5C,EAAE,MAAEgN,GAAUuO,EAChB2sB,EAAYloC,IAAOwqE,EAAAA,KAAiB5nE,EAAIkmE,EAAa,EAErDmC,EAA0C,GAiDhD,OAlDuBC,EAAAA,EAAAA,MAAqBniE,EAAAA,EAAAA,MAAa/I,IAIvDirE,EAAe7hE,KAAK,CAClB4D,MAAO25C,EAAK,6BACZ0S,KAAM,OACN8R,QAASA,KACezlE,OAAOC,OAAOy4D,GAAiBpmD,QAAO,CAACC,EAAKqjB,IAAOrjB,GAAOqjB,EAAG8vC,WAAa,EAAI,IAAI,IACnFpC,IAAiBztD,EAAO6vD,WAC3Cr2C,EAAsB,CACpBxhB,MAAO,mBAMP+0D,EAAkBtoE,IAAKT,QAAUwpE,EACnCh0C,EAAsB,CACpBxhB,MAAO,oBAKXk2D,EAAyB,CACvB7L,SAAU59D,GACV,IAKJA,IAAOwqE,EAAAA,MACTS,EAAe7hE,KAAK,CAClB4D,MAAO25C,EAAK,cACZ0S,KAAM,OACN8R,QAASA,KACPxB,EAAmB,CAAE/L,SAAU59D,GAAK,IAIxCirE,EAAe7hE,KAAK,CAClB4D,MAAO25C,EAAK,oBACZ0S,KAAM,SACNgS,aAAa,EACbF,QAASA,KACPzB,EAA0B,CAAE9L,SAAU59D,GAAK,KAK1C,CACLA,KACAgN,QACAs+D,WAAYP,EAAmB/qE,IAAKurE,WACpCC,cAAev1D,QAAQ80D,EAAmB/qE,IAAKyrE,oBAC/CvjC,YACA+iC,eAAgBA,GAAgB1rE,OAAS0rE,OAAiB/jE,EAC3D,GACD,GACD,CACDyjE,EAAkB7B,EAAYiC,EAAoBpkB,EAAMyX,EAAiB4K,EAAcV,EACvFS,IAGI2C,GAAkBC,EAAAA,GAAAA,IAAiBp3D,IACvCi1D,EAAoB,CAAEnL,iBAAkB9pD,GAAS,CAAE8B,uBAAuB,GAAO,KAInF4vD,EAAAA,GAAAA,KAAU,KACH+E,GAAYzrE,QAIb8+D,GAAoB2M,EAAWzrE,QACjCiqE,EAAoB,CAAEnL,iBAlKD,GAmKvB,GACC,CAACA,EAAkB2M,EAAYxB,KAElCvD,EAAAA,GAAAA,KAAU,KACR,GAAKna,EAAAA,IAAiBkf,GAAYzrE,SAAU8pE,EAI5C,OAAOuC,EAAAA,GAAAA,IAAchC,EAAc39C,QAAU,CAC3C4/C,wBAAyB,aACzBC,QAAUA,CAAC3c,EAAG38C,IACRA,IAAcu5D,GAAAA,GAAeC,MAC/BxC,EACE,CAAEnL,iBAAkBhgE,KAAKC,IAAI+/D,EAAmB,EAAG2M,EAAWzrE,OAAS,IACvE,CAAE8W,uBAAuB,KAEpB,GACE7D,IAAcu5D,GAAAA,GAAeE,QACtCzC,EAAoB,CAAEnL,iBAAkBhgE,KAAKE,IAAI,EAAG8/D,EAAmB,IAAM,CAAEhoD,uBAAuB,KAC/F,IAKX,GACD,CAACgoD,EAAkB2M,EAAY3B,EAAkBG,IAEpD,MAAM0C,GAAwBrC,EAAAA,GAAAA,MAC9BqC,EAAsBjgD,SAAW6+C,GACjC7E,EAAAA,GAAAA,KAAU,IAAOiG,EAAsBjgD,SAAUkgD,EAAAA,GAAAA,IAAsB,KACjED,EAAsBjgD,SACxBu9C,EAAoB,CAAEnL,iBAlMD,GAmMvB,SACGn3D,GAAY,CAACm3D,EAAkBmL,KAEpC4C,EAAAA,GAAAA,GAAe,CACbzd,UAAWmc,EACXuB,OAAQA,IAAM7C,EAAoB,CAAEnL,iBAxMb,GAwMqD,CAAEhoD,uBAAuB,OAGvG4vD,EAAAA,GAAAA,KAAU,KACR,MAAMqG,EAAiBnd,IACrB,GAAIA,EAAEod,SAAWpd,EAAEqd,UAAYrd,EAAEhjB,KAAK4E,WAAW,UAAYi6B,EAAY,CACvE,MAAO,CAAEyB,GAAStd,EAAEhjB,KAAKp7B,MAAM,cAAgB,GAC/C,IAAK07D,EAAO,OAEZ,GAlNsB,MAkNlBA,EAEF,YADArxD,EAAS,CAAEpb,GAAIL,EAAe6iD,sBAAsB,IAItD,MAAMjnC,EAAS/S,OAAOikE,GAAS,EAC/B,GAAIlxD,EAASyvD,EAAWzrE,OAAS,EAAG,OAEpCiqE,EAAoB,CAAEnL,iBAAkB9iD,GAAU,CAAElF,uBAAuB,IAC3E84C,EAAE0V,gBACJ,GAKF,OAFAthE,SAASmpE,iBAAiB,UAAWJ,GAAe,GAE7C,KACL/oE,SAASopE,oBAAoB,UAAWL,GAAe,EAAK,CAC7D,GACA,CAAC3sE,EAAeqrE,EAAY5vD,EAAUouD,IAEzC,MACEM,IAAK8C,EACL7C,aAAc8C,IACZ1C,EAAAA,GAAAA,GAAkB,CACpBn3B,QAASq1B,EACTyE,mBAAmB,EACnB1C,kBAAkB,IAGpB,SAAS2C,EAAiBpe,GACxB,MAAMqe,EAAetnE,OAAOC,OAAOy4D,GAChCl9D,MAAK,EAAGlB,QAASA,IAAOgrE,EAAY3M,GAAkBr+D,KACnDitE,EAAWD,IAAiBnC,EAElC,OACE1F,GAAAA,GAAAC,cAAC8H,GAAAA,EAAQ,CACPC,WAAYF,EAAW,SAAW,MAClCrP,SAAUqP,EAAWD,EAAahtE,QAAKkH,EACvCynD,SAAUA,EACV0a,iBAAkBA,EAClBH,gBAAiBA,EACjBC,uBAAwBA,EACxBC,0BAA2BA,EAC3BgE,mBAAoBxE,GAAoBC,KAAwBhW,EAAgBtT,SAChFsT,gBAAiBA,EACjB4V,SAAUA,GAGhB,CAEA,MAAM4E,EAAsBrC,GAAcA,EAAWzrE,OAAS,EAE9D,OACE4lE,GAAAA,GAAAC,cAAA,OACE0E,IAAKA,EACL/9C,WAAWg7C,EAAAA,GAAAA,GACT,cACAsG,GAAuB/D,GAAwB,2BAC/CU,GAA2B,sBAG5BA,GAA2B7E,GAAAA,GAAAC,cAACkI,GAAAA,EAAW,CAAC9f,UAAW6c,IACnDgD,EACClI,GAAAA,GAAAC,cAACmI,GAAAA,EAAO,CACNC,2BAA2B,cAC3BC,KAAMzC,EACN0C,UAAWrP,EACXsP,YAAajC,EACbkC,YAAU,IAEVf,EACF1H,GAAAA,GAAAC,cAAA,OAAK0E,IAAK8C,EAAgB7gD,UAAU,0BAClC7kB,EACJi+D,GAAAA,GAAAC,cAACyI,GAAAA,GAAU,CACT/D,IAAKF,EACLz+B,KAAMu9B,EAA8B,OAAS/hB,EAAK8gB,MAAQ,oBAAsB,iBAChFqG,UAAWzP,EACX0P,YAAaV,EAAsBrC,EAAWzrE,YAAS2H,GAEtD6lE,GAEC,KC5UV,GAPwCjI,IACtC,MAAMkJ,GAAchJ,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAGnD,OAAOuI,EAAc7I,GAAAA,GAAAC,cAAC4I,EAAgBlJ,GAAYK,GAAAA,GAAAC,cAACiB,GAAAA,EAAO,KAAG,E,gBCVxD,IAAK4H,GAAgB,SAAhBA,GAAgB,OAAhBA,EAAAA,EAAgB,yCAAhBA,EAAAA,EAAgB,qBAAhBA,EAAAA,EAAgB,mBAAhBA,CAAgB,MAYb,SAASC,GACtBvnB,EACA9pC,EACA4a,EACA02C,EACArb,EACAsb,GAEA,IAAIjgC,EAUAoW,EAWAx4C,EAWJ,OA3BEoiC,EC5BW,WACb,MAAOkgC,EAAUC,IAAe1H,EAAAA,GAAAA,IAAS7jD,OAAOwrD,UAAUC,QAgB1D,OAdAvI,EAAAA,GAAAA,KAAU,KACR,SAASwI,IACPH,EAAYvrD,OAAOwrD,UAAUC,OAC/B,CAKA,OAHAzrD,OAAO2pD,iBAAiB,SAAU+B,GAClC1rD,OAAO2pD,iBAAiB,UAAW+B,GAE5B,KACL1rD,OAAO4pD,oBAAoB,UAAW8B,GACtC1rD,OAAO4pD,oBAAoB,SAAU8B,EAAa,CACnD,GACA,IAEIJ,CACT,CDM0BK,IACoB,8BAApB7xD,EAEb4a,EACAw2C,GAAiBU,QAEjBV,GAAiBW,OAJjBX,GAAiBY,kBAS1BtqB,EADEpW,IAAW8/B,GAAiBW,QAAUR,EAC7B,OACFD,EACE,eACFrb,EACE,YAEA,UAIT3kB,IAAW8/B,GAAiBY,kBAC9B9iE,EAAO46C,EAAK,qBACHxY,IAAW8/B,GAAiBU,UACrC5iE,EAAO46C,EAAK,aAGG,iBAAbpC,IACFx4C,EAAOA,EAAM+iE,cAAc78C,QAAQ,OAAQ,KAGtC,CACL88C,iBAAkB5gC,EAClB6gC,yBAA0BzqB,EAC1B0qB,qBAAsBljE,EAE1B,C,gHE3CA,MA0BA,IAAe65D,EAAAA,GAAAA,KA1B+BsJ,EAC5CH,mBACAE,uBACA1H,cAEA,MAAM5gB,GAAOkgB,EAAAA,GAAAA,KAEb,OACE1B,GAAAA,GAAAC,cAAA,OAAKplE,GAAG,0BAA0BwnE,IAAK7gB,EAAK8gB,MAAQ,WAAQvgE,EAAWqgE,QAASA,GAC9EpC,GAAAA,GAAAC,cAAC+J,GAAAA,EAAO,CAACxH,MAAM,UACfxC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,cACbo5C,GAAAA,GAAAC,cAACyI,GAAAA,GAAU,CAACC,UAAWiB,EAAkB5jC,KAAK,aAC3C8jC,IAGL9J,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLx0D,OAAK,EACL23C,KAAK,OACL8c,MAAM,qBAENxC,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,qBAEd,I,6DCWV,MA4LA,IAAe65C,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KACjB1qE,IACC,MAAM2N,GAAWzN,EAAAA,EAAAA,KAAeF,IAC1B,cACJiC,EAAa,gBAAEkzD,GACbn1D,GACE,eAAE0xE,GAAmB1xE,EAAOm5B,SAAS6S,MACrC2lC,EAAa3xE,EAAOssC,WAAWC,KAErC,MAAO,CACLtqC,gBACAqmC,OAAOspC,EAAAA,EAAAA,KAAY5xE,GACnB0xE,iBACAG,WAAYt5D,QAAQ5K,EAASkkE,YAC7B1c,kBACAwc,aACD,GAhBejH,EA5LMoH,EACxB7vE,gBACAkzD,kBACAuc,iBACAppC,QACAupC,aACAF,aACAI,mBACAC,mBACAC,mBACAC,kBACAC,sBAEA,MAAM,SACJz0D,EAAQ,iBACR00D,EAAgB,0BAChBC,EAAyB,mBACzBC,EAAkB,QAClBjrC,EAAO,iBACPc,IACElgB,EAAAA,EAAAA,MACEsqD,GAAUpJ,EAAAA,GAAAA,KACVlgB,GAAOupB,EAAAA,GAAAA,KAEPC,EAAsBf,IAAmBgB,EAAAA,IAC1ChB,IAAmBiB,EAAAA,IAAsB,MAAQ,MAAS,MAEzDC,GAAqB7sB,EAAAA,KAAgB1gC,OAAO+d,SAASje,WAAa0tD,EAAAA,KAAuBC,EAAAA,KAEzFC,GAA2B1K,EAAAA,GAAAA,MAAoClI,EAAAA,MAAqB0N,YAAc,EAElGthC,GAAOm9B,EAAAA,GAAAA,KAAQ,IAAM1hE,OAAOC,OAAO0pE,GAAY7vE,QAAQ8kC,GAAQA,EAAIgG,iBAAgB,CAAC+kC,IAEpFqB,GAAoB/E,EAAAA,GAAAA,IAAgB,KACxCvwD,EAAS,CAAEpb,GAAIL,EAAe6iD,sBAAsB,GAAO,IAGvDmuB,GAAuBhF,EAAAA,GAAAA,IAAiBxc,IAC5CA,EAAEyhB,kBAGFd,EAAiB,CAAE9pC,MAFQ,UAAVA,EAAoB,OAAS,UAG9C8pC,EAAiB,CAAEe,sBAAsB,GAAQ,IAG7CC,GAA6BnF,EAAAA,GAAAA,IAAiBxc,IAClDA,EAAEyhB,kBAEF,IAAIG,EAAW3B,EAAiB,EAC5B2B,EAAWV,EAAAA,MACbU,EAAWX,EAAAA,KAEb,MAAMY,EAAsBD,IAAaX,EAAAA,IACrCa,GAAAA,GACCF,IAAaV,EAAAA,IAAsBa,GAAAA,GAAgCC,GAAAA,GAExErB,EAAiB,CAAEV,eAAgB2B,IACnChB,EAA0BiB,EAAoB,IAG1CI,GAAuBzF,EAAAA,GAAAA,IAAgB,KAC3C5oD,OAAOC,KAAKquD,EAAAA,IAAoB,SAAU,WAAW,IAGjDC,GAAqB3F,EAAAA,GAAAA,IAAgB,MACzC4F,EAAAA,GAAAA,IAA0B,IAAI,IAG1BC,GAAqB7F,EAAAA,GAAAA,IAAgB,KACzCqE,EAAmB,CAAElnD,SAAUmnD,EAAQ,0BAA2B,IAG9DwB,GAAuB9F,EAAAA,GAAAA,IAAgB,KAC3C5mC,EAAQ,CAAEhjB,IAAK2vD,EAAAA,KAAe,IAG1BC,GAAsBhG,EAAAA,GAAAA,IAAgB,KAC1C9lC,EAAiB,CAAE7lC,GAAIL,EAAe6iD,sBAAsB,EAAMoB,WAAY,WAAY,IAG5F,OACEuhB,GAAAA,GAAAC,cAAAD,GAAAA,GAAAkC,SAAA,KACElC,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CACPjO,KAAK,iBACLkO,QAASmJ,GAERT,EAAQ,kBAEVpd,EAAgBtT,UACf4lB,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CACPjO,KAAK,UACLkO,QAASkI,GAETtK,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,kBAAkBkkD,EAAQ,kBACzCQ,EAA2B,GAC1BtL,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,eAAe0kD,IAIpCtL,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CACPjO,KAAK,OACLkO,QAASmI,GAERO,EAAQ,aAEVhmC,EAAK99B,KAAKm4B,GACT6gC,GAAAA,GAAAC,cAACwM,GAAAA,EAAa,CACZttC,IAAKA,EACL0B,MAAOA,EACP6rC,cAAY,EACZC,YAAU,EACVC,aAAcnC,EACdoC,aAAcnC,MAGlB1K,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CACPjO,KAAK,aACLkO,QAASoK,GAER1B,EAAQ,uBAEX9K,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CACPjO,KAAK,WACLkO,QAASoI,GAERM,EAAQ,aAEX9K,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CACPjO,KAAK,WACLkO,QAASoJ,GAETxL,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,kBAAkBkkD,EAAQ,wBAC1C9K,GAAAA,GAAAC,cAAC6M,GAAAA,EAAQ,CACPjyE,GAAG,WACHkyE,MAAOjC,EAAkB,SAAVjqC,EAAmB,mCAAqC,mCACvEmsC,QAAmB,SAAVnsC,EACTosC,aAAW,KAGfjN,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CACPjO,KAAK,aACLkO,QAASuJ,GAET3L,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,6BAA6BkkD,EAAQ,yBAAyBnB,eAC9E3J,GAAAA,GAAAC,cAACiN,GAAAA,EAAM,CAAC5uC,MAAO0sC,KAEjBhL,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CACPjO,KAAK,OACLkO,QAASiK,GAERvB,EAAQ,qBAEX9K,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CACPjO,KAAK,MACLkO,QAASkK,GAER9qB,EAAK,kBAEP2rB,EAAAA,KACCnN,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CACPjO,KAAK,cACLkO,QAAS6J,GAERzqB,EAAK,sBAGT2pB,GACCnL,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CACPjO,KAAK,IACLkZ,YAAU,EACVtvD,KAAO,GAAEuvD,EAAAA,OACTjL,QAAS+J,GAER3qB,EAAK,kBAGT4oB,GACCpK,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CACPjO,KAAK,UACLkO,SAASkL,EAAAA,GAAAA,MAER9rB,EAAK,mBAGT,K,mDCnOP,MAQA,GAR6Cme,IAC3C,MAAM,OAAE9xB,GAAW8xB,EACb4N,GAAmB1N,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,oBAAqBzyB,GAG7E,OAAO0/B,EAAmBvN,GAAAA,GAAAC,cAACsN,EAAqB5N,QAAY59D,CAAS,ECkFvE,IAAe0+D,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KAAY1qE,IAC9B,MAAM,cAAEiC,GAAkBjC,EACpB0qC,EAAczoC,GAAgBqS,EAAAA,EAAAA,KAAWtU,EAAQiC,QAAiBuH,EAExE,MAAO,CACL+4D,YAAa73B,GAAa63B,YAC3B,GANiBmI,EApEiBuK,EAAG1S,kBACtC,MAAM,eAAE2S,EAAc,gBAAEC,IAAoBltD,EAAAA,EAAAA,MAGtCmtD,GAAYjJ,EAAAA,GAAAA,IAA0B,OACrCkJ,EAAkBC,EAAsBC,IAA0BC,EAAAA,GAAAA,IAAQ,IAC1EC,EAAeC,EAAYC,IAAcH,EAAAA,GAAAA,IAAQ,IACjDI,EAAoBC,EAAkBC,IAAqBN,EAAAA,GAAAA,IAAQ,IACpE,SAAEO,IAAaC,EAAAA,EAAAA,MAEfC,EAAQ1T,GAAa2T,MAAgD,KAAvC3T,EAAY2T,OAAQ52C,EAAAA,GAAAA,YAA0B91B,GAClF2sE,EAAAA,GAAAA,GAAWhB,EAAiBc,IAE5BG,EAAAA,GAAAA,IAAsB,EAAEC,MAClBhB,GAAoB9S,GAAeA,EAAY//C,aAAe6zD,GAAiB7zD,aACjFkzD,IACAH,IACF,GACC,CAAChT,EAAa8S,EAAkBK,EAAYH,IAE/C,MAAMe,GAAuB/M,EAAAA,GAAAA,KAAa3jE,IACxC0vE,IACAJ,EAAe,CAAEtzC,cAAeh8B,EAAQtD,IAAK,GAC5C,CAACgzE,EAAsBJ,KAE1BiB,EAAAA,GAAAA,GAAWR,EAAYF,EA5BE,UA4BmCjsE,GAE5D,MAAM+sE,GAAyBhN,EAAAA,GAAAA,KAAY,KACzCsM,GAAkB,GACjB,CAACA,IAEJ,OACEpO,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,iBACZ9V,QAAQk9D,GAAiBlT,IACxBkF,GAAAA,GAAAC,cAAC8O,GAAAA,EAAiB,CAChBr0E,SAAUogE,EACVkU,UAAQ,EACRpoD,UAAU,wBAGdo5C,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLx0D,OAAK,EACL42D,IAAKgJ,EACLsB,QAASX,EACT5oB,KAAK,UACL8c,MAAM,cACN57C,UAAU,eACVw7C,QAAS0M,GAERhU,EACCkF,GAAAA,GAAAC,cAACiP,GAAAA,EAAW,CACVtnE,IAAKkzD,EAAY//C,WACjBA,WAAY+/C,EAAY//C,WACxB2qC,KAvDc,GAwDdypB,UAAWC,EAAAA,MAEXpP,GAAAA,GAAAC,cAACoP,GAAAA,EAAQ,OAEfrP,GAAAA,GAAAC,cAACsN,GAAgB,CACf+B,gBAAiB3B,EACjB9/B,OAAQsgC,EACRoB,oBAAqBV,EACrB9L,QAASsL,IAEP,KCbJmB,GAA0B,CAAEviE,UAAMlL,GAClC0tE,GAA0B,CAAE50E,QAAIkH,GAuPtC,IAAe0+D,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KACjB1qE,IACC,MAAM2N,GAAWzN,EAAAA,EAAAA,KAAeF,IAE9BkrB,MAAOisD,EAAW,eAAExnB,EAAc,OAAEvuD,EAAM,QAAE2vB,GAC1CpjB,EAASwiB,cACP,gBACJhR,EAAe,UAAE4a,EAAS,qBAAEgD,GAC1B/8B,GACE,4BAAEo3E,GAAgCp3E,EAAOm5B,SAAS6S,MAExD,MAAO,CACLmrC,cACAnoD,YAAW2gC,GAAiBp3C,QAAQo3C,EAAe1mD,OAAS0mD,EAAez/C,UAC3EmnE,mBAAoBj2E,EACpBk2E,WAAYvmD,EACZuX,OAAOspC,EAAAA,EAAAA,KAAY5xE,GACnBmf,kBACA4a,YACAgD,uBACAw6C,kBAAmBh/D,SAAQ1L,EAAAA,EAAAA,KAAyB7M,IACpDo3E,8BACAp2D,sBAAsBC,EAAAA,EAAAA,KAA2BjhB,GACjDw3E,eAAgBj/D,QAAQvY,EAAOiJ,MAAMs3D,QAAQ1hB,QAC7Coa,YAAa1gD,QAAQvY,EAAOg3D,SAASiC,aACrCwe,gBAAgBC,EAAAA,EAAAA,KAAqB13E,GACtC,GA1Be0qE,EArP8BiN,EAChDC,mBACApyE,UACAqyE,iBACAC,kBACAX,cACAnoD,YACAhO,uBACA+2D,uBACAV,qBACAC,aACAhvC,QACAnpB,kBACA4a,YACAgD,uBACAw6C,oBACAH,8BACAI,iBACAve,cACAwe,iBACAO,gBACA/F,mBACAD,mBACAD,mBACAkG,cAEA,MAAM,oBACJC,EAAmB,iBACnB9F,EAAgB,sBAChB+F,EAAqB,WACrBC,EAAU,0BACVve,IACE5xC,EAAAA,EAAAA,MAEEsqD,GAAUpJ,EAAAA,GAAAA,KACVlgB,GAAOupB,EAAAA,GAAAA,MACP,SAAEuD,EAAQ,UAAEsC,IAAcrC,EAAAA,EAAAA,OAEzBsC,EAAeC,EAAiBC,IAAqBhD,EAAAA,GAAAA,KAEtDiD,EAAUjzE,IAAYkzE,EAAAA,GAAkBlJ,SACxCmJ,GAAqBjP,EAAAA,GAAAA,KAAQ,IAC1B4N,GACHsB,EAAAA,GAAAA,GAAmB,IAAIn2E,KAAkB,IAAb60E,SAC5B9tE,GACH,CAAC8tE,KAEE,iBAAEjG,EAAgB,qBAAEE,EAAoB,yBAAED,GAA6Bd,GAC3E+B,EACApzD,EACA4a,GAAagD,EACbw6C,EACAH,GACCI,GAGGqB,GAAyB5K,EAAAA,GAAAA,IAAiBxc,IAC9CA,EAAE0V,iBACF1V,EAAEyhB,kBACEja,EACFmf,IAEAve,EAA0B,CAAE3I,OAAQ4I,EAAAA,GAAgBC,kBACtD,KAGF+e,EAAAA,GAAAA,IAAWpP,EAAAA,GAAAA,KAAQ,IAAO+N,EAAiB,CACzC,eAAgBoB,EAChB,cAAeA,EACf,eAAgBA,KACZE,EAAAA,IAAU,CAAE,QAASF,SACvBrvE,GAAY,CAACiuE,KAEjB,MAAMuB,GAA8DtP,EAAAA,GAAAA,KAAQ,IACnE,EAAGuP,YAAW3jC,YACnBmyB,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLx0D,OAAK,EACLkhE,OAAQ+B,IAAY1C,EACpB5oB,KAAK,UACL8c,MAAM,cACN57C,UAAWinB,EAAS,SAAW,GAE/Bu0B,QAAS4O,EAAUQ,EAAY,IAAMhB,IACrC/N,UAAWuO,EAAUlG,EAAQ,qBAAuB,uBAEpD9K,GAAAA,GAAAC,cAAA,OAAKr5C,WAAWg7C,EAAAA,GAAAA,GACd,sBACCoP,GAAW,aACZV,GAAwB,oBAK7B,CAACU,EAAS1C,EAAUxD,EAAS0F,EAASF,IAEnCmB,GAAoBjL,EAAAA,GAAAA,IAAgB,KACnCkJ,GACHa,EAAc,GAChB,IAGImB,GAAyBlL,EAAAA,GAAAA,IAAgB,KAC7CmE,EAAiB,CAAEgF,6BAA8BA,GAA8B,IAG3EgC,GAAmBnL,EAAAA,GAAAA,IAAgB,KACvCmK,GAAY,IAGRiB,GAAoBhB,IAAcd,IACtCh/D,QAAQ8+D,IACL7xE,IAAYkzE,EAAAA,GAAkBY,cAC9B9zE,IAAYkzE,EAAAA,GAAkBa,WAGnChR,EAAAA,GAAAA,KAAU,IAAO8Q,GAAkB5K,EAAAA,GAAAA,IAAsB,IAAMwJ,WAAazuE,GAAY,CAAC6vE,EAAiBpB,IAE1G,MAAMuB,EAAyBh0E,IAAYkzE,EAAAA,GAAkBa,SACzDtwB,EAAK,iBACLA,EAAK,UAEHwwB,EAAgB7E,EAAAA,IAAW,wBAA0Ch7C,EAAAA,IAAQ8/C,SAAelrB,UAE5FjrC,IAAeo2D,EAAAA,GAAAA,OAGf,uCACJC,GAAsC,gCACtCC,KACEC,EAAAA,GAAAA,GAAsClC,GAGpCmC,IAAY5N,EAAAA,GAAAA,IAAuB,OACzC6N,EAAAA,GAAAA,GAAgBD,IAEhB,MAAME,IAAgBvQ,EAAAA,GAAAA,KAAQ,IAE1BjC,GAAAA,GAAAC,cAAAD,GAAAA,GAAAkC,SAAA,KACGgP,GACClR,GAAAA,GAAAC,cAACwS,GAAAA,EAAQ,CACPve,KAAK,WACLrsD,MAAOqpE,EACPwB,OAAK,EACLC,UAAQ,EACRhlB,YAAa78C,QAAQ8+D,GACrBhpD,UAAU,0BACVw7C,QAASqO,EACTmC,uBAAqB,EACrBC,SAAUrD,KAGbI,GACC5P,GAAAA,GAAAC,cAACwS,GAAAA,EAAQ,CACP7rD,UAAU,0BACVrsB,OAAQq1E,EACRxN,QAASsO,EACTgC,OAAK,EACLC,UAAQ,EACRhlB,aAAW,EACXklB,SAAUpD,OAKjB,CAACG,EAAoBsB,IAExB,OACElR,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,kBACbo5C,GAAAA,GAAAC,cAAA,OAAKplE,GAAG,iBAAiB+rB,UAAU,cAAc+9C,IAAK2N,IACnDxH,EAAQxI,OAAStC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,uBACjCo5C,GAAAA,GAAAC,cAAC6S,GAAAA,EAAY,CACXC,QAASxB,EACTyB,OAAS,GAAEC,EAAAA,OAAYjB,IACvBprD,WAAWg7C,EAAAA,GAAAA,GACT,YACAkJ,EAAQxI,OAAS,MACjB6N,GAAoBrF,EAAQxI,OAAS,gBACrC6P,GAAuCrrD,SAAWgkD,EAAQxI,OAAS,sBAErE4Q,UAAWrC,EACXjO,UAAWuN,GAAoBrF,EAAQxI,MAAQ,QAAU,OACzD6Q,iBAAkB70B,EAAAA,IAAe80B,EAAAA,KAAct3D,GAAe,QAAK/Z,EACnEsxE,gBAAiBvI,EAAQxI,MAAQ8P,QAAkCrwE,GAEnEi+D,GAAAA,GAAAC,cAACoK,GAAiB,CAChBC,iBAAkBA,EAClBC,iBAAkBA,EAClBC,iBAAkBA,EAClBC,gBAAiBqG,EACjBpG,gBAAiBqG,KAGrB/Q,GAAAA,GAAAC,cAACqT,GAAAA,EAAW,CACVC,QAAQ,wBACRC,oBAAoB,+BACpB5sD,WAAWg7C,EAAAA,GAAAA,GACRgO,GAAsBC,EAAc,wBAAqB9tE,EAC1DouE,GAAoB,uBAEtB7xC,MAAO+xC,OAAkBtuE,EAAaquE,GAAkBV,EACxD+D,QAAS7B,EACTrqD,UAAWA,GAA0C,cAA7BsiD,EACxB6J,aAA2C,cAA7B7J,EAA2C,cAAW9nE,EACpE4xE,uBAAqD,cAA7B9J,GAAsD,UAAVhpC,EAAoB,aAAU9+B,EAClG6xE,YAAa7B,EACb8B,aAAa,MACblB,SAAU7hE,QAAQ8+D,GAAsBC,GACxCiE,SAAUvD,EACVC,QAASA,EACTuD,QAAStC,EACTuC,eAA6C,cAA7BnK,EAA2C6H,OAAyB3vE,GAEnFywE,GACDxS,GAAAA,GAAAC,cAACgU,GAAAA,EAAY,CAACC,SAAUtC,IAAoBV,IAAuBtB,KAEpEr2D,GAAwBymD,GAAAA,GAAAC,cAACuN,GAAY,MACrChc,GACCwO,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLx0D,OAAK,EACLkhE,QAASX,EACT5oB,KAAK,UACL8c,MAAM,cACNC,UAAY,GAAEqI,EAAQ,8DACtB1I,QAASuP,EACT/qD,WAAWg7C,EAAAA,GAAAA,IAAgBroD,GAAwB,kBAEnDymD,GAAAA,GAAAC,cAAA,KAAGr5C,UAAU,oBAGjBo5C,GAAAA,GAAAC,cAACkU,GAAAA,EAAc,CACbtmC,OAAqC,YAA7Bg8B,EACRuK,UAAQ,EACRxtD,UAAU,4BAEVo5C,GAAAA,GAAAC,cAAC8J,GAAuB,CACtBH,iBAAkBA,EAClBE,qBAAsBA,EACtB1H,QAASsP,MAIX,KCnRJ2C,GAA0B9zE,OAAOuG,KAAKmqE,EAAAA,IAAmB72E,OAAS,EAGxE,IAAIk6E,GAEJ,MAqMA,IAAe7T,EAAAA,GAAAA,KArMgB8T,EAC7Bx2E,UACA2xE,cACAG,aACAQ,kBACAD,iBACAE,uBACAvM,kBACAxV,uBACAE,4BACAyV,mBACAqM,gBACAiE,kBACAxQ,yBACAwM,UACAiE,oBAEA,MAAM,gBAAEx2B,IAAoBz9B,EAAAA,EAAAA,OACrBk0D,EAAsBC,IAA2BlT,EAAAA,GAAAA,IAAS9a,EAAAA,KAC1DiuB,EAA6BC,IAAkCpT,EAAAA,GAAAA,KAAS,IAE/EX,EAAAA,GAAAA,KAAU,KACRljD,OAAO2gC,UAAUu2B,yBAAyBz8D,KAAKw8D,EAA+B,GAC7E,IAEH,MAAM,uBACJE,EAAsB,6BAAEC,EAA4B,+BACpDC,EAA8B,mBAAEC,IAC9BC,EAAAA,GAAAA,GAAoBjR,GAClBkR,EAAuBlR,GAAoBnmE,IAAYkzE,EAAAA,GAAkBlJ,SACzEsN,EAAsBD,GAAwBF,GAGlDtQ,aAAc0Q,EACdC,qBAAsBC,IACpBC,EAAAA,GAAAA,GAA4BlnB,GAAwBE,GAElDinB,GAAgBhR,EAAAA,GAAAA,KAAO,GAEvBiR,GAAmBnP,EAAAA,GAAAA,IAAgB,KACnCzoE,IAAYkzE,EAAAA,GAAkBlJ,WAGlC2N,EAAc5uD,SAAU,EACxB6tD,GAAwB,GAAK,IAGzBiB,GAAmBpP,EAAAA,GAAAA,IAAgB,KACvCkP,EAAc5uD,SAAU,EAEpBwtD,KACFh0D,aAAag0D,IACbA,QAAevyE,GAGjBuyE,GAAe12D,OAAOja,YAAW,KAC1B+xE,EAAc5uD,SACjB6tD,GAAwB,EAC1B,GA9DwB,IA+DD,IAGrBkB,GAAuBrP,EAAAA,GAAAA,IAAgB,KAC3CgO,EAAgBvD,EAAAA,GAAkB6E,SAAS,IAGvCC,GAAuBvP,EAAAA,GAAAA,IAAgB,KAC3CgO,EAAgBvD,EAAAA,GAAkBa,SAAS,IAGvCkE,GAAuBxP,EAAAA,GAAAA,IAAgB,KAC3CgO,EAAgBvD,EAAAA,GAAkBgF,UAClCh4B,GAAiB,IAGbi4B,GAAoB1P,EAAAA,GAAAA,IAAgB,KACpCloB,EAAAA,KAAgBs2B,EAClBh3D,OAAOC,KAAM,GAAEs4D,EAAAA,UAAsB,SAAU,YACtC1nB,EACT7wC,OAAO2gC,UAAU63B,gBAEjBx4D,OAAO+d,SAAS06C,QAClB,IAGIC,GAAyB9P,EAAAA,GAAAA,IAAgB,KAC7CgO,EAAgBvD,EAAAA,GAAkBsF,gBAAgB,IAG9CC,GAAuBhQ,EAAAA,GAAAA,IAAgB,KAC3CgO,EAAgBvD,EAAAA,GAAkBwF,cAAc,KAGlD3V,EAAAA,GAAAA,KAAU,KACR,IAAI4V,EASJ,OARI34E,IAAYkzE,EAAAA,GAAkBlJ,SAChC2O,EAAmB94D,OAAOja,YAAW,KACnCgxE,GAAwB,EAAM,GArGR,MAuGfe,EAAc5uD,SAAW6/B,EAAAA,KAClCguB,GAAwB,GAGnB,KACD+B,IACFp2D,aAAao2D,GACbA,OAAmB30E,EACrB,CACD,GACA,CAAChE,IAEJ,MAAMyjD,GAAOkgB,EAAAA,GAAAA,KAEb,OACE1B,GAAAA,GAAAC,cAAA,OACEplE,GAAG,kBACH87E,aAAehwB,EAAAA,QAAkC5kD,EAAnB4zE,EAC9BiB,aAAejwB,EAAAA,QAAkC5kD,EAAnB6zE,GAE9B5V,GAAAA,GAAAC,cAACiQ,GAAc,CACbC,iBAAkBkF,EAClBt3E,QAASA,EACTqyE,eAAgBA,EAChBG,cAAeA,EACf/F,iBAAkBqL,EAClBtL,iBAAkBwL,EAClBzL,iBAAkB0L,EAClBxF,QAASA,EACTF,qBAAsBA,EACtBD,gBAAiBA,IAEnBrQ,GAAAA,GAAAC,cAACyI,GAAAA,GAAU,CACT1iC,KAAMsqC,EAAuB,OAAS,WACtC1H,YAAayL,GACb1L,UAAW5qE,EACX84E,eAAa,EACbC,oBAAqB7F,EAAAA,GAAkBlJ,SACvCgP,YAAU,EACVC,iBAAkB/F,EAAAA,GAAkBlJ,WAElCve,IACA,OAAQzrD,GACN,KAAKkzE,EAAAA,GAAkBlJ,SACrB,OACE/H,GAAAA,GAAAC,cAAC6D,GAAW,CACVK,qBAAsBkR,EACtBrR,uBAAwBA,EACxBC,0BAA2BuQ,EAC3BzQ,gBAAiBA,EACjBG,iBAAkBmR,IAGxB,KAAKpE,EAAAA,GAAkBY,aACrB,OACE7R,GAAAA,GAAAC,cAAC+C,GAAU,CACT0M,YAAaA,EACbG,WAAYA,EACZrmB,SAAUA,EACVgnB,QAASA,IAGf,KAAKS,EAAAA,GAAkBa,SACrB,OAAO9R,GAAAA,GAAAC,cAAC4I,GAAW,CAACxuE,OAAQ+1E,EAAgB5mB,SAAUA,EAAUgnB,QAASA,IAC3E,QACE,OACJ,IAGH8E,GACCtV,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLmQ,OAAK,EACLuE,OAAK,EACLrwD,WAAWg7C,EAAAA,GAAAA,GAAe,aAAc4T,GACxCpT,QAAS8T,GAER10B,EAAK,wBAGTuzB,GACC/U,GAAAA,GAAAC,cAACiX,GAAAA,EAAU,CACTrpC,OAAQq2B,EACR9pB,UAAWg7B,EACXX,cAAeA,EACf0C,qBAAsBlC,EACtBmC,oBAAqBpC,IAGzBhV,GAAAA,GAAAC,cAACkB,GAAa,CACZ/K,QAASse,EACTtT,iBAAkB2U,EAClB1U,aAAciV,EACdhV,WAAYkV,IAEV,ICpOV,GAPoC7W,IAClC,MAAM0X,GAAUxX,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,WAG/C,OAAO+W,EAAUrX,GAAAA,GAAAC,cAACoX,EAAY1X,GAAYK,GAAAA,GAAAC,cAACiB,GAAAA,EAAO,KAAG,ECGvD,GAPqCvB,IACnC,MAAMmW,GAAWjW,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,YAGhD,OAAOwV,EAAW9V,GAAAA,GAAAC,cAAC6V,EAAanW,GAAYK,GAAAA,GAAAC,cAACiB,GAAAA,EAAO,KAAG,ECgB9B,IAyBtBoW,GAAW,SAAXA,GAAW,OAAXA,EAAAA,EAAW,eAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,2BAAXA,CAAW,EAAXA,IAAW,IAWhB,MAAMC,GAAeh3E,OAAOuG,KAAKwwE,IAAal9E,OAAS,EAkfvD,IAAeqmE,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KACjB1qE,IACC,MAAM2N,GAAWzN,EAAAA,EAAAA,KAAeF,IAE9BmwB,cAAc,MACZjF,EAAK,QACL6F,GACD,4BACDi6C,EAA2B,iBAC3BrK,EAAgB,mBAChBse,EAAkB,kBAClBC,EACA9hB,aAAa,sBACXO,IAEAhwD,GACE,cACJ1L,EACA+0D,UAAU,YACRiC,GACD,qBACDjD,EAAoB,0BACpBE,EAAyB,gBACzBf,GACEn1D,EAEE8lB,GAAcjG,EAAAA,EAAAA,KAAkB7f,GAKtC,MAAO,CACLm3E,YAAajsD,EACbosD,WAAYvmD,EACZouD,wBAA8C,IAArBxe,EACzBqK,8BACA/oE,gBACAg3D,cACAgmB,qBACAC,oBACAE,WAbiB7mE,QAAQuN,GAAaxjB,IActC0zD,uBACAE,4BACAyV,kBAfuB0T,EAAAA,EAAAA,KAAuBr/E,GAgB9CylD,iBAfuB93C,EAAS83C,iBAgBhCqyB,gBAAiBnqE,EAASwiB,aAAa2/B,UACvCqF,kBACAmqB,2BAA4B3hB,EAC7B,GAhDe+M,EA/epB,UAAoB,IAClB0B,EAAG,YACH+K,EAAW,WACXG,EAAU,wBACV6H,EAAuB,4BACvBnU,EAA2B,cAC3B/oE,EAAa,YACbg3D,EAAW,mBACXgmB,EAAkB,kBAClBC,EAAiB,WACjBE,EAAU,qBACVppB,EAAoB,0BACpBE,EAAyB,iBACzByV,EAAgB,iBAChBlmB,EAAgB,gBAChBqyB,EAAe,gBACf3iB,EAAe,2BACfmqB,IAEA,MAAM,qBACJC,EAAoB,uBACpBC,EAAsB,sBACtBrH,EAAqB,kBACrBsH,EAAiB,oBACjBvH,EAAmB,iBACnBwH,EAAgB,gBAChBC,EAAe,SACfjiE,EAAQ,0BACRm8C,IACE5xC,EAAAA,EAAAA,OAEGziB,EAASo6E,IAAc1W,EAAAA,GAAAA,IAA4BwP,EAAAA,GAAkBlJ,WACrEqQ,EAAgBC,IAAqB5W,EAAAA,GAAAA,IAASpP,EAAAA,GAAgBimB,OAC9DlI,EAAgBmI,IAAqB9W,EAAAA,GAAAA,IAAiB,KACtD+W,EAAczU,IAAmB0U,EAAAA,GAAAA,MAGjCC,EAAeC,IAAoBlX,EAAAA,GAAAA,IAAiB,GAE3D,IAAImX,EAA2BtB,GAAYgB,KAC3C,OAAQv6E,GACN,KAAKkzE,EAAAA,GAAkBgF,SACrB2C,EAActB,GAAYrB,SAC1B,MACF,KAAKhF,EAAAA,GAAkB6E,SACrB8C,EAActB,GAAYxB,SAC1B,MACF,KAAK7E,EAAAA,GAAkBsF,gBACvB,KAAKtF,EAAAA,GAAkB4H,gBACrBD,EAActB,GAAYwB,WAC1B,MACF,KAAK7H,EAAAA,GAAkBwF,cACvB,KAAKxF,EAAAA,GAAkB8H,cACrBH,EAActB,GAAY0B,SAI9B,MAAMC,GAAczS,EAAAA,GAAAA,IAAiB0S,IACnC,SAASC,IACPhB,EAAWlH,EAAAA,GAAkBlJ,UAC7BsQ,EAAkBhmB,EAAAA,GAAgBimB,MAClCC,EAAkB,IAClBR,EAAuB,CAAE1vB,WAAW,IACpC2vB,IACAr0E,YAAW,KACTm0E,EAAqB,CAAEr0D,MAAO,KAC9BgtD,EAAoB,CAAExjE,UAAMlL,IAC5B2uE,EAAsB,CAAE71E,QAAIkH,IAC5Bg2E,EAAuB,CAAE1vB,WAAW,IACpCswB,EAAiB39E,KAAKC,MAAM,GAvEF,IAyE9B,CAEA,IAA8B,IAA1Bi+E,EAKJ,GAAIn7E,IAAYkzE,EAAAA,GAAkB8H,cAKlC,GAAIh7E,IAAYkzE,EAAAA,GAAkB4H,gBAAlC,CAKA,GAAI96E,IAAYkzE,EAAAA,GAAkBwF,cAAe,CAC/C,MAAM2C,EAAoBh7E,SAASi7E,eAAe,2BAC9CD,GACFA,EAAkB19C,MAEtB,CAEA,GAAI39B,IAAYkzE,EAAAA,GAAkB6E,SAChC,OAAQsC,GACN,KAAK/lB,EAAAA,GAAgBinB,YACrB,KAAKjnB,EAAAA,GAAgBknB,QACrB,KAAKlnB,EAAAA,GAAgBmnB,QACrB,KAAKnnB,EAAAA,GAAgBonB,cACrB,KAAKpnB,EAAAA,GAAgBqnB,YACrB,KAAKrnB,EAAAA,GAAgBsnB,QACrB,KAAKtnB,EAAAA,GAAgBunB,YACrB,KAAKvnB,EAAAA,GAAgBwnB,eACrB,KAAKxnB,EAAAA,GAAgBynB,SACrB,KAAKznB,EAAAA,GAAgB0nB,SACrB,KAAK1nB,EAAAA,GAAgB2nB,aAEnB,YADA3B,EAAkBhmB,EAAAA,GAAgBimB,MAGpC,KAAKjmB,EAAAA,GAAgB4nB,sBAEnB,YADA5B,EAAkBhmB,EAAAA,GAAgBmnB,SAEpC,KAAKnnB,EAAAA,GAAgB6nB,2BAEnB,YADA7B,EAAkBhmB,EAAAA,GAAgB4nB,uBAGpC,KAAK5nB,EAAAA,GAAgB8nB,mBACrB,KAAK9nB,EAAAA,GAAgB+nB,kBACrB,KAAK/nB,EAAAA,GAAgBgoB,gBACrB,KAAKhoB,EAAAA,GAAgBioB,oBACrB,KAAKjoB,EAAAA,GAAgBkoB,WACrB,KAAKloB,EAAAA,GAAgBmoB,gBACrB,KAAKnoB,EAAAA,GAAgBooB,aACrB,KAAKpoB,EAAAA,GAAgBqoB,iBACrB,KAAKroB,EAAAA,GAAgBsoB,gBACrB,KAAKtoB,EAAAA,GAAgBuoB,kBACrB,KAAKvoB,EAAAA,GAAgBwoB,kBACrB,KAAKxoB,EAAAA,GAAgByoB,qBACrB,KAAKzoB,EAAAA,GAAgB0oB,gBACrB,KAAK1oB,EAAAA,GAAgB2oB,oBACrB,KAAK3oB,EAAAA,GAAgB4oB,eACrB,KAAK5oB,EAAAA,GAAgB6oB,cACrB,KAAK7oB,EAAAA,GAAgB8oB,aACrB,KAAK9oB,EAAAA,GAAgB+oB,qBACrB,KAAK/oB,EAAAA,GAAgBC,iBACrB,KAAKD,EAAAA,GAAgBgpB,gBACrB,KAAKhpB,EAAAA,GAAgBipB,wBAEnB,YADAjD,EAAkBhmB,EAAAA,GAAgBsnB,SAGpC,KAAKtnB,EAAAA,GAAgBkpB,oBAEnB,YADAlD,EAAkB7mB,EAAca,EAAAA,GAAgBgpB,gBAAkBhpB,EAAAA,GAAgBC,kBAGpF,KAAKD,EAAAA,GAAgBmpB,8BACrB,KAAKnpB,EAAAA,GAAgBopB,gBAEnB,YADApD,EAAkBhmB,EAAAA,GAAgBgpB,iBAGpC,KAAKhpB,EAAAA,GAAgBqpB,2BAEnB,YADArD,EAAkBhmB,EAAAA,GAAgBkpB,qBAGpC,KAAKlpB,EAAAA,GAAgBspB,0BAEnB,YADAtD,EAAkBhmB,EAAAA,GAAgBmpB,+BAGpC,KAAKnpB,EAAAA,GAAgBupB,8BAEnB,YADAvD,EAAkBhmB,EAAAA,GAAgBspB,2BAGpC,KAAKtpB,EAAAA,GAAgBwpB,kCACrB,KAAKxpB,EAAAA,GAAgBypB,iCAEnB,YADAzD,EAAkBhmB,EAAAA,GAAgB8nB,oBAEpC,KAAK9nB,EAAAA,GAAgB0pB,+BACrB,KAAK1pB,EAAAA,GAAgB2pB,8BAEnB,YADA3D,EAAkBhmB,EAAAA,GAAgBgoB,iBAEpC,KAAKhoB,EAAAA,GAAgB4pB,mCACrB,KAAK5pB,EAAAA,GAAgB6pB,kCAEnB,YADA7D,EAAkBhmB,EAAAA,GAAgBioB,qBAEpC,KAAKjoB,EAAAA,GAAgB8pB,0BACrB,KAAK9pB,EAAAA,GAAgB+pB,yBAEnB,YADA/D,EAAkBhmB,EAAAA,GAAgBkoB,YAEpC,KAAKloB,EAAAA,GAAgBgqB,+BACrB,KAAKhqB,EAAAA,GAAgBiqB,8BAEnB,YADAjE,EAAkBhmB,EAAAA,GAAgBmoB,iBAEpC,KAAKnoB,EAAAA,GAAgBkqB,4BACrB,KAAKlqB,EAAAA,GAAgBmqB,2BAEnB,YADAnE,EAAkBhmB,EAAAA,GAAgBooB,cAEpC,KAAKpoB,EAAAA,GAAgBoqB,gCACrB,KAAKpqB,EAAAA,GAAgBqqB,+BAEnB,YADArE,EAAkBhmB,EAAAA,GAAgBqoB,kBAEpC,KAAKroB,EAAAA,GAAgBsqB,+BACrB,KAAKtqB,EAAAA,GAAgBuqB,8BAEnB,YADAvE,EAAkBhmB,EAAAA,GAAgBsoB,iBAEpC,KAAKtoB,EAAAA,GAAgBwqB,iCACrB,KAAKxqB,EAAAA,GAAgByqB,gCAEnB,YADAzE,EAAkBhmB,EAAAA,GAAgBuoB,mBAEpC,KAAKvoB,EAAAA,GAAgB0qB,oCACrB,KAAK1qB,EAAAA,GAAgB2qB,mCAEnB,YADA3E,EAAkBhmB,EAAAA,GAAgByoB,sBAEpC,KAAKzoB,EAAAA,GAAgB4qB,iCACrB,KAAK5qB,EAAAA,GAAgB6qB,gCAEnB,YADA7E,EAAkBhmB,EAAAA,GAAgBwoB,mBAEpC,KAAKxoB,EAAAA,GAAgB8qB,iBAEnB,YADA9E,EAAkBhmB,EAAAA,GAAgB6oB,eAEpC,KAAK7oB,EAAAA,GAAgB+qB,wBAEnB,YADA/E,EAAkBhmB,EAAAA,GAAgB8qB,kBAEpC,KAAK9qB,EAAAA,GAAgBgrB,qBAEnB,YADAhF,EAAkBhmB,EAAAA,GAAgB+qB,yBAEpC,KAAK/qB,EAAAA,GAAgBirB,sBAEnB,YADAjF,EAAkBhmB,EAAAA,GAAgBgrB,sBAEpC,KAAKhrB,EAAAA,GAAgBkrB,0BAEnB,YADAlF,EAAkBhmB,EAAAA,GAAgBirB,uBAEpC,KAAKjrB,EAAAA,GAAgBmrB,2BACrB,KAAKnrB,EAAAA,GAAgBorB,aACrB,KAAKprB,EAAAA,GAAgBqrB,kCAEnB,YADArF,EAAkBhmB,EAAAA,GAAgB8oB,cAEpC,KAAK9oB,EAAAA,GAAgBsrB,uBAEnB,YADAtF,EAAkBhmB,EAAAA,GAAgBmrB,4BAEpC,KAAKnrB,EAAAA,GAAgBurB,2BAEnB,YADAvF,EAAkBhmB,EAAAA,GAAgBsrB,wBAEpC,KAAKtrB,EAAAA,GAAgBwrB,wBAEnB,YADAxF,EAAkBhmB,EAAAA,GAAgBurB,4BAEpC,KAAKvrB,EAAAA,GAAgByrB,mBAEnB,YADAzF,EAAkBhmB,EAAAA,GAAgBqrB,mCAEpC,KAAKrrB,EAAAA,GAAgB0rB,uBAEnB,YADA1F,EAAkBhmB,EAAAA,GAAgByrB,oBAGpC,KAAKzrB,EAAAA,GAAgB2rB,oBACrB,KAAK3rB,EAAAA,GAAgB4rB,kBAEnB,YADA5F,EAAkBhmB,EAAAA,GAAgBknB,SAGpC,KAAKlnB,EAAAA,GAAgB6rB,aAEnB,YADA7F,EAAkBhmB,EAAAA,GAAgB4rB,mBAGpC,KAAK5rB,EAAAA,GAAgB8rB,iCACrB,KAAK9rB,EAAAA,GAAgB+rB,iCAEnB,YADA/F,EAAkBhmB,EAAAA,GAAgBgsB,+BAGpC,KAAKhsB,EAAAA,GAAgBgsB,8BACrB,KAAKhsB,EAAAA,GAAgBisB,yBAGnB,OAFAnG,EAAWlH,EAAAA,GAAkBlJ,eAC7BsQ,EAAkBhmB,EAAAA,GAAgBimB,MAGpC,KAAKjmB,EAAAA,GAAgBksB,cACrB,KAAKlsB,EAAAA,GAAgB6c,YAEnB,YADAmJ,EAAkBhmB,EAAAA,GAAgB0nB,UAGpC,KAAK1nB,EAAAA,GAAgBmsB,eAEnB,YADAnG,EAAkBhmB,EAAAA,GAAgBynB,UAOpC/7E,IAAYkzE,EAAAA,GAAkBlJ,UAAY2P,EAC5CS,EAAWlH,EAAAA,GAAkBY,cAK/BsH,GApMA,MAFEhB,EAAWlH,EAAAA,GAAkBsF,sBAL7B4B,EAAWlH,EAAAA,GAAkBwF,oBAL7B0C,GAgNS,IAGPsF,GAAoBjY,EAAAA,GAAAA,IAAiB/iD,IACrC1lB,IAAYkzE,EAAAA,GAAkBa,UAKlCqG,EAAWlH,EAAAA,GAAkBY,cAEzBpuD,IAAUisD,GACZoI,EAAqB,CAAEr0D,WAPvB80D,EAAkB90D,EAQpB,IAGIi7D,GAAoBlY,EAAAA,GAAAA,IAAgB,KACxC2R,EAAWlH,EAAAA,GAAkBY,cAC7BiG,EAAqB,CAAEr0D,MAAO,KAC9BitD,EAAsB,CAAE71E,GAAImjD,GAAmB,KAGjD8iB,EAAAA,GAAAA,KACE,KACE,MAAM55C,EAAanpB,IAAYkzE,EAAAA,GAAkBgF,SAC3ChQ,EAAaloE,IAAYkzE,EAAAA,GAAkBlJ,SAC3C4W,GAAqBhH,IAAezT,EAK1C,OAAKh9C,GAAcy3D,IAAwB1Y,IAAe/+C,GACpDwwD,GAA2BiH,GACxB3X,EAAAA,GAAAA,IAAsB,KAC3BiS,GAAa,SAGf,CACF,GAEF,CAACvB,EAAyB35E,EAASk7E,EAAatB,EAAYzT,IAG9D,MAAM0a,GAAqBpY,EAAAA,GAAAA,IAAiBxc,IACtCjsD,IAAYkzE,EAAAA,GAAkBY,eAIlC7nB,EAAE0V,iBACFyY,EAAWlH,EAAAA,GAAkBY,cAAa,IAGtCgN,GAA4BrY,EAAAA,GAAAA,IAAiBxc,IACjDA,EAAE0V,iBACFzpD,EAAS,CAAEpb,GAAIL,EAAe6iD,sBAAsB,GAAO,IAGvDyhC,GAAsBtY,EAAAA,GAAAA,IAAiBxc,IAC3CA,EAAE0V,iBACFyY,EAAWlH,EAAAA,GAAkBgF,SAAS,IAGlC8I,GAAuBvY,EAAAA,GAAAA,IAAiBxc,IAC5CA,EAAE0V,iBACFyY,EAAWlH,EAAAA,GAAkB6E,SAAS,KAGxCzE,EAAAA,GAAAA,IAAWpP,EAAAA,GAAAA,KAAQ,KAAM,CACvB,cAAe2c,MAEVI,EAAAA,IAAc,CACjB,cAAeH,MAEbvN,EAAAA,IAAU,CACZ,QAASuN,EACT,QAASC,MAEP1L,EAAAA,IAAa9B,EAAAA,IAAU,CAAE,QAASyN,MACpC,MAEJje,EAAAA,GAAAA,KAAU,KACRoX,IAEIE,IAAmB/lB,EAAAA,GAAgBsnB,SACrC1B,GACF,GACC,CAACC,EAAiBD,EAAkBG,KAEvC6G,EAAAA,GAAAA,IAAc,UACel9E,IAAvBy1E,IACFW,EAAWlH,EAAAA,GAAkB6E,UAC7BuC,EAAkBb,GAClBplB,EAA0B,CAAE3I,YAAQ1nD,KAGlC01E,GACF1T,EAAgB0T,EAClB,GACC,CAAC1T,EAAiB0T,EAAmBD,EAAoBplB,IAE5D,MAAM8sB,GAA6B1Y,EAAAA,GAAAA,IAAiB/c,IAClD0uB,EAAWlH,EAAAA,GAAkB6E,UAC7BuC,EAAkB5uB,EAAO,IAGrB01B,GAAwBC,EAAAA,GAAAA,IAAYC,EAAAA,GAAAA,GAAYzG,IAAgBtB,GAAYxB,SAAWsC,GAAkB,IAkB/G,SAASkH,EAAc91B,GACrB,OAAQovB,GACN,KAAKtB,GAAYrB,SACf,OACEjW,GAAAA,GAAAC,cAACgB,GAAa,CACZzX,SAAUA,EACVgnB,QAASyI,EACTxE,cAAeiK,EACf3a,gBAAiBA,EACjBC,uBAAwBkb,EACxBjb,0BAA2BkU,EAC3BjU,iBAAkBA,EAClBxW,gBAAiBA,EACjB8V,mBAAoBqU,IAG1B,KAAKP,GAAYxB,SACf,OACE9V,GAAAA,GAAAC,cAAC6V,GAAQ,CACPtsB,SAAUA,EACV+1B,cAAenH,EACfI,aAAcA,EACdzU,gBAAiBA,EACjBuM,qBAAsB/M,EACtBic,eAAgBN,EAChB1O,QAASyI,IAGf,KAAK3B,GAAYwB,WACf,OACE9Y,GAAAA,GAAAC,cAACoX,GAAO,CACNzvE,IAAK8wE,EACLlvB,SAAUA,EACVi2B,WAAS,EACT1hF,QAASA,EACTy2E,gBAAiB2D,EACjB3H,QAASyI,IAGf,KAAK3B,GAAY0B,SACf,OACEhZ,GAAAA,GAAAC,cAACoX,GAAO,CACNzvE,IAAK8wE,EACLlvB,SAAUA,EACVzrD,QAASA,EACTy2E,gBAAiB2D,EACjB3H,QAASyI,IAGf,QACE,OACEjZ,GAAAA,GAAAC,cAACsU,GAAQ,CACPx2E,QAASA,EACTsyE,gBAAiBA,EACjBX,YAAaA,EACbG,WAAYA,EACZO,eAAgBA,EAChBrM,gBAAiBA,EACjByQ,gBAAiB2D,EACjB5H,cAAekO,EACfza,uBAAwBkb,EACxB1O,QAASyI,EACT3I,qBAAsB/M,EACtBhV,qBAAsBA,EACtBE,0BAA2BA,EAC3ByV,iBAAkBA,EAClBuQ,cAAeiK,IAIzB,CAEA,OAxFA5d,EAAAA,GAAAA,KAAU,KACR,GAAKna,EAAAA,GAIL,OAAO+4B,EAAAA,GAAAA,GAAuB/a,EAAI79C,QAAU,CAC1C64D,wBAAyB,2CACzBjZ,wBAAyB,2BACzBkZ,kBAAmB3G,EACnB4G,SAAUA,KACR1H,EAAWlH,EAAAA,GAAkB6E,UAC7BoJ,EAA2BC,EAAsBr4D,QAAS,GAE5D,GACD,CAACq4D,EAAuBxa,IA2EzB3E,GAAAA,GAAAC,cAACyI,GAAAA,GAAU,CACT/D,IAAKA,EACL3+B,KAAMu9B,EAA8B,OAASuc,EAAAA,GAC7ClX,YAAa2O,GACb5O,UAAWiQ,EACX/B,eAAa,EACbC,oBAAqBQ,GAAYgB,KACjCvB,YAAU,EACVC,iBAAkBM,GAAYgB,KAC9Bz9E,GAAG,aACHklF,kBAAgB,GAEfT,EAGP,KCliBA,GANuCU,EAAGnyC,aACxC,MAAMoyC,GAAcpgB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAAgBzyB,GAEnE,OAAOoyC,EAAcjgB,GAAAA,GAAAC,cAACggB,EAAW,WAAMl+E,CAAS,ECGlD,GAR2C49D,IACzC,MAAM,OAAE9xB,GAAW8xB,EACbugB,GAAiBrgB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,kBAAmBzyB,GAGzE,OAAOqyC,EAAiBlgB,GAAAA,GAAAC,cAACigB,EAAmBvgB,QAAY59D,CAAS,E,uOCGnE,MA6BA,IAAe0+D,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KACjB1qE,IACQ,CACLqxD,cAAcnxD,EAAAA,EAAAA,KAAeF,GAAQqxD,gBAHvBqZ,EA7B8Bkd,EAAGv2B,mBACnD,MAAM,SAAE3zC,IAAauK,EAAAA,EAAAA,MAEf4/D,EAAYA,KAChBnqE,EAAS,CAAEpb,QAAIkH,GAAa,CAAEs+E,gBAAgB,GAAO,EAGjDC,EAA8CA,EAAG3mF,SAAQgB,OAAM0F,gBACnE4mE,EAAAA,GAAAA,GAAe,CACbzd,UAAU,EACV9mC,MAAM69D,EAAAA,GAAAA,IAAmB5mF,EAAQgB,EAAM0F,GACvC6mE,OAAQkZ,GACR,EAGJ,OACEpgB,GAAAA,GAAAC,cAAA,WACGrW,GAAc5iD,KAAI,CAACsK,EAAa7T,IAC/BuiE,GAAAA,GAAAC,cAACqgB,EACCE,GAAA,CACA54E,IAAM,GAAE0J,EAAY3X,UAAU2X,EAAYjR,YAAYiR,EAAY3W,QAAQ8C,KAEtE6T,MAGJ,K,wGCxBV,IAAImvE,GACAC,GAwHJ,SAASC,GAAW9lF,GAClB,OAAO3B,KAAKE,IAAI,EAAGyB,EACrB,C,gBCpIA,MAQA,GARuD8kE,IACrD,MAAM,OAAE9xB,GAAW8xB,EACbihB,GAA6B/gB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,8BAA+BzyB,GAGjG,OAAO+yC,EAA6B5gB,GAAAA,GAAAC,cAAC2gB,EAA+BjhB,QAAY59D,CAAS,ECG3F,GARwC49D,IACtC,MAAM,OAAE9xB,GAAW8xB,EACbkhB,GAAchhB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,eAAgBzyB,GAGnE,OAAOgzC,EAAc7gB,GAAAA,GAAAC,cAAC4gB,EAAgBlhB,QAAY59D,CAAS,ECG7D,GARkD49D,IAChD,MAAM,OAAE9xB,GAAW8xB,EACbmhB,GAAwBjhB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,yBAA0BzyB,GAGvF,OAAOizC,EAAwB9gB,GAAAA,GAAAC,cAAC6gB,EAA0BnhB,QAAY59D,CAAS,ECGjF,GAR8C49D,IAC5C,MAAM,OAAE9xB,GAAW8xB,EACbohB,GAAoBlhB,EAAAA,GAAAA,GAAgBC,GAAAA,GAAQQ,MAAO,qBAAsBzyB,GAG/E,OAAOkzC,EAAoB/gB,GAAAA,GAAAC,cAAC8gB,EAAsBphB,QAAY59D,CAAS,E,gBCLzE,MAUA,GAVsD49D,IACpD,MAAM,uBAAEtqB,GAA2BsqB,EAC7BqhB,GAA4BnhB,EAAAA,GAAAA,GAChCC,GAAAA,GAAQQ,MAAO,6BAA8BjrB,GAI/C,OAAO2rC,EAA4BhhB,GAAAA,GAAAC,cAAC+gB,EAA8BrhB,QAAY59D,CAAS,E,gBCfzF,MCyEA,IAAe0+D,EAAAA,GAAAA,KAhDwBwgB,EACrC/sB,OACAgtB,gBACAhhF,cACAkiE,UACA+e,YACAv6D,gBAEA,MAAM46B,GAAOkgB,EAAAA,GAAAA,KAGPiD,GAAMD,EAAAA,GAAAA,IAAuB,OAC7B,kBACJ0c,EAAiB,kBACjBC,EAAiB,uBACjBC,EAAsB,sBACtBC,IACEC,EAAAA,GAAAA,GAAuB7c,GAAMwc,GAEjC,OACEnhB,GAAAA,GAAAC,cAAA,OAAKr5C,WAAWg7C,EAAAA,GAAAA,GD7CG,WC6CyBh7C,GAAY+9C,IAAKA,GAC3D3E,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLC,MAAM,YACNz0D,OAAK,EACL6Y,UDjDmC,WCkDnCw7C,QAASA,EACTqf,cAAeJ,EACf5e,UAAWjhB,EAAK0/B,IAEhBlhB,GAAAA,GAAAC,cAAA,KAAGr5C,WAAWg7C,EAAAA,GAAAA,GDtDuC,WCsDX,OAAS,QAAO1N,QAE3DpjD,QAAQ5Q,IAAgB8/D,GAAAA,GAAAC,cAAA,OAAKr5C,UDxD4E,aCwD5Co6C,EAAAA,GAAAA,IAAqB9gE,IAClFihF,GACCnhB,GAAAA,GAAAC,cAAC0C,GAAAA,EAAI,CACH90B,OAAQuzC,EACRre,QAASue,EACTlK,oBAAqBmK,EACrBze,WAAS,EACTF,UAAU,QACVC,UAAU,UAEV7C,GAAAA,GAAAC,cAACkC,GAAAA,EAAQ,CAACjO,KAAK,YAAYkO,QAAS+e,GAAY3/B,EAAK,mBAGrD,ICrEV,GAA2C,WCsJ3C,IAAeif,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KACjB1qE,IACC,MAAM4M,GAAqBC,EAAAA,EAAAA,KAAyB7M,GACpD,IAAK4M,EACH,MAAO,CAAC,EAGV,MAAM,OAAExL,EAAM,SAAE0G,EAAU1F,KAAMmN,GAAoB3C,EAC9CxJ,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1B+nF,EAAwB5wE,SAAQmb,EAAAA,EAAAA,KAA0B1zB,IAE1DopF,EAAkBhmF,GAAQ0E,IAAaD,EAAAA,IAAsC,WAApB0H,IACzD45E,EAEN,MAAO,CACL55E,kBACAnO,SACAg/C,eAAgBgpC,EAAkBhmF,EAAKqB,0BAAuB+E,EAC9DnF,gBAAiB+kF,EAAkBhmF,EAAKiB,qBAAkBmF,EAC1D0a,eAAgBklE,EAAkBhmF,EAAK8gB,oBAAiB1a,EACxD6/E,cAAeD,EAAkBhmF,EAAKghB,yBAAsB5a,EAC5D7B,YAAayhF,EAAkBhmF,EAAKuE,iBAAc6B,EACnD,GAtBekhE,EApHqC4e,EACvDC,iBACAC,UACAj6E,kBACAnO,SACAuG,cACAtD,kBACA6f,iBACAk8B,iBACAipC,gBACAI,qBAEA,MAAM,eACJC,EAAc,kBAAEC,EAAiB,iBAAEC,EAAgB,qBAAE7pE,EAAoB,gBACzE8pE,EAAe,iBAAEC,EAAgB,oBAAE7xE,IACjCgQ,EAAAA,EAAAA,MAGE8hE,GAAa5d,EAAAA,GAAAA,IAAuB,MAEpC6d,EAAqBzxE,QAAQ6nC,GAC7B6pC,EAAoB1xE,QAAQ8wE,IAElC9gB,EAAAA,GAAAA,KAAU,KACJyhB,GAAsB5oF,IAAWiD,GAAiBxC,QACpDke,EAAqB,CAAE3e,UACzB,GACC,CAACA,EAAQ2e,EAAsBiqE,EAAoB3lF,GAAiBxC,UAEvE0mE,EAAAA,GAAAA,KAAU,KACJyhB,GAAsB5oF,GACxB2e,EAAqB,CAAE3e,UACzB,GACC,CAACA,EAAQ2e,EAAsBiqE,KAElCzhB,EAAAA,GAAAA,KAAU,KACJ0hB,GAAqB7oF,IAAW8iB,GAAgBriB,QAClDoW,EAAoB,CAAE7W,UACxB,GACC,CAACA,EAAQ6W,EAAqBgyE,EAAmB/lE,GAAgBriB,UAEpE0mE,EAAAA,GAAAA,KAAU,KACJ0hB,GAAqB7oF,GACvB6W,EAAoB,CAAE7W,UACxB,GACC,CAACA,EAAQ6W,EAAqBgyE,IAEjC,MAAMC,GAAwBjc,EAAAA,GAAAA,IAAgB,KAC5C,GAAKsb,EAIL,GAAwB,WAApBh6E,EACFm6E,QACK,CACL,MAAMS,EAAoBJ,EAAWx7D,QAAS67D,cAAerjB,cAC3D,2CAEIsjB,EAAkBF,EAAkBz5B,iBAAiC,sBACrE45B,EAAqBD,EAAgBA,EAAgBxoF,OAAS,GACpE,IAAKyoF,EACH,QAGFC,EAAAA,GAAAA,IAAc,CACZC,UAAWL,EACXM,QAASH,EACTzjC,SAAU,MACV6jC,OAtEa,IAwEjB,KAGIthB,GAAeC,EAAAA,GAAAA,GD3GA,YC6GlBkgB,GAAkBhxE,QAAQ6nC,IAAmB7nC,QAAQ8wE,KD7GyG,YC8G9J9wE,QAAQ6nC,IAAmB7nC,QAAQ8wE,MAAoBE,GD9GwQ,YC+G/TC,GD/G+M,YCgH/MC,GDhHqQ,YCmHxQ,OACEhiB,GAAAA,GAAAC,cAAA,OAAK0E,IAAK2d,EAAY17D,UAAW+6C,GAC/B3B,GAAAA,GAAAC,cAACghB,GAAgB,CACf/sB,KAAK,gBACLgtB,cAAc,8BACd9e,QAAS8f,EACTf,UAAWkB,EACXniF,YAAay4C,EACb/xB,WAAWg7C,EAAAA,GAAAA,GD3H+C,YC6HvD2gB,GAAsBW,IACtBV,GD9H8G,cCkInHxiB,GAAAA,GAAAC,cAACghB,GAAgB,CACf/sB,KAAK,UACLgtB,cAAc,sBACd9e,QAAS+f,EACThB,UAAWiB,EACXliF,YAAa0hF,EACbh7D,WAAY47D,GAAqBU,KAGnCljB,GAAAA,GAAAC,cAACghB,GAAgB,CACf/sB,KAAK,aACLgtB,cAAc,mBACd9e,QAASqgB,EACTviF,YAAaA,EACb0mB,UDhJqI,aCkJnI,K,2BCnIH,SAASu8D,GAAQC,GACtB,MAAO,YAAaA,CACtB,CAEO,SAASC,GACd56E,EAAwB9H,EAAwB2iF,EAAuBC,GAEvE,IAMIC,EANAC,EAAkC,GAClCC,EAAmB,CACrBC,aAAcl7E,EAAS,GAAGwE,KAC1B22E,UAAUC,EAAAA,GAAAA,IAAiC,IAAnBp7E,EAAS,GAAGwE,MACpC62E,aAAc,CAACL,IAIjB,MAAMM,EAAiC,CAACL,GAmFxC,OAjFAj7E,EAAShO,SAAQ,CAAClB,EAAS6V,KACrB7V,EAAQu8C,UACL0tC,GAQHA,EAAa/6E,SAASxE,KAAK1K,GACvBA,EAAQyqF,cACVR,EAAaS,gBAAkB1qF,GAE7BA,EAAQwE,QAAQ6I,OAAS48E,EAAaU,sBACpCV,EAAaW,gBACfX,EAAaU,qBAAsB,EACnCV,EAAaW,oBAAiBpiF,GAE9ByhF,EAAaW,eAAiB5qF,IAhBlCiqF,EAAe,CACbY,QAAS7qF,EAAQia,UACjB/K,SAAU,CAAClP,GACX8qF,YAAa9qF,EACb2qF,qBAAqB,IAgBf3qF,EAAQwE,QAAQuN,WAAWL,cAAc7Q,QAAU,GAAK,EAClEqpF,EAAmBx/E,KAAK,CACtBmgF,QAAU,QAAO7qF,EAAQsB,KACzB4N,SAAU,CAAClP,GACX8qF,YAAa9qF,EACb2qF,qBAAqB,EACrBI,aAAa,IAGfb,EAAmBx/E,KAAK1K,GAG1B,MAAMgrF,EAAc97E,EAAS2G,EAAQ,IAGnCo0E,GACKe,GAAgBA,EAAY/wE,WAAa+wE,EAAY/wE,YAAcgwE,EAAaY,UAErFX,EAAmBx/E,KAAKu/E,GACxBA,OAAezhF,GAGjB,MAAMyiF,EAAsBf,EAAmBA,EAAmBrpF,OAAS,GAC3E,GAAImqF,EAAa,CACf,MAAME,GAAyBZ,EAAAA,GAAAA,IAAiC,IAAnBU,EAAYt3E,MACrDy2E,EAAiBE,WAAaa,GAChCf,EAAmB,CACjBC,aAAcY,EAAYt3E,KAC1B22E,SAAUa,EACVX,aAAc,IAEhBC,EAAW9/E,KAAKy/E,GAEhBD,EAAqB,GACrBC,EAAiBI,aAAa7/E,KAAKw/E,KAEnCc,EAAY1pF,KAAO8F,GAChBpH,EAAQ8+D,WAAaksB,EAAYlsB,UACjC9+D,EAAQqC,aAAe2oF,EAAY3oF,YACnCrC,EAAQmrF,kBAAoBH,EAAYG,kBACvCvjF,EAAAA,EAAAA,KAAgB5H,KAAaA,EAAQwE,QAAQ8E,QAAQq7D,YACrD/8D,EAAAA,EAAAA,KAAgBojF,KAAiBA,EAAYxmF,QAAQ8E,QAAQq7D,WAC9D3kE,EAAQorF,eACRJ,EAAYI,eACXJ,EAAYt3E,KAAO1T,EAAQ0T,KA5FR,KA6FnBq2E,IACE/pF,EAAQsB,KAAOyoF,GACbkB,GACC,gBAAiBA,GAAuBA,EAAoBH,aAAaxpF,KAAOyoF,IACpFiB,EAAY1pF,KAAOyoF,GACpBC,GAAkBhqF,EAAQ0oD,aAAa2S,SAAW2vB,EAAYtiC,aAAa2S,UAE/E6uB,EAAqB,GACrBC,EAAiBI,aAAa7/E,KAAKw/E,GAEvC,KAGKM,CACT,C,oFClHA,MC2HA,IAAetjB,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAAC1qE,GAAUkc,aACT,MAAM,SAAEmO,GAAarqB,EAAOqqB,SAASoC,SAC/BrpB,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQkc,GAChC,IAAK9Y,EACH,MAAO,CAAC,EAGV,MAAMiR,GAAOC,EAAAA,EAAAA,KAAWtU,EAAQkc,GAC1BwK,GAAWC,EAAAA,EAAAA,KAAmB3mB,EAAQkc,GAEtC5O,GAAc++E,EAAAA,EAAAA,KAAsBrsF,EAAQoD,EAAKd,IAEvD,MAAO,CACLgqF,gBAAiBjiE,EACjBkiE,oBAAqBj/E,GAAeA,EAAYhL,KAAOc,EAAK4M,uBACxD1C,EAAYhL,QACZkH,EACJ2V,gBAAiBnf,EAAOmf,gBACxBvS,oBAAoBC,EAAAA,EAAAA,KAAyB7M,GAC7CwsF,cAAe9lE,GAAU8lE,cACzBn4E,OACD,GAtBeq2D,EApF+B+hB,EACjDH,kBACAntE,kBACAotE,sBACA3/E,qBACA4/E,gBACAn4E,WAEA,MAAM,qBACJq4E,EAAoB,YACpBp1E,EAAW,oBACXxH,IACEmY,EAAAA,EAAAA,MAEEghC,GAAOkgB,EAAAA,GAAAA,KAGPwjB,GAAexgB,EAAAA,GAAAA,IAAuB,MAEtCvmE,GAAU8jE,EAAAA,GAAAA,KAAQ,KACtB,GAAI8iB,GAAe5mF,QAAS,OAAO4mF,EAAc5mF,QACjD,IAAK0mF,GAAiBzqF,OAAQ,OAE9B,MAAM+qF,EAAcjsF,KAAK6B,MAAM7B,KAAKmN,SAAWw+E,EAAgBzqF,QAC/D,OAAOyqF,EAAgBM,EAAY,GAClC,CAACJ,GAAe5mF,QAAS0mF,KAE5B/jB,EAAAA,GAAAA,KAAU,KACJ+jB,GAAiBzqF,QAA8B,yBAApBsd,GAI/ButE,GAAsB,GACrB,CAACvtE,EAAiButE,EAAsBJ,KAE3C/jB,EAAAA,GAAAA,KAAU,KACgB,yBAApBppD,GAA8CotE,GAChDz8E,EAAoB,CAAEC,MAAOw8E,GAC/B,GACC,CAACptE,EAAiBrP,EAAqBy8E,IAE1C,MAAMM,GAAsB5e,EAAAA,GAAAA,IAAgB,KACrCrhE,GAIL0K,EAAY,CACV1R,QAAS,IACJA,EACHS,qBAAqB,GAEvB0S,YAAanM,GACb,IAGE0C,EAAQk9E,GAAel9E,OAAS25C,EAAK,iCACrC7qC,EAAcouE,GAAepuE,aAAe6qC,EAAK,6BAEvD,OACEwe,GAAAA,GAAAC,cAAA,OAAKr5C,UDlGc,YCmGjBo5C,GAAAA,GAAAC,cAAA,OAAKr5C,UDnGiC,YCoGpCo5C,GAAAA,GAAAC,cAAA,KAAGr5C,UDpG2E,WCoGlDy7C,IAAI,QAAQx6D,GACxCm4D,GAAAA,GAAAC,cAAA,KAAGr5C,UDrGoG,WCqGrEy7C,IAAI,QAAQ1rD,GAE9CqpD,GAAAA,GAAAC,cAAA,OAAK0E,IAAKugB,EAAct+D,UDvGoG,WCuGzEw7C,QAASgjB,GACzDjnF,GACC6hE,GAAAA,GAAAC,cAAColB,GAAAA,EAAW,CACVH,aAAcA,EACd/mF,QAASA,EACTunD,KAAM,IACN4/B,YAAU,MAKjBP,GACC/kB,GAAAA,GAAAC,cAAA,OAAKr5C,UDnHsD,YCoHxD46B,EAAK,8BAA8B7sC,EAAAA,EAAAA,KAAgB/H,KAGpD,K,mDCvHV,SAAoI,WAApI,GAA6M,WCkH7M,IAAe6zD,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAAC1qE,GAAUoB,aACT,MAAM4rF,GAAUjkD,EAAAA,EAAAA,KAAU/oC,EAAQoB,GAClC,IACIqhE,EADAwqB,GAAmB,EAEvB,GAAID,EAAS,CACX,MAAME,GAAkBvmE,EAAAA,EAAAA,KAAmB3mB,EAAQgtF,EAAQ1qF,IACvD4qF,EACFzqB,EAAUyqB,EAAgBzqB,QAE1BwqB,GAAmB,CAEvB,CACA,MAAO,CACLxqB,UACAwqB,mBACD,GAhBeviB,EA/EkCyiB,EACpD/rF,SACAqhE,UACAwqB,mBACAG,sBAEA,MAAMnkC,GAAOkgB,EAAAA,GAAAA,KAEPkkB,GAAkBC,EAAAA,GAAAA,GAAS7qB,GAAS/8D,OAAQ6nF,EAAAA,EAAAA,KAAqB9qB,EAAQ/8D,YAAS8D,GAClFgkF,GAAgBF,EAAAA,GAAAA,GAAS7qB,GAAS50C,KAAM4/D,EAAAA,EAAAA,KAAkBhrB,EAAQ50C,IAAK,aAAUrkB,GACjFkkF,EAAoBjrB,GAAS/8D,OAAQioF,EAAAA,EAAAA,KAAuBlrB,EAAQ/8D,OAAS+8D,GAAS50C,KACxF+/D,EAAAA,EAAAA,KAAmBnrB,EAAQ50C,UAAOrkB,EAChCqkF,EAAiBprB,IAAYA,EAAQrkD,cAAgBqkD,EAAQ50C,MAAQ40C,EAAQ/8D,MAE7EooF,GAAgBC,EAAAA,EAAAA,KAA+B3sF,IAE/C,MAAEX,EAAK,OAAEutF,GAAWN,GAAqB,CAAC,EAIhD,IAFyBG,IAAkBZ,IAEnBG,EAExB,OACE3lB,GAAAA,GAAAC,cAAA,OAAKr5C,WAAWg7C,EAAAA,GAAAA,GD1DG,WC0DyB,UACzC4jB,GAAoBxlB,GAAAA,GAAAC,cAAA,YAAOze,EAAK,YAChC4kC,IAAmBZ,GAAoBxlB,GAAAA,GAAAC,cAAA,YAAOze,EAAK,eACnDwZ,GACCgF,GAAAA,GAAAC,cAAA,OACEr5C,UD/DwD,WCgExD4/D,OAAOC,EAAAA,GAAAA,GACLztF,EAAS,UAASA,WAAY+I,IAG/B6jF,GACC5lB,GAAAA,GAAAC,cAAA,OACEr5C,UAAWs8D,GACXwD,IAAKd,EACL5sF,MAAOA,EACPutF,OAAQA,EACRI,IAAI,aAGPZ,GACC/lB,GAAAA,GAAAC,cAAC2mB,GAAAA,EAAc,CACbC,SAAO,EACPjgE,UAAWs8D,GACXwD,IAAKX,EACLe,MAAI,EACJC,yBAAuB,EACvBC,OAAK,EACLC,aAAW,EACXT,OAAOC,EAAAA,GAAAA,GAAW31E,QAAQ9X,IAAW,UAASA,MAAW8X,QAAQy1E,IAAY,WAAUA,SAG1FN,IAAsBL,IAAoBG,GACzC/lB,GAAAA,GAAAC,cAACinB,GAAAA,EAAQ,CACPtgE,UAAWs8D,GACXlqF,MAAOA,EACPutF,OAAQA,EACRY,kBAAgB,IAGnBd,GACCrmB,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWs8D,IACb1hC,EAAK,oBAGR6kC,GAAiBrrB,EAAQrkD,aACzBqpD,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWs8D,IACdljB,GAAAA,GAAAC,cAAA,KAAGr5C,UDxGyK,YCwGxI46B,EAAK,kBACxC4lC,EAAAA,GAAAA,GAAWpsB,EAAQrkD,YAAa,CAAC,KAAM,QAAS,YAKrD,K,eCnGV,MACM0wE,GAAkCnsD,EAAAA,GAAa,IAAO,I,sFCX7C,SAASosD,GAAqBl8E,GAC3C,IAAKA,GAAwC,IAA/BA,EAAMH,cAAc7Q,OAChC,MAAO,CACL6D,WAAO8D,EACP7D,WAAO6D,GAIX,MAAMwlF,EAAgBn8E,EAAMH,cAAc,GACpCu8E,EAAY,cAAeD,EAIjC,MAAO,CAAEtpF,MAHKupF,EAAcD,EAAczsD,cAA2B/4B,EAAhBwlF,EAA6BA,EAActpF,MAGhFC,MAFFspF,EAAaD,EAAczsD,SAAWysD,OAAgBxlF,EAAawlF,EAAcrpF,MAGjG,C,4BCHO,MAAMupF,GAAgB,CAC3BC,KAAM,EACNC,IAAK,EACL7gB,MAAO,EACP8gB,OAAQ,EACR/gB,KAAM,GA8DR,SAASghB,GAAWv4C,EAAgBw4C,GAClC,OAAOx4C,EAAKz8B,QAAO,CAACk1E,EAAaC,IAASD,EAAcC,GAAMF,EAChE,CAQA,SAASG,GAAuBC,GAC9B,MAAMhF,EAAwB,CAAElqF,MAAO,EAAGutF,OAAQ,GAalD,OAZA2B,EAAOztF,SAAQ,EACb0tF,aACAC,YAEIA,EAAQX,GAAc3gB,QACxBoc,EAAOlqF,MAAQmvF,EAAWnvF,MAAQmvF,EAAW3vF,GAE3C4vF,EAAQX,GAAcG,SACxB1E,EAAOqD,OAAS4B,EAAW5B,OAAS4B,EAAWjzC,EACjD,IAGKguC,CACT,CAEO,SAASmF,GACd/tF,EACAguF,EACAxgC,EACAwmB,GAEA,MACMia,EAjER,SAAmB9/E,EAAwB+/E,EAA2Bla,GACpE,MAAM1yE,EAAa6M,EAAS,GAAG7M,WAS/B,OARkB4sF,EACd//E,EAAS,GAAG1K,QAAQuN,UAAWL,cAAcjE,KAAKoE,GAClD,cAAeA,EAAQA,EAASA,EAAMnN,OAASmN,EAAMlN,QAErDuK,EAASzB,KAAKzN,IACd8E,EAAAA,EAAAA,KAAkB9E,GAAS0E,QAASI,EAAAA,EAAAA,KAAkB9E,GAAS2E,SAEjE7D,OAAOyW,SACO9J,KACboE,IACC,MAAM+8E,GAAaM,EAAAA,GAAAA,IAAyB,CAC1Cr9E,QACA9Q,MAAOsB,EACP0yE,aAGF,OAAO6Z,EAAWnvF,MAAQmvF,EAAW5B,MAAM,GAGjD,CA4CiBmC,CAAU5gC,EAAMr/C,SAAUq/C,EAAMw8B,YAAahW,GACtDqa,EA3CR,SAAwBJ,GACtB,OAAOA,EAAOvhF,KAAK4hF,GAAWA,EAAQ,IAAM,IAAOA,EAAQ,GAAM,IAAM,MAAO/zE,KAAK,GACrF,CAyCsBg0E,CAAeN,GAC7BO,EAxCR,SAAyBP,GACvB,OAAOA,EAAO11E,QAAO,CAAC1E,EAAQy6E,IAAUA,EAAQz6E,GAAQ,GAAKo6E,EAAOnuF,MACtE,CAsCuB2uF,CAAgBR,GAC/BS,EAAaT,EAAOnuF,OACpB6uF,EAAYV,EAAO5+E,MAAMi/E,GAAUA,EAAQ,IAC3CM,GAAWC,EAAAA,EAAAA,IAAkB7uF,GAAO,EAAOguF,EAAWha,GAG5D,IAAI4Z,EAEJ,MAAMp4E,EAAS,CACby4E,SACAI,cACAG,eACAI,WACAE,SAAU,IACVC,UAVgBH,EAWhBI,QAlBc,GA+BhB,OATEpB,EADEc,GAAc,GAAKC,EAgBzB,UACEV,OAAQgB,EAAc,aACtBT,EAAY,SACZI,EAAQ,SACRE,EAAQ,QACRE,EAAO,UACPD,EAAa,EAAIH,EAAY,IAE7B,MAAMX,EA1ER,SAAoBA,EAAkBO,GACpC,OAAOP,EAAOvhF,KAAK4hF,GACTE,EAAe,KAAMU,EAAAA,GAAAA,IAAMZ,EAAO,EAAG,OAAQY,EAAAA,GAAAA,IAAMZ,EAAO,MAAQ,IAE9E,CAsEiBa,CAAWF,EAAgBT,GACpCz6E,EAAQk7E,EAAenvF,OACvB+T,EAAS,IAAIsS,MAAMpS,GACnBq7E,EAAuB,GASvBC,EAAeC,IACnB,MAAMC,EAAoB,GAC1B,IAAIpxE,EAAS,EACbmxE,EAAWnvF,SAASqvF,IAClBD,EAAQ5lF,KAXQ8lF,EAACtxE,EAAgBuxE,KACnC,MACMC,EAAMpC,GADUU,EAAO74E,MAAM+I,EAAQA,EAASuxE,GACd,GAEtC,OAAQd,GAAYc,EAAe,GAAKV,GAAWW,CAAG,EAOvCF,CAAYtxE,EAAQqxE,IACjCrxE,GAAUqxE,CAAY,IAGxBJ,EAASzlF,KAAK,CACZ2lF,aACAC,WACA,EAGJ,IAAK,IAAIK,EAAQ,EAAGA,IAAU77E,IAAS67E,EAAO,CAC5C,MAAMC,EAAS97E,EAAQ67E,EACnBA,GAAS,GAAKC,GAAU,GAC1BR,EAAY,CAACO,EAAOC,GAExB,CAEA,IAAK,IAAID,EAAQ,EAAGA,IAAU77E,EAAQ,IAAK67E,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAW97E,EAAQ67E,IAASC,EAAQ,CACvD,MAAMC,EAAQ/7E,EAAQ67E,EAAQC,EAC1BD,GAAS,GAAKC,IAAWrB,EAAe,IAAO,EAAI,IAAMsB,GAAS,GACpET,EAAY,CAACO,EAAOC,EAAQC,GAEhC,CAGF,IAAK,IAAIF,EAAQ,EAAGA,IAAU77E,EAAQ,IAAK67E,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAW97E,EAAQ67E,IAASC,EAC/C,IAAK,IAAIC,EAAQ,EAAGA,IAAU/7E,EAAQ67E,EAAQC,IAAUC,EAAO,CAC7D,MAAMC,EAASh8E,EAAQ67E,EAAQC,EAASC,EACpCF,GAAS,GAAKC,GAAU,GAAKC,GAAS,GAAKC,GAAU,GACvDV,EAAY,CAACO,EAAOC,EAAQC,EAAOC,GAEvC,CAIJ,IAAIC,EACAC,EAAc,EAClB,IAAK,IAAI9sF,EAAI,EAAGA,EAAIisF,EAAStvF,OAAQqD,IAAK,CACxC,MAAM,QACJosF,EAAO,WACPD,GACEF,EAASjsF,GACP+sF,EAAYZ,EAAWxvF,OACvBqwF,EAAc5C,GAAWgC,EAAS,GAAKP,GAAWkB,EAAY,GAE9DE,EADgBxxF,KAAKC,OAAO0wF,GACLT,EAAW,IAAM,EACxCuB,EAAO,MACX,IAAK,IAAIC,EAAO,EAAGA,IAASJ,IAAaI,EACvC,GAAIhB,EAAWgB,EAAO,GAAKhB,EAAWgB,GACpC,OAAO,IAIX,OAAO,CACR,EARY,GASPC,EAAO3xF,KAAK4xF,IAAIL,EAAcpB,GAAaqB,EAAOC,IAEnDL,GAAkBO,EAAON,KAC5BD,EAAiBZ,EAASjsF,GAC1B8sF,EAAcM,EAElB,CAEA,MAAME,EAAgBT,EAAgBV,WAChCoB,EAAiBV,EAAgBT,QACjCoB,EAAWF,EAAc3wF,OAC/B,IAAIgV,EAAQ,EACR8lC,EAAI,EACR,IAAK,IAAIg2C,EAAM,EAAGA,IAAQD,IAAYC,EAAK,CACzC,MAAMC,EAAWJ,EAAcG,GACzBE,EAAaJ,EAAeE,GAC5B3E,EAASrtF,KAAK6U,MAAMq9E,GAC1B,IAAI5yF,EAAI,EAER,IAAK,IAAI6yF,EAAM,EAAGA,IAAQF,IAAYE,EAAK,CACzC,MAAMjD,EAAQX,GAAcC,MACf,IAARwD,EAAYzD,GAAcE,IAAMF,GAAcC,OAC9CwD,IAAQD,EAAW,EAAIxD,GAAcG,OAASH,GAAcC,OACpD,IAAR2D,EAAY5D,GAAc5gB,KAAO4gB,GAAcC,OAC/C2D,IAAQF,EAAW,EAAI1D,GAAc3gB,MAAQ2gB,GAAcC,MAC1DkB,EAAQL,EAAOn5E,GACfpW,EAAQqyF,IAAQF,EAAW,EAAIjC,EAAW1wF,EAAIU,KAAK6U,MAAM66E,EAAQwC,GACvEj9E,EAAOiB,GAAS,CACd+4E,WAAY,CACV3vF,IACA08C,IACAl8C,QACAutF,UAEF6B,SAEF5vF,GAAKQ,EAAQswF,IACXl6E,CACJ,CACA8lC,GAAKqxC,EAAS+C,CAChB,CAEA,OAAOn7E,CACT,CA3Iam9E,CAA0Bx7E,GACX,IAAfk5E,EA4Ib,SAAmBl5E,GACjB,MAAM,OACJy4E,EAAM,YACNI,EAAW,aACXG,GACEh5E,EACJ,MAAuB,OAAhB64E,GAAwBG,EAAe,KAAOP,EAAO,GAAKA,EAAO,GAAK,GAO/E,SAA4Bz4E,GAC1B,MAAM,OACJy4E,EAAM,SACNW,EAAQ,QACRI,EAAO,UACPD,GACEv5E,EACEy2E,EAASrtF,KAAK6U,MAAM7U,KAAKC,IAAI+vF,EAAWX,EAAO,GAAIrvF,KAAKC,IAAI+vF,EAAWX,EAAO,IAAKc,EAAYC,GAAW,KAEhH,MAAO,CAAC,CACNnB,WAAY,CACV3vF,EAAG,EACH08C,EAAG,EACHl8C,MAAOkwF,EACP3C,UAEF6B,MAAOX,GAAc5gB,KAAO4gB,GAAcE,IAAMF,GAAc3gB,OAC7D,CACDqhB,WAAY,CACV3vF,EAAG,EACH08C,EAAGqxC,EAAS+C,EACZtwF,MAAOkwF,EACP3C,UAEF6B,MAAOX,GAAc5gB,KAAO4gB,GAAcG,OAASH,GAAc3gB,OAErE,CAhCMykB,CAAmBz7E,GACH,OAAhB64E,GAAwC,OAAhBA,EAiC9B,SAAiC74E,GAC/B,MAAM,OACJy4E,EAAM,SACNW,EAAQ,QACRI,EAAO,UACPD,GACEv5E,EACE9W,GAASkwF,EAAWI,GAAW,EAC/B/C,EAASrtF,KAAK6U,MAAM7U,KAAKC,IAAIH,EAAQuvF,EAAO,GAAIrvF,KAAKC,IAAIH,EAAQuvF,EAAO,GAAIc,KAClF,MAAO,CAAC,CACNlB,WAAY,CACV3vF,EAAG,EACH08C,EAAG,EACHl8C,QACAutF,UAEF6B,MAAOX,GAAcE,IAAMF,GAAc5gB,KAAO4gB,GAAcG,QAC7D,CACDO,WAAY,CACV3vF,EAAGQ,EAAQswF,EACXp0C,EAAG,EACHl8C,QACAutF,UAEF6B,MAAOX,GAAcE,IAAMF,GAAc3gB,MAAQ2gB,GAAcG,QAEnE,CA1DQ4D,CAAwB17E,GA4DhC,SAA4BA,GAC1B,MAAM,OACJy4E,EAAM,SACNa,EAAQ,SACRF,EAAQ,QACRI,EAAO,UACPD,GACEv5E,EACE27E,EAAevyF,KAAK6U,MAAM,IAAMq7E,GAChCsC,EAAcxyF,KAAKC,IACvBD,KAAK6U,MACH7U,KAAKE,IACH,IAAO8vF,EAAWI,IACjBJ,EAAWI,GAAWf,EAAO,IAAM,EAAIA,EAAO,GAAK,EAAIA,EAAO,MAGnEW,EAAWI,EAAUmC,GAEjBE,EAAazC,EAAWwC,EAAcpC,EACtC/C,EAASrtF,KAAKC,IAAIkwF,EAAWnwF,KAAK6U,MAAM7U,KAAKC,IAAIwyF,EAAapD,EAAO,GAAImD,EAAcnD,EAAO,MAEpG,MAAO,CAAC,CACNJ,WAAY,CACV3vF,EAAG,EACH08C,EAAG,EACHl8C,MAAO2yF,EACPpF,UAEF6B,MAAOX,GAAcE,IAAMF,GAAc5gB,KAAO4gB,GAAcG,QAC7D,CACDO,WAAY,CACV3vF,EAAGmzF,EAAarC,EAChBp0C,EAAG,EACHl8C,MAAO0yF,EACPnF,UAEF6B,MAAOX,GAAcE,IAAMF,GAAc3gB,MAAQ2gB,GAAcG,QAEnE,CAjGQgE,CAAmB97E,EAC3B,CAtJa+7E,CAAU/7E,GACK,IAAfk5E,EAuPb,SAAqBl5E,GACnB,MAAM,YAAE64E,GAAgB74E,EAExB,MAA0B,MAAnB64E,EAAY,GAKrB,SAAiC74E,GAC/B,MAAM,UACJu5E,EAAS,QACTC,EAAO,OACPf,EAAM,SACNW,EAAQ,SACRE,GACEt5E,EACEg8E,EAAczC,EACd0C,EAAc7yF,KAAK6U,MACvB7U,KAAKC,KACFkwF,EAAYC,GAAW,EACvBf,EAAO,IAAMW,EAAWI,IAAaf,EAAO,GAAKA,EAAO,MAGvDyD,EAAeF,EAAcC,EAAczC,EAC3C2C,EAAa/yF,KAAKE,IACtBgwF,EACAlwF,KAAK6U,MACH7U,KAAKC,KACF+vF,EAAWI,GAAW,EACvBpwF,KAAKC,IACH4yF,EAAcxD,EAAO,GACrByD,EAAezD,EAAO,OAKxB2D,EAAYhzF,KAAKC,IAAID,KAAK6U,MAAM+9E,EAAcvD,EAAO,IAAKW,EAAWI,EAAU2C,GAErF,MAAO,CAAC,CACN9D,WAAY,CACV3vF,EAAG,EACH08C,EAAG,EACHl8C,MAAOkzF,EACP3F,OAAQuF,GAEV1D,MAAOX,GAAcE,IAAMF,GAAc5gB,KAAO4gB,GAAcG,QAC7D,CACDO,WAAY,CACV3vF,EAAG0zF,EAAY5C,EACfp0C,EAAG,EACHl8C,MAAOizF,EACP1F,OAAQyF,GAEV5D,MAAOX,GAAcE,IAAMF,GAAc3gB,OACxC,CACDqhB,WAAY,CACV3vF,EAAG0zF,EAAY5C,EACfp0C,EAAG82C,EAAe1C,EAClBtwF,MAAOizF,EACP1F,OAAQwF,GAEV3D,MAAOX,GAAcG,OAASH,GAAc3gB,OAEhD,CA3DMqlB,CAAwBr8E,GA6D9B,SAAgCA,GAC9B,MAAM,SACJo5E,EAAQ,OACRX,EAAM,UACNc,EAAS,QACTC,GACEx5E,EACE67E,EAAazC,EACb4C,EAAc5yF,KAAK6U,MAAM7U,KAAKC,IAAIwyF,EAAapD,EAAO,GAAI,KAAQc,EAAYC,KAC9EoC,GAAexC,EAAWI,GAAW,EACrC0C,EAAe9yF,KAAKC,IACxBkwF,EAAYyC,EAAcxC,EAC1BpwF,KAAK6U,MAAM7U,KAAKC,IACduyF,EAAcnD,EAAO,GACrBmD,EAAcnD,EAAO,MAGnB6D,EAAaT,EAAaD,EAAcpC,EAE9C,MAAO,CAAC,CACNnB,WAAY,CACV3vF,EAAG,EACH08C,EAAG,EACHl8C,MAAO2yF,EACPpF,OAAQuF,GAEV1D,MAAOX,GAAc5gB,KAAO4gB,GAAcE,IAAMF,GAAc3gB,OAC7D,CACDqhB,WAAY,CACV3vF,EAAG,EACH08C,EAAG42C,EAAcxC,EACjBtwF,MAAO0yF,EACPnF,OAAQyF,GAEV5D,MAAOX,GAAcG,OAASH,GAAc5gB,MAC3C,CACDshB,WAAY,CACV3vF,EAAGkzF,EAAcpC,EACjBp0C,EAAG42C,EAAcxC,EACjBtwF,MAAOozF,EACP7F,OAAQyF,GAEV5D,MAAOX,GAAcG,OAASH,GAAc3gB,OAEhD,CAxGMulB,CAAuBv8E,EAC7B,CA5Paw8E,CAAYx8E,GAqWzB,SAAoBA,GAClB,MAAM,YAAE64E,GAAgB74E,EAExB,MAA0B,MAAnB64E,EAAY,GAKrB,UAA+B,SAC7BO,EAAQ,OACRX,EAAM,QACNe,EAAO,UACPD,EAAS,SACTD,IAEA,MAAMmD,EAAIrD,EACJsD,EAAKtzF,KAAK6U,MAAM7U,KAAKC,IAAIozF,EAAIhE,EAAO,GAAI,KAAQc,EAAYC,KAC5DmD,EAAIvzF,KAAK6U,OAAOm7E,EAAW,EAAII,IAAYf,EAAO,GAAKA,EAAO,GAAKA,EAAO,KAC1EmE,EAAKxzF,KAAKE,IAAIgwF,EAAUlwF,KAAK6U,MAAM7U,KAAKC,IAAI,IAAO+vF,EAAW,EAAII,GAAUmD,EAAIlE,EAAO,MACvFoE,EAAKzzF,KAAK6U,MAAM7U,KAAKE,IAAIF,KAAKE,IAAIgwF,EAAU,KAAQF,EAAW,EAAII,IAAWmD,EAAIlE,EAAO,KACzFqE,EAAKL,EAAIG,EAAKC,EAAK,EAAIrD,EACvBuD,EAAK3zF,KAAKC,IAAIkwF,EAAYmD,EAAKlD,EAASmD,GAE9C,MAAO,CAAC,CACNtE,WAAY,CACV3vF,EAAG,EACH08C,EAAG,EACHl8C,MAAOuzF,EACPhG,OAAQiG,GAEVpE,MAAOX,GAAc5gB,KAAO4gB,GAAcE,IAAMF,GAAc3gB,OAC7D,CACDqhB,WAAY,CACV3vF,EAAG,EACH08C,EAAGs3C,EAAKlD,EACRtwF,MAAO0zF,EACPnG,OAAQsG,GAEVzE,MAAOX,GAAcG,OAASH,GAAc5gB,MAC3C,CACDshB,WAAY,CACV3vF,EAAGk0F,EAAKpD,EACRp0C,EAAGs3C,EAAKlD,EACRtwF,MAAO4zF,EACPrG,OAAQsG,GAEVzE,MAAOX,GAAcG,QACpB,CACDO,WAAY,CACV3vF,EAAGk0F,EAAKpD,EAAUsD,EAAKtD,EACvBp0C,EAAGs3C,EAAKlD,EACRtwF,MAAO2zF,EACPpG,OAAQsG,GAEVzE,MAAOX,GAAc3gB,MAAQ2gB,GAAcG,QAE/C,CApDMkF,CAAsBh9E,GAsD5B,UAAgC,UAC9Bu5E,EAAS,OACTd,EAAM,SACNW,EAAQ,QACRI,EAAO,SACPF,IAEA,MAAMqD,EAAIpD,EACJqD,EAAKxzF,KAAK6U,MAAM7U,KAAKC,IAAIszF,EAAIlE,EAAO,GAAI,IAAOW,EAAWI,KAC1DiD,EAAIrzF,KAAK6U,OAAOs7E,EAAY,EAAIC,IAAY,EAAIf,EAAO,GAAK,EAAIA,EAAO,GAAK,EAAIA,EAAO,KACvFiE,EAAKtzF,KAAK6U,MAAMw+E,EAAIhE,EAAO,IAC3BsE,EAAK3zF,KAAK6U,MAAMw+E,EAAIhE,EAAO,IAC3BwE,EAAKN,EAAID,EAAKK,EAAK,EAAIvD,EACvBsD,EAAK1zF,KAAKE,IAAIgwF,EAAUlwF,KAAKC,IAAI+vF,EAAWwD,EAAKpD,EAASiD,IAEhE,MAAO,CAAC,CACNpE,WAAY,CACV3vF,EAAG,EACH08C,EAAG,EACHl8C,MAAO0zF,EACPnG,OAAQkG,GAEVrE,MAAOX,GAAcE,IAAMF,GAAc5gB,KAAO4gB,GAAcG,QAC7D,CACDO,WAAY,CACV3vF,EAAGk0F,EAAKpD,EACRp0C,EAAG,EACHl8C,MAAO4zF,EACPrG,OAAQiG,GAEVpE,MAAOX,GAAcE,IAAMF,GAAc3gB,OACxC,CACDqhB,WAAY,CACV3vF,EAAGk0F,EAAKpD,EACRp0C,EAAGs3C,EAAKlD,EACRtwF,MAAO4zF,EACPrG,OAAQsG,GAEVzE,MAAOX,GAAc3gB,OACpB,CACDqhB,WAAY,CACV3vF,EAAGk0F,EAAKpD,EACRp0C,EAAGs3C,EAAKK,EAAK,EAAIvD,EACjBtwF,MAAO4zF,EACPrG,OAAQwG,GAEV3E,MAAOX,GAAcG,OAASH,GAAc3gB,OAEhD,CArGMkmB,CAAuBl9E,EAC7B,CAzWam9E,CAAWn9E,GAGf,CACLo4E,SACAgF,eAAgBjF,GAAuBC,GAE3C,C,kDCvIA,IAAIiF,GACJ,MAAMC,GAAyB,IAAIC,GAAAA,EAE/BC,EAAAA,IACF3pF,YAGF,WACOwpF,KACHA,IAASI,EAAAA,GAAAA,GACP,IAAIC,OAAO,IAAIjwE,IAAI,qBAErB6vE,GAAuBK,UAE3B,GAnB0B,K,0BCE1B,MAaMC,GAAa,IAAIvhF,IAavB,MAAMwhF,IAA4BnrE,EAAAA,EAAAA,KAuBlC,SAA0B7oB,GACxB,MAAM,2BAAEi0F,IAA+BptE,EAAAA,EAAAA,MACjCqtE,EAAYH,GAAW30F,IAAIY,GACjC,IAAKk0F,EACH,OAGF,MAAMC,EAAkBD,EAAUnoC,KAClC,GAAIooC,EAzDuB,EA0DzB,OAGF,IAAIC,EAAoB,EACpBC,EAAkB,EACtB,MAAMC,EAAsB,IAAI9hF,IAEhC,IAAK,MAAMs5C,KAAYooC,EAAUrtF,SAAU,CACrCilD,EAASyoC,gBACXH,IAGEtoC,EAAS0oC,kBACXH,IAGF,MAAM5mE,EAAWq+B,EAAS0oC,iBAC1B,GAAI/mE,EAAU,CACZ,MAAMgnE,EAAcH,EAAoBl1F,IAAIquB,IAAa,EACzD6mE,EAAoB99E,IAAIiX,EAAUgnE,EAAc,EAClD,CACF,CAKA,GAH0BL,EAAoBD,EAhFjB,IAiFLE,EAAkBF,EAhFf,GAmFzB,OAMFF,EAA2B,CACzBj0F,SACAw0F,iBAL2B1tE,MAAMjR,KAAKy+E,EAAoBplF,WACzD5L,MAAK,EAAE,CAAEC,IAAK,CAAEC,KAAOA,EAAID,IAAG,GAAG,IAMtC,GA3FuB,K,4BCIvB,MAGMmxF,GAA4B,EAAIp2F,EAAAA,EAChCq2F,GAA6BjrF,OAAOpL,EAAAA,GACpCs2F,GAAgC,+BAEvB,SAASC,GACtBC,EACAvJ,EACAxlF,EACAgvF,EACAC,EACAC,EACAnN,EACAoN,EACAl1F,EACAm1F,EACAC,EACAC,EACAC,GAEA,MAAM,qBAAEzpF,EAAoB,oBAAE0pF,IAAwB1uE,EAAAA,EAAAA,OAE/C2uE,EAAwBC,EAA0BC,IAA8BthB,EAAAA,GAAAA,MAChFuhB,EAAUC,EAAYC,IAAgBzhB,EAAAA,GAAAA,KACvC0hB,GAAsB/qB,EAAAA,GAAAA,MAOtBgrB,GAAkBC,EAAAA,GAAAA,IAAsB3lC,IAC5C,MAAM4lC,EAAyBb,EAAiBjoE,QAChD,IAAK8oE,EAAwB,OAE7B,MAAM,QAAEC,EAAO,QAAEC,GAAY9lC,GAE3BxxD,EAAGu3F,EAAgB/2F,MAAOg3F,EAAoB96C,EAAG+6C,EAAgB1J,OAAQ2J,GACvEN,EAAuBO,wBACrB33F,EAAIu3F,EAAiBC,EAAqB,EAC1C96C,EAAI+6C,EAAiBC,EAAsB,EAE3CE,EAAal3F,KAAK4xF,IAAItyF,EAAIq3F,GAAWxB,GACrCgC,EAAan3F,KAAK4xF,IAAI51C,EAAI46C,GAAWxB,GACvC8B,GAAcC,EAChBjB,IAEAC,GACF,GACC,CAACN,GAAmBuB,GAAAA,IA2HvB,OA7CAxvB,EAAAA,GAAAA,KAAU,KACR,IAAKna,EAAAA,IAAgB+nC,IAAmBC,GAAYG,IAAuBG,IACzE,OAGF,IAAIsB,EACJ,OAAO9pB,EAAAA,GAAAA,IAAcye,EAAap+D,QAAU,CAC1C4/C,wBAAyB,eACzBiZ,wBAAyB,gBACzBhZ,QAAUA,CAAC3c,EAAG38C,IACRA,IAAcu5D,GAAAA,GAAeC,OAC1B0pB,IACHA,EAAYv1F,KAAKC,OAGnBs0F,KAEO,GAKXiB,UAAWA,KACJD,GAAc5B,IAInBnpF,EAAqB,CAAElG,aAAcI,IAErCiE,WAAW6rF,EAAct2F,KAAKE,IAAI,EA7JT,KA6JwC4B,KAAKC,MAAQs1F,KAC9EA,OAAYxuF,EAAS,GAEvB,GACD,CACDmjF,EAAcwJ,EAAgBhvF,EAAW6vF,EAAYC,EAAcb,EAAUG,EAC7EG,IAUK,CACLwB,gBAAkB/B,OAAmC3sF,EAnJvD,SAAyBioD,IACvB0mC,EAAAA,GAAAA,GAAwB1mC,GACxB6kC,EAAwB7kC,EAC1B,EAiJE2mC,YA3FF,SAAqB3mC,GACnB,GAAI0kC,EACFD,EAAczkC,QAIhB,GAAKrD,EAAAA,GAEL,OAAI8oC,EAAoB3oE,SACtB+nC,cAAc4gC,EAAoB3oE,SAClC2oE,EAAoB3oE,aAAU/kB,OAhBhCmtF,EAAoB,CAClBv1F,SACA+F,oBAmBF+vF,EAAoB3oE,QAAUnjB,YAAW,KACvC8rF,EAAoB3oE,aAAU/kB,EAxClC,SAAmBioD,GACjB,GAAI9uB,EAAAA,GAAY,CACd,MAAM01D,EAAS5mC,EAAE4mC,OACjB,IAAKA,EAAOC,UAAUC,SAAS,kBAAoBF,EAAOC,UAAUC,SAAS,WAC3E,OAGEh4F,EAAAA,EAAWi4F,uBACbptF,YAAW,KACT89E,EAAcz3B,EAAE,GAtEa,KAyE/By3B,EAAcz3B,EAElB,CACF,CA0BIgnC,CAAUhnC,EAAE,GApGsB,KAsGtC,EAyEEq3B,kBAAoBqN,EAAsCE,EAAcqC,GAAAA,OAAYlvF,EAvEtF,SAA2BioD,GACzB,GAAI9uB,EAAAA,GAAY,CACd,GAAK8uB,EAAE4mC,OAAuBM,QAAQ,YAAcpC,EAClD,OAGF9kC,EAAE0V,iBACF+uB,GACF,MACEhN,EAAcz3B,EAElB,EA6DEmnC,kBAAoBzC,OAA8C3sF,EA3DpE,YACM4kD,EAAAA,IAAiBgoC,GAErBnpF,EAAqB,CAAElG,aAAcI,EAAW8e,mBAAezc,EAAW0c,eAAW1c,GACvF,EAwDEqvF,yBAA2BzqC,EAAAA,QAAiC5kD,EAtD9D,SAAyBioD,GACvBA,EAAEyhB,iBACJ,EAqDEikB,kBACA2B,wBAhIF,SAAiCrnC,GAC/BA,EAAEyhB,kBACFyjB,EAAoB,CAClBv1F,SACA+F,aAEJ,EA2HEk2E,iBAfF,SAA0B5rB,IAGxBsmC,EAAAA,GAAAA,IAAejB,GACXL,GAyBR,SAAuChlC,GACrC,MAAMsnC,EAAmBC,GAA8BvnC,EAAEwnC,eACrDF,GACFA,EAAiBG,gBAAgBlD,GAErC,CA9BgCmD,CAA8B1nC,EAC5D,EAWEslC,WACAH,yBACAwC,iCAEJ,CAEA,SAASA,GAA8B3nC,GACrC,MAAMsnC,EAAmBC,GAA8BvnC,EAAEwnC,eACrDF,GACFA,EAAiBM,aAAarD,GAA+B,GAEjE,CASA,SAASgD,GAA8BvO,GACrC,IAAIl8D,EAA0Bk8D,EAE9B,GACEl8D,EAAUA,EAAQ+qE,yBACX/qE,IAAYA,EAAQ+pE,UAAUC,SAAS,2BAEhD,OAAOhqE,CACT,C,wFC1GA,SAtFoCgrE,EAClCryE,QACAkhB,SACAoxD,eACAnD,cACAoD,gCACA5vB,cAEA,MAAM,iBAAEz6D,IAAqB6Y,EAAAA,EAAAA,MAEvBghC,GAAOkgB,EAAAA,GAAAA,KAGPiD,GAAMD,EAAAA,GAAAA,IAAuB,MAC7ButB,GAAiBC,EAAAA,GAAAA,IAAkBvtB,EAAKqtB,GACxCG,EAAc1yE,GAAS,YAAaA,EACpC2yE,EAAiB3yE,GAAS,cAAeA,EACzC4yE,EAAeF,GAAerhF,QAAQ2O,EAAM1hB,QAAQG,OACpD2J,EAAQsqF,EAAc,QAAWC,EAAiB,eAAiB,UAEnEE,GAAezM,EAAAA,GAAAA,GAASsM,IAAeI,EAAAA,EAAAA,KAAkB9yE,EAAO,cAAewyE,GAC/EO,EAAiBH,EAAe5yE,EAAM1hB,QAAQG,MAAOO,WAAWg0F,aAAU1wF,EAC1E2wF,EAAeJ,GAAgBE,EAE/BzwC,EAAcphB,GAASqhB,EAAAA,EAAAA,KAAaR,EAAM7gB,QAAU5+B,EACpD4wF,GAAkBnsB,EAAAA,GAAAA,IAAgB,KAClC/mD,IAAU2yE,EACZhwB,IAEAz6D,EAAiB,CACfpO,QAASioD,EAAK,kBAElB,KAGI,YAAEmvC,EAAW,gBAAEF,IAAoBmC,EAAAA,GAAAA,GAAaD,GAEtD,OACE3yB,GAAAA,GAAAC,cAAA,OACE0E,IAAKA,EACL/9C,WAAWg7C,EAAAA,GAAAA,GACT,mBACAixB,EAAAA,GAAAA,GAAkBlyD,EAAQoxD,GAAc,GACxCW,GAAgB,cAElBtwB,QAASuuB,EACTmC,YAAarC,GAEZiC,GAiBP,SACEK,EACAnE,GAEA,MAAM,MAAE51F,EAAK,OAAEutF,IAAWyM,EAAAA,EAAAA,MAE1B,OACEhzB,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,kBACbo5C,GAAAA,GAAAC,cAAA,OACEymB,IAAKqM,EACL/5F,MAAOA,EACPutF,OAAQA,EACRI,IAAI,GACJ//D,UAAU,YACVqsE,WAAW,IAEZrE,GAAe5uB,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,cAGtC,CApCuBssE,CAAgBR,EAAc9D,GAC/C5uB,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,mCACbo5C,GAAAA,GAAAC,cAAA,KAAGr5C,UAAU,yBACVwrE,GACCpyB,GAAAA,GAAAC,cAACkzB,GAAAA,EAAI,CAACntD,KAAK,gBAAgBpf,UAAU,yBAEtCurE,GACCnyB,GAAAA,GAAAC,cAACkzB,GAAAA,EAAI,CAACntD,KAAK,cAAcpf,UAAU,yBAEpC46B,EAAK35C,IAERm4D,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,kBAAiBwgE,EAAAA,GAAAA,GAAWrlC,GA7DtC,OA+DH,E,+EC1EV,MAAMqxC,GAAkB,MAAQn7F,EAAAA,EAwBhC,IAAewoE,EAAAA,GAAAA,KAtBiB4yB,EAC9BzxF,QACAglB,YACAw7C,cAEA,MAAM5gB,GAAOkgB,EAAAA,GAAAA,KACb,OACE1B,GAAAA,GAAAC,cAAA,OACEr5C,WAAWg7C,EAAAA,GAAAA,GCjCM,WDiCsBh7C,GACvC4/D,MAAQ,qCAAmC8M,EAAAA,GAAAA,IAAyB1xF,GAAO2xF,cAC3EnxB,QAASA,GAERxgE,EACGo+D,GAAAA,GAAAC,cAACuzB,GAAAA,EAAS,CAAC5xF,MAAOA,EAAO8jD,KAAM0tC,KAC/BpzB,GAAAA,GAAAC,cAAA,OAAKymB,IAAK+M,GAAU9M,IAAI,GAAGsM,WAAW,IACzCrxF,GAAOiG,OAAQu/E,EAAAA,GAAAA,GAAWxlF,EAAMiG,OAAS25C,EAAK,WAC9C5/C,GAAO8xF,UAAY1zB,GAAAA,GAAAC,cAAA,KAAGr5C,UAAU,mBACjCo5C,GAAAA,GAAAC,cAAA,KAAGr5C,UAAU,mBACT,I,gBEjBK,SAAS+sE,GAAkBC,GAkDxC,OAAOnzB,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KACV,CAAC1qE,EAAQs7F,KACP,MAAM,SAAEhhB,EAAQ,iBAAEihB,GAAqBD,EACvC,MAAO,CACLnF,gBAAiBoF,IAAoBC,EAAAA,EAAAA,KAAqBx7F,GAC1Dy7F,YAAaF,IAAoBG,EAAAA,EAAAA,KAAwB17F,EAAQs6E,GAClE,GANO5P,EAhD4BtD,IACtC,MAAM,eACJ+uB,EAAc,WACdsF,EAAU,WACV7L,EAAU,SACVtV,GACElT,GACE,uBAAEnZ,IAA2BhmC,EAAAA,EAAAA,MAE7B0zE,GAAsB1tB,EAAAA,GAAAA,IAAiBxc,IAC3CA,EAAEyhB,kBACFjlB,EAAuB,CAAE9mD,UAAWmzE,EAAUtsB,UAAWyD,GAAGqd,UAAW,IAGnE8sB,GAAWlyB,EAAAA,GAAAA,KAAQ,KACvB,MAAQkmB,WAAYiM,EAAI,QAAEhyB,GAAYzC,EACtC,MAAO,IACFA,EACH+uB,iBACAsF,aACA7L,WAAY,IACPiM,EACH57F,EAAG,EACH08C,EAAG,GAELktB,QAASssB,OAAiB3sF,EAAYqgE,EACvC,GACA,CAACzC,EAAO+uB,EAAgBsF,IAE3B,OACEh0B,GAAAA,GAAAC,cAAA,OACEr5C,WAAWg7C,EAAAA,GAAAA,GAAe,4BAA6BoyB,GAAc,eACrExN,MAAO2B,EAAc,SAAQA,EAAW3vF,aAAa2vF,EAAWjzC,OAAS,GACzEktB,QAASssB,EAAiBwF,OAAsBnyF,GAE/C2sF,GACC1uB,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,0BACZotE,GACCh0B,GAAAA,GAAAC,cAAA,KAAGr5C,UAAU,sBAKnBo5C,GAAAA,GAAAC,cAAC2zB,EAAqBO,GAClB,IAaZ,C,4BCxDA,MAAME,GAAkBV,GAAkBW,GAAAA,GACpCC,GAAkBZ,GAAkBa,GAAAA,GAsI1C,IAAevxB,EAAAA,EAAAA,KACZ1qE,IACC,MAAMsoC,GAAQspC,EAAAA,EAAAA,KAAY5xE,GACpBk8F,GAAkBC,EAAAA,EAAAA,KAAsBn8F,GAE9C,MAAO,CACLsoC,QACA8zD,aAAcp8F,EAAOyP,YAAYC,aACjCwsF,kBACD,GATL,EApHyCG,EACvC9sC,QACA+sC,sBACAC,oBACAx6F,QACAs0F,cACAmG,cACAC,eACAL,eACAF,kBACA5zD,YAEA,MAAM,kBAAEo0D,IAAsBz0E,EAAAA,EAAAA,OAEtBziB,SAAS,UAAEuN,IAAgBw8C,EAAMu8B,YAEnC6Q,EAAaptC,EAAMw8B,YAAch5E,EAAWL,cAAc7Q,OAAS0tD,EAAMr/C,SAASrO,OAElF+6F,GAAuB3uB,EAAAA,GAAAA,IAAiBp3D,IAC5C4lF,EAAaltC,EAAMu8B,YAAYxpF,GAAIuU,EAAM,IAGrCgmF,GAA0B5uB,EAAAA,GAAAA,IAAiB9mE,IAC/Cs1F,EAAat1F,EAAU,IAGnB21F,GAAqB7uB,EAAAA,GAAAA,IAAiB9mE,IAC1Cu1F,EAAkB,CAAEt7F,OAAQmuD,EAAMu8B,YAAY1qF,OAAQ+F,aAAY,IAG9D+I,GAAWw5D,EAAAA,GAAAA,KAAQ,IACnBna,EAAMw8B,YACDx8B,EAAMu8B,YAAYtmF,QAAQuN,UAAWL,cAAcjE,KAAI,IAAM8gD,EAAMu8B,cAGrEv8B,EAAMr/C,UACZ,CAACq/C,KAoEI9uD,MAAOs8F,EAAgB/O,OAAQgP,GAAoBR,EAAY7H,eAEvE,OACEltB,GAAAA,GAAAC,cAAA,OACEr5C,UAAU,QACV4/D,MAAQ,UAAS8O,gBAA6BC,QAE7C9sF,EAASzB,KAzEd,SAA4BzN,EAAqB6V,GAC/C,MAAMomF,EAAqB1tC,EAAMw8B,YAAc/qF,EAAQwE,QAAQuN,WAAWL,cAAcmE,QAASrN,EAC3F0zF,EAAqBD,GAAsB,cAAeA,EAC5DA,EAAqBA,GAAoBv3F,MACvCy3F,EAAqBF,GAAsB,cAAeA,EAC5DA,EAAqBA,GAAoBt3F,MACvCD,EAAQw3F,IAAsBE,EAAAA,EAAAA,KAAgBp8F,GAC9C2E,EAAQw3F,IAAsBr3F,EAAAA,EAAAA,KAAkB9E,GAAS2E,MAEzD03F,EAAajB,GAAar4F,EAAAA,EAAAA,IAAc/C,IACxCs8F,EAAiBD,GAAY1lF,UAC7B,WAAEi4E,EAAU,MAAEC,GAAU2M,EAAY7M,OAAO94E,GAG3C0mF,GAAcC,EAAAA,EAAAA,MAAuBnyF,EAAAA,EAAAA,MAAarK,GAClDy8F,GAAcC,EAAAA,EAAAA,MAAuBryF,EAAAA,EAAAA,MAAarK,GAExD,GAAI0E,EAAO,CACT,MAAMi4F,EAAuBpB,IAE1Bx6F,EAAQ8U,IAAU8lF,EAAa,EAAIpkF,QAAQs3E,EAAQX,GAAc5gB,MAAQuhB,EAAQX,GAAcG,SAGlG,OACE5nB,GAAAA,GAAAC,cAACo0B,GAAe,CACdx5F,GAAK,gBAAcs7F,EAAAA,EAAAA,KAAiB58F,EAAQsB,GAAIitD,EAAMw8B,YAAcl1E,OAAQrN,KAC5E9D,MAAOA,EACP3D,MAAOA,EACP03F,8BAA+B6C,EAC/BiB,YAAaA,EACbI,qBAAsBA,EACtBL,eAAgBA,EAChB1N,WAAYA,EACZyG,YAAaA,EACb/b,SAAU/qB,EAAMw8B,YAAcl1E,EAAQ7V,EAAQsB,GAC9CunE,QAASta,EAAMw8B,YAAc6Q,EAAuBC,EACpDgB,eAAgBf,EAChBgB,cAAmC,yBAApBp4F,EAAMoN,YAAwCirF,EAAAA,EAAAA,KAAiB7B,EAAiBx2F,GAC/F4iC,MAAOA,EACPizD,iBAAkBhsC,EAAMw8B,aAG9B,CAAO,GAAIpmF,EACT,OACE8hE,GAAAA,GAAAC,cAACs0B,GAAe,CACd15F,GAAK,gBAAcs7F,EAAAA,EAAAA,KAAiB58F,EAAQsB,MAC5CqD,MAAOA,EACP8zF,8BAA+B6C,EAC/BiB,YAAaA,EACbE,YAAaA,EACbH,eAAgBA,EAChB1N,WAAYA,EACZyG,YAAaA,EACb/b,SAAU/qB,EAAMw8B,YAAcl1E,EAAQ7V,EAAQsB,GAC9CunE,QAASta,EAAMw8B,YAAc6Q,EAAuBC,EACpDgB,eAAgBf,EAChBgB,cAAmC,yBAApBn4F,EAAMmN,YAAwCirF,EAAAA,EAAAA,KAAiB7B,EAAiBv2F,GAC/F2iC,MAAOA,EACPizD,iBAAkBhsC,EAAMw8B,aAMhC,IAUQ,I,gBCpJV,MAAMiS,GAAO,EAAIt+F,EAAAA,EAKF,SAASu+F,GACtB78F,EACA+F,EACA+2F,EACArwF,EACA9L,EACA2L,EACAywF,GAEA,MAAM,0BACJC,EAAyB,qBAAEC,EAAoB,6BAAEC,IAC/Cr2E,EAAAA,EAAAA,MAGEmkD,GAAMD,EAAAA,GAAAA,IAAuB,MAG7BoyB,GAAWpyB,EAAAA,GAAAA,IAAqC,MAEhDqyB,GAAiBlR,EAAAA,GAAAA,GAAS4Q,EAAW,WAAUA,SAAY10F,GAAY00F,GAEvE/wC,EAAOgxC,GAAiBH,GACxB/P,GAAQC,EAAAA,GAAAA,GAAY,UAAS/gC,MAAW,WAAUA,MAAUz/C,IAAUq4C,EAAAA,IAAe,mBAErF/I,GAAemvB,EAAAA,GAAAA,SAA6B3iE,GAC5Ci1F,GAAsBtyB,EAAAA,GAAAA,SAA2B3iE,GACjDk1F,GAAuBzwB,EAAAA,GAAAA,IAAgB,KACzB7B,EAAI79C,UAItB8vE,EAAqB,CACnBj9F,OAAQA,EACR+F,UAAWA,EACXuG,MAAOA,EACPsvC,aAAcA,EAAazuB,UAE7BkwE,EAAoBlwE,aAAU/kB,EAC9BwzC,EAAazuB,aAAU/kB,EAAS,IAG5Bm1F,GAAO1wB,EAAAA,GAAAA,IAAgB,KAC3B,MAAM2wB,EAAQL,EAAShwE,QACnBiwE,IACEI,IACFA,EAAMvyE,QACNuyE,EAAMC,UAERN,EAAShwE,QAAU,IAAIuwE,MACvBP,EAAShwE,QAAQ4/D,IAAMqQ,GACvBO,EAAAA,GAAAA,GAASR,EAAShwE,SAClBgwE,EAAShwE,QAAQygD,iBAAiB,SAAS,KACzCuvB,EAAShwE,aAAU/kB,CAAS,GAC3B,CAAEw1F,MAAM,IACb,IAGI5G,GAAcnqB,EAAAA,GAAAA,IAAgB,KAClC0wB,IAEA,MAAMnU,EAAYpe,EAAI79C,QAEtB,KAAK7gB,GAAU88E,GAAcrjF,GAAc/F,GACzC,OAGF,MAAM,EAAEnB,EAAC,EAAE08C,GAAM6tC,EAAUoN,wBAE3BwG,EAA0B,CACxB1wF,MAAOA,EACPzN,IACA08C,IACAC,UAAWuQ,EACXtQ,YAAa96C,IAGVi7C,EAAazuB,UAChByuB,EAAazuB,QAAU,GACvBkwE,EAAoBlwE,QAAU0wE,YAAYv8F,MAC1C0I,WAAWszF,EAnFc,MAsF3B1hD,EAAazuB,QAAQ7iB,KAAK+yF,EAAoBlwE,SACzC0wE,YAAYv8F,MAAQ+7F,EAAoBlwE,SAtF9B,IACE,EAsFA,IAiCnB,OA7BAg6C,EAAAA,GAAAA,KAAU,KACR,MAAMiiB,EAAYpe,EAAI79C,QAEjBi8D,GAAc38E,GAEnBA,EAAwB3L,SAAQ,EAC9BI,KACAs6C,YACAz1C,UAAW+3F,MAEX,GAAItiD,GAAaz1C,IAAc+3F,EAC7B,OAGF,MAAM,EAAEj/F,EAAC,EAAE08C,GAAM6tC,EAAUoN,wBAE3B0G,EAA6B,CAC3Bh8F,KACAlB,OAAQA,EACRo7C,SAAU9uC,EACVkvC,UAAWuQ,EACXltD,IACA08C,IACAE,YAAa96C,IAEf48F,GAAM,GACN,GACD,CAAC9wF,EAAyBzM,EAAQsM,EAAO3L,EAAOoF,EAAWw3F,EAAML,EAA8BnxC,IAE3F,CACLif,MACAjf,OACA8gC,QACAmK,cAEJ,CCpGA,MAsCA,IAAelwB,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KAAqB,CAAC1qE,GAAUsiC,gBAAe68D,kBACjE,MAAMv5F,EAAU5F,EAAOyiB,aAAavZ,KAAKo5B,GAEzC,MAAO,CACL18B,UACA02C,OAAQ12C,GAAS8H,OAASyxF,GAAcC,EAAAA,EAAAA,KAA0Bp/F,EAAQ4F,EAAQ8H,YAASlE,EAC3F00F,QAASt4F,GAAS8H,QAAS2xF,EAAAA,EAAAA,KAAyBr/F,EAAQ4F,EAAQ8H,OACpE4xF,SAASC,EAAAA,EAAAA,KAA4Bv/F,GACtC,GARiB0qE,EAtCmC80B,EACrDz9F,QACAugC,gBACAn7B,YACA/F,SACAyM,0BACAjI,UACA02C,SACA4hD,UACAoB,SACAhD,0BAEA,MAAM,IACJlwB,EAAG,KACHjf,EAAI,MACJ8gC,EAAK,YACLmK,GACE6F,GACF78F,EAAQ+F,EAAW+2F,EAASrwF,EAAyB9L,EAAOu6C,GAAQ5uC,OAAO+xF,EAAAA,GAAAA,IAAmB,IAGhG,OACEh4B,GAAAA,GAAAC,cAACiP,GAAAA,EAAW,CACVvK,IAAKA,EACL5pD,WAAY8f,EACZjU,WAAWg7C,EAAAA,GAAAA,GAAe,4BAA6BzjE,GAAStD,KAAOo9F,EAAAA,IAAmB,sBAC1FzR,MAAOA,EACP9gC,KAAMA,EACNwyC,OAAK,EACLL,OAAQA,EACRM,qBAAmB,EACnBjnF,sBAAuBJ,QAAQ+jC,GAAUzuC,GAAyBhM,QAClE43F,8BAA+B6C,EAC/BzyB,QAASuuB,GACT,K,gBCnCN,MAsCA,IAAelwB,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KAAqB,CAAC1qE,GAAU0N,QAAOyxF,kBAClD,CACLv5F,SAASi6F,EAAAA,EAAAA,KAAoB7/F,EAAQ0N,GACrC4uC,OAAQ6iD,GAAcC,EAAAA,EAAAA,KAA0Bp/F,EAAQ0N,QAASlE,EACjE00F,SAASmB,EAAAA,EAAAA,KAAyBr/F,EAAQ0N,MAJ1Bg9D,EApC6Bo1B,EAC/C/9F,QACAu6F,sBACAyD,mBACA54F,YACA/F,SACAyM,0BACAjI,UACA02C,SACA4hD,cAEA,MAAM,IACJ9xB,EAAG,KACHjf,EAAI,MACJ8gC,EAAK,YACLmK,GACE6F,GAAiB78F,EAAQ+F,EAAW+2F,EAASrwF,EAAyB9L,EAAOu6C,GAAQ5uC,OACnFgsF,GAAiBC,EAAAA,GAAAA,IAAkBvtB,EAAKkwB,GAE9C,OACE70B,GAAAA,GAAAC,cAACs4B,GAAAA,EAAuB,CACtBp6F,QAASA,EACTunD,KAAMA,EACN8yC,QAzBU,EA0BVC,QAASxG,EACTyG,aAAcJ,EACdpB,KAAMjF,EACN0G,aAAW,EACXh0B,IAAKA,EACL/9C,WAAWg7C,EAAAA,GAAAA,GAAe,4BAA6BzjE,GAAStD,KAAOo9F,EAAAA,IAAmB,sBAC1FzR,MAAOA,EACPpkB,QAASuuB,GACT,K,4BC/CN,MAkHA,IAAelwB,EAAAA,GAAAA,KAhHqBm4B,EAClCC,gBACAz5F,aACA05F,WACAvxE,gBAEA,MAAM,WAAE3I,IAAe4B,EAAAA,EAAAA,MAEjBu4E,GAAsBC,EAAAA,GAAAA,GAAkB,CAACzxE,GAVvB,KAYlBi6B,GAAOkgB,EAAAA,GAAAA,MACP,gBACJ1b,EAAe,OAAErsD,EAAM,cAAE0H,EAAa,cAAEzB,EAAa,uBAAE2I,EAAsB,iBAAE0wF,EAAgB,gBAAEC,GAC/F95F,EAEEuxF,GAAcnqB,EAAAA,GAAAA,IAAgB,KAClC5nD,EAAW,CACTu6E,YAAY,EAAMx/F,SAAQqsD,kBAAiBkzC,mBAC3C,IAGEE,GAAiBn3B,EAAAA,GAAAA,KAAQ,KAC7B,IAAKg3B,GAAkB7+F,OACrB,OAIF,MAAM7B,GAASqL,EAAAA,EAAAA,MAEf,OAAOq1F,EAAiBjyF,KAAKzM,IACpBsd,EAAAA,EAAAA,KAAWtf,EAAQgC,KACzBF,OAAOyW,QAAQ,GACjB,CAACmoF,IAEJ,QAAsBl3F,IAAlBV,EACF,OAmBF,MAAMg4F,EAAYvoF,QAAQvI,GAA0B3I,GAAiB2I,EAAyB3I,GAExF05F,EAAej4F,EAAiBmgD,EAAK,gBAAiB,wBAAoBz/C,EAAWV,GACxFiS,MAAM,KACNtM,KAAKo0C,GACU,mBAANA,EAAyB4kB,GAAAA,GAAAC,cAACs5B,GAAAA,EAAe,CAAC3yF,MAAMo6D,EAAAA,GAAAA,IAAqB3/D,KAAqB+5C,SAElGr5C,EAEJ,OACEi+D,GAAAA,GAAAC,cAAA,OACE,YAAUe,EAAAA,GAAAA,IAAqB3/D,GAC/BulB,WAAWg7C,EAAAA,GAAAA,GACT,gBACAy3B,GAAa,aACbP,GAAY,WACZD,GAAiB,6BACjBtxE,GAAa,WAEf86C,IAAK7gB,EAAK8gB,MAAQ,MAAQ,MAC1BF,QAASuuB,EACT6I,KAAK,SACL92B,SAAU,GAEV1C,GAAAA,GAAAC,cAAA,KACEr5C,WAAWg7C,EAAAA,GAAAA,GACT,yDACAr6C,GAAawxE,GAAuB,wBAEtC,oBAEAK,GAAgBh/F,QAAU4lE,GAAAA,GAAAC,cAAA,KAAGr5C,UAAU,qBAAqB,mBA7C9D9V,QAAQsoF,GAAgBh/F,SACtB4lE,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,kBAAkBy7C,IAAK7gB,EAAK8gB,MAAQ,MAAQ,OACxD82B,EAAgBpyF,KAAK8P,GACpBkpD,GAAAA,GAAAC,cAACw5B,GAAAA,EAAM,CACL7xF,IAAKkP,EAAKjc,GACV6qD,KAAK,QACL5uC,KAAMA,OAyCdkpD,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,QAAQy7C,IAAI,QACxBhhE,EAAgBi4F,EAAe93C,EAAK,kBAEvCwe,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,uBACZW,GACCy4C,GAAAA,GAAAC,cAAC+J,GAAAA,EAAO,CACNpjD,WAAWg7C,EAAAA,GAAAA,GACT,yBACCm3B,GAAuB,wBAE1Bv2B,MAAOq2B,EAAgB,QAAU,SAGrC74B,GAAAA,GAAAC,cAAA,KACEr5C,WAAWg7C,EAAAA,GAAAA,GACT,yCACAr6C,GAAawxE,GAAuB,wBAEtC,oBAGA,I,4BCxIV,SAAmM,WC+GnM,SAASW,GAAex2D,GACtB,OAAIA,EAAQjL,WAAaiL,EAAQlL,SACvB,GAAEkL,EAAQjL,aAAaiL,EAAQlL,WAGrCkL,EAAQjL,UACHiL,EAAQjL,UAGbiL,EAAQlL,SACHkL,EAAQlL,SAGV,EACT,CAEA,UAAeirC,EAAAA,EAAAA,KAAqB,CAAC1qE,GAAU2qC,cAC7C,MACEy2D,aAAeC,WAAYC,IACzBthG,EAGJ,MAAO,CACLqU,MAHWC,EAAAA,EAAAA,KAAWtU,EAAQ2qC,EAAQzuB,QAItColF,gBACD,GATH,EAhG2CC,EACzC52D,UAASt2B,OAAMitF,gBAAe9H,mBAE9B,MAAMvwC,GAAOkgB,EAAAA,GAAAA,MACP,SACJzrD,EAAQ,qBAAE8jF,EAAoB,iBAAEpyF,EAAgB,iBAAE+4B,IAChDlgB,EAAAA,EAAAA,OAEE,YAAEyY,EAAW,OAAExkB,GAAWyuB,EAC1B82D,EAXwB,MAWTvlF,EACfwlF,EAAgBD,GAAgBptF,IAAQstF,EAAAA,EAAAA,KAAiBttF,GAEzDutF,GAAiB3zB,EAAAA,GAAAA,IAAgB,KACrCvwD,EAAS,CAAEpb,GAAI4Z,GAAS,IAGpB2lF,GAAmB5zB,EAAAA,GAAAA,IAAgB,KACvCuzB,EAAqB,CAAEtlF,OAAQ7H,GAAM/R,IAAK,IAGtC81F,GAAcnqB,EAAAA,GAAAA,IAAgB,KAC9B55D,EACF8zB,EAAiB,CAAE7lC,GAAI4Z,MAEvBwrB,EAAAA,EAAAA,IAAoBhH,GACpBtxB,EAAiB,CAAEpO,QAASioD,EAAK,iBACnC,IAGF,OACEwe,GAAAA,GAAAC,cAACo6B,GAAAA,EAAgB,CACftI,aAAcA,EACdj7E,KAAMlK,EACN0tF,mBDhEuR,WCiEvR1zE,UDjEiB,YCmEjBo5C,GAAAA,GAAAC,cAAA,OAAKr5C,UDnEmE,WCmElCw7C,QAASuuB,GAC7C3wB,GAAAA,GAAAC,cAACw5B,GAAAA,EAAM,CAAC/zC,KAAK,SAAS5uC,KAAMlK,EAAMhG,KAAM8yF,GAAex2D,KACvD88B,GAAAA,GAAAC,cAAA,OAAKr5C,UDrEmF,YCsEtFo5C,GAAAA,GAAAC,cAAA,OAAKr5C,UDtEmG,YCuErGha,GAAO+H,EAAAA,EAAAA,KAAgB/H,GAAQ8sF,GAAex2D,IAEjD88B,GAAAA,GAAAC,cAAA,OAAKr5C,UDzEsH,aC0ExH2zE,EAAAA,GAAAA,IAA0BV,EAAe5gE,MAI/C+gE,GACCh6B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAkC,SAAA,KACElC,GAAAA,GAAAC,cAAA,OAAKr5C,UDhF2I,aCiFhJo5C,GAAAA,GAAAC,cAAA,OAAKr5C,UDjFgK,YCkFnKo5C,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLi4B,QAAM,EACNh4B,MAAM,cACNyM,QAAM,EACNvpB,KAAK,OACL0c,QAAS+3B,EACTvzE,UAAWs8D,IAEV1hC,EAAK,yBAEPy4C,GACCj6B,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLi4B,QAAM,EACNh4B,MAAM,cACNyM,QAAM,EACNvpB,KAAK,OACL0c,QAASg4B,EACTxzE,UAAWs8D,IAEV1hC,EAAK,uBAMC,I,oDC3GvB,MCqBMi5C,GAAQ,CACZj4B,MAAO,GAiET,IAAe/B,EAAAA,GAAAA,KA7DGi6B,EAAGp5E,YAAWq5E,uBAC9B,MAAMn5C,GAAOkgB,EAAAA,GAAAA,KAGPiD,GAAMD,EAAAA,GAAAA,IAAuB,MAE7Bk2B,GAAYl2B,EAAAA,GAAAA,IAAuB,OACnC,YACJm2B,EAAW,cAAEC,EAAa,eAAEC,IAC1BC,EAAAA,GAAAA,GAAoBr2B,EAXR,EAWwBi2B,GAElCK,GAAmBh5B,EAAAA,GAAAA,KAAQ,KAC/B,GAAK3gD,EAAU45E,aAAgB15C,EAAKxa,KAGpC,OADqB,IAAI7O,KAAKgjE,aAAa,CAAC35C,EAAKxa,MAAO,CAAErsC,KAAM,WAC5CygG,GAAG95E,EAAU45E,YAAY,GAC5C,CAAC55E,EAAU45E,YAAa15C,EAAKxa,OAE1Bq0D,GAAaV,GAAoBE,EAEjCS,GAAe90B,EAAAA,GAAAA,IAAgB,KACnCu0B,GAAe,EAAM,IAGjBQ,GAAe/0B,EAAAA,GAAAA,IAAgB,KACnCu0B,GAAgBS,IAAUA,GAAK,IAGjC,GAAKl6E,EAAU1a,KAIf,OACEo5D,GAAAA,GAAAC,cAACo6B,GAAAA,EAAgB,CAACoB,UAAWhB,GAAO7zE,UD3DjB,WC2DyCw7C,QAASi5B,EAAYC,OAAev5F,GAC9Fi+D,GAAAA,GAAAC,cAAA,OACE0E,IAAKi2B,EACLh0E,WAAWg7C,EAAAA,GAAAA,GD9D2I,WC8DtGi5B,GD9D2E,aCgE3H76B,GAAAA,GAAAC,cAAA,OAAKr5C,UDhE6B,YCgEH46B,EAAK,cACpCwe,GAAAA,GAAAC,cAAA,OAAK0E,IAAKA,EAAK/9C,UDjEwC,aCkEpD80E,EAAAA,GAAAA,GAAuB,CACtB90F,KAAM0a,EAAU1a,KAAKA,KACrB8L,SAAU4O,EAAU1a,KAAK8L,YAG7BstD,GAAAA,GAAAC,cAAC07B,GAAAA,EAAS,CAAC/0E,UDvEmE,aCwE9Eo5C,GAAAA,GAAAC,cAAA,OAAKr5C,UDxE+F,YCwElE46B,EAAK,kBAAmBy5C,KAE3DH,GACC96B,GAAAA,GAAAC,cAAA,OACEr5C,WAAWg7C,EAAAA,GAAAA,GD5EmK,YC4E9H+4B,GD5EqJ,YC6ErMv4B,QAAUu4B,OAAkC54F,EAAfw5F,EAC7B,kBAEAv7B,GAAAA,GAAAC,cAACkzB,GAAAA,EAAI,CAACntD,KAAM60D,EAAc,OAAS,QAGtB,ICDvB,IAAep6B,EAAAA,GAAAA,KA3DYm7B,EACzBriG,UACAsiG,uBAEA,MAAM,qBAAEC,IAAyBt7E,EAAAA,EAAAA,MAC3Bu7E,EAAOxiG,EAAQwE,QAAQg+F,MACvB,MACJl0F,EAAK,YAAE8O,GACLolF,EAEEC,GAAYC,EAAAA,EAAAA,KAAwBF,GACpCG,GAAYC,EAAAA,EAAAA,IAAwBJ,GACpCK,GAAevW,EAAAA,GAAAA,GAASmW,GAAYH,GACpCQ,GAAexW,EAAAA,GAAAA,GAASqW,GAAYL,GAU1C,OACE77B,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,QACbo5C,GAAAA,GAAAC,cAAA,OACEr5C,UAAU,UACV4/D,MAAQ,8BACRpkB,QAbkBk6B,KACtBR,EAAqB,CACnBniG,OAAQJ,EAAQI,OAChB+F,UAAWnG,EAAQsB,GACnBmlC,OAAQzmC,EAAQorF,cAAe,GAAG,IAClC,IAUIyX,IAAiBC,GACjBr8B,GAAAA,GAAAC,cAACinB,GAAAA,EAAQ,CAACtgE,UAAU,6BAErBw1E,GACCp8B,GAAAA,GAAAC,cAAA,OACEr5C,UAAU,kBACV8/D,IAAK0V,EACLzV,IAAK9+E,EACLorF,WAAW,IAGdoJ,GACCr8B,GAAAA,GAAAC,cAAA,SACEr5C,UAAU,kBACVqgE,aAAW,EACXD,OAAK,EACLD,yBAAuB,EACvBwV,UAAQ,EACRzV,MAAI,EACJJ,IAAK2V,KAIXr8B,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,SAAS/e,KACtB7B,EAAAA,EAAAA,KAAezM,IAAYymE,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,eAAejQ,GACvD,I,oDC9EV,SAA0C,WAA1C,GAAkI,WAAlI,GAA2J,WAA3J,GAA8K,WAA9K,GAAgM,WCwWhM,IAAe8pD,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAAC1qE,GAAUgB,cACT,MAAM,SAAEijG,GAAajjG,EAAQwE,QACvBpC,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQgB,EAAQI,QAMxC,MAAO,CACLgC,OACAglC,QAPa3gC,EAAAA,EAAAA,KAAWzH,EAAQikG,GAAUC,WAAW,MAClDC,EAAAA,EAAAA,KAAsBnkG,EAAQgB,IAAYoC,EAO7CghG,YALcH,IAAYI,EAAAA,EAAAA,KAA6BrkG,EAAQikG,EAASK,QAMxEC,uBAAuBhF,EAAAA,EAAAA,KAA4Bv/F,GACpD,GAde0qE,EAnTH85B,EACfphG,OACAglC,SACApnC,UACAujG,wBACAH,kBAEA,MAAM,SAAE1mF,IAAauK,EAAAA,EAAAA,MAEfw8E,GAAgBt4B,EAAAA,GAAAA,KAAO,IACtBu4B,EAAcC,IAAmBz7B,EAAAA,GAAAA,MAElCjgB,GAAOkgB,EAAAA,GAAAA,MACP,SAAE86B,EAAQ,gBAAEW,GAAoB5jG,EAAQwE,QACxCq/F,EAAYtsF,QAAQqsF,IACpB,OACJN,EAAM,UAAE/qD,EAAS,iBAAED,EAAgB,MAAExI,GAClCmzD,GAAYW,EAEX7iG,GAAQ+iG,EAAAA,EAAAA,KAAa9jG,GAErB+jG,EAAWF,EAAYD,EAAgBI,aAAef,EAAUc,SAEhEE,GAAW3lE,EAAAA,GAAAA,MAAkBia,EAE7B6nD,GAAc13B,EAAAA,GAAAA,KAAQ,KAC1B,GAAIm7B,EAAW,OACf,MAAMK,EAAkB,IAAItlE,KAAKgjE,aAAa,CAAC35C,EAAKxa,KAAO,MAAM3sC,OAAOyW,SAAU,CAAEnW,KAAM,WAC1F,OAAO6hG,GAAU5qD,WAAW5qC,KAAKk0F,GAC9B,IAAEwC,EAAAA,GAAAA,IAAWxC,MAAsBuC,EAAgBrC,GAAGF,OACtDrmF,KAAK,KAAK,GACZ,CAAC2nF,EAAUY,EAAW57C,EAAKxa,OAExB22D,GAAkBn3B,EAAAA,GAAAA,IAAiB97D,IACvCuL,EAAS,CAAEpb,GAAI6P,GAAY,IAGvBkzF,GAAsBp3B,EAAAA,GAAAA,IAAgBj6D,UAC1C,GAAIywF,EAAcl2E,QAAS,OAE3Bk2E,EAAcl2E,SAAU,EACxB,MAAM3Y,QAAehB,EAAAA,EAAAA,IAAQ,oBAAqB,CAChD2J,KAAMnb,EACN+D,UAAWnG,EAAQsB,KAErBqiG,EAAgB/uF,GAChB6uF,EAAcl2E,SAAU,CAAK,IAGzB+2E,GAAkBr3B,EAAAA,GAAAA,IAAgB,KACtC02B,OAAgBn7F,EAAU,IAGtB+7F,GAAoB77B,EAAAA,GAAAA,KAAQ,KAChC,GAAKg7B,EACL,OAAOz7C,EAA2B,YAAtBy7C,EAAatiG,KAAqB,sBAAwB,wBAAwB,GAC7F,CAACsiG,EAAcz7C,IA8MlB,OACEwe,GAAAA,GAAAC,cAAA,OAAKr5C,UD5Tc,YC6TjBo5C,GAAAA,GAAAC,cAAA,OAAKr5C,WAAWg7C,EAAAA,GAAAA,GD7TyC,WC6TVw7B,GD7TqC,aC8TjFA,EACCp9B,GAAAA,GAAAC,cAAC89B,GAAAA,EAAuB,CACtBr4C,KA7QgB,IA8QhBs4C,OAAQC,GAAAA,EAAeC,YACvBC,gBAAc,EACdC,QAAM,IAGRp+B,GAAAA,GAAAC,cAACs4B,GAAAA,EAAuB,CACtBp6F,QAASw+F,EACTzF,KAAM4F,GAAyBU,EAC/BY,QAAM,EACND,gBAAc,EACdz4C,KAzRc,MA4RlBsa,GAAAA,GAAAC,cAAA,QAAMr5C,UD9U+F,YC+UjG,IAAG02E,MAGRF,EAtJL,SAA0ChyF,GACxC,MAAMizF,EAAYjzF,EAAMizF,UACxB,OACEr+B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAkC,SAAA,KACElC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWs8D,IACdljB,GAAAA,GAAAC,cAAA,UAAQr5C,UAAWs8D,KAChBkE,EAAAA,GAAAA,GAAW5lC,EAAK,6CAA8C,CAAC,qBAElEwe,GAAAA,GAAAC,cAAA,KAAGr5C,UAAWs8D,KACXkE,EAAAA,GAAAA,GAAW5lC,EAAK,yCAA0C68C,EAAUjkG,QAAS,CAAC,qBAEjF4lE,GAAAA,GAAAC,cAAA,UAAQr5C,UAAWs8D,IAChB1hC,EAAK,+BAERwe,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWs8D,IACbmb,EAAUr3F,KAAKzM,GACdylE,GAAAA,GAAAC,cAACwS,GAAAA,EAAQ,CACPl4E,OAAQA,EACR+jG,eAAa,EACb5rB,OAAK,EACL6rB,gBAAiBjkG,EACjBssB,UAAWs8D,GACXrQ,SAAUt4E,EACV6nE,QAASu7B,QAKjB39B,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWs8D,IACdljB,GAAAA,GAAAC,cAAA,KAAGr5C,UAAWs8D,IACX1hC,EAAK,uDAKhB,CAmHiBg9C,CAAiCrB,GAnOlD,SAAmC/xF,GACjC,MAAMqxF,EAAarxF,EAAMqxF,WACzB,OACEz8B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAkC,SAAA,KACElC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWs8D,IACdljB,GAAAA,GAAAC,cAAA,UAAQr5C,UAAWs8D,KAChBkE,EAAAA,GAAAA,GAAW5lC,EAAK,0BAA2B,CAAC,qBAE9C3P,GACCmuB,GAAAA,GAAAC,cAAAD,GAAAA,GAAAkC,SAAA,KACElC,GAAAA,GAAAC,cAAA,KAAGr5C,UAAWs8D,KACXkE,EAAAA,GAAAA,GACC5lC,EAAK,4BAA6B,CAAC87C,EAAUzrD,QAAmB9vC,EAAWu7F,GAC3E,CAAC,qBAGLt9B,GAAAA,GAAAC,cAAC07B,GAAAA,EAAS,KAAEn6C,EAAK,oCAGrBwe,GAAAA,GAAAC,cAAA,KAAGr5C,UAAWs8D,IACX3pF,GAASwE,SAASy+F,UAAUnzD,MAC3B22B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAkC,SAAA,MACGklB,EAAAA,GAAAA,GACC5lC,EAAK,wCAAyCA,EAAK,QAASjoD,GAASwE,SAASy+F,UAAUnzD,QACxF,CAAC,oBAEH22B,GAAAA,GAAAC,cAAA,YACCmnB,EAAAA,GAAAA,GAAW5lC,EAAK,eAAgB87C,GAAW,CAAC,qBAG/Ct9B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAkC,SAAA,MACGklB,EAAAA,GAAAA,GAAW5lC,EAAK,mCAAoC87C,GAAW,CAAC,oBACjEt9B,GAAAA,GAAAC,cAAA,YACCmnB,EAAAA,GAAAA,GAAW5lC,EACV,4BACAA,EAAK,4BAA6Bq7C,IACjC,CAAC,uBAKZ78B,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWs8D,IACdljB,GAAAA,GAAAC,cAAA,UAAQr5C,UAAWs8D,KAChBkE,EAAAA,GAAAA,GAAW5lC,EAAK,mCAAoC,CAAC,qBAExDwe,GAAAA,GAAAC,cAAA,KAAGr5C,UAAWs8D,KACXkE,EAAAA,GAAAA,GAAW5lC,EAAK,mCAAoCi7C,EAAWriG,QAAS,CAAC,qBAE5E4lE,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWs8D,IACbuZ,EAAWz1F,KAAKzM,GACfylE,GAAAA,GAAAC,cAACwS,GAAAA,EAAQ,CACPl4E,OAAQA,EACR+jG,eAAa,EACb5rB,OAAK,EACL6rB,gBAAiBjkG,EACjBssB,UAAWs8D,GACXrQ,SAAUt4E,EACV6nE,QAASu7B,OAIdhE,GACC35B,GAAAA,GAAAC,cAAA,aAAOmnB,EAAAA,GAAAA,GAAW5lC,EAAK,sCAAuCm4C,MAGlE35B,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWs8D,IACdljB,GAAAA,GAAAC,cAAA,UAAQr5C,UAAWs8D,KAChBkE,EAAAA,GAAAA,GAAW5lC,EAAK,uBAAwB,CAAC,qBAE5Cwe,GAAAA,GAAAC,cAAA,KAAGr5C,UAAWs8D,KACXub,EAAAA,GAAAA,IAAmC,IAAZ3sD,EAAkB0P,EAAKxa,MAAM,KAK/D,CAwJqE03D,CAA0BlC,GAC3Fx8B,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL37C,UDpV4M,WCqV5M47C,MAAM,WACN9c,KAAK,UACL0c,QAASw7B,GAERp8C,EAAK,sBAERwe,GAAAA,GAAAC,cAAC0+B,GAAAA,EAAa,CACZ9wD,OAAQ/8B,QAAQmsF,GAChB2B,eAAa,EACb/2F,MAAOi2F,EACPe,eAAgBhB,EAChB96B,QAAS86B,GA/Hf,WACE,IAAKl9D,IAAWs8D,EAAc,OAC9B,MAAM6B,EAAsC,YAAtB7B,EAAatiG,KAE7BokG,GAAY30E,EAAAA,EAAAA,IAAcuW,IAAU8uB,EAAAA,EAAAA,KAAajO,EAAM7gB,IAAUhsB,EAAAA,EAAAA,KAAgBgsB,GACjFq+D,GAAUC,EAAAA,GAAAA,GAAiBz9C,EAAkB,IAAZ1P,GACjCotD,EAAqB1C,GAAUC,WAAaD,EAASC,WAAWriG,OAAS,EAAI,EAC7E+kG,EAAsB39C,EAAK,mCAAoC09C,GAC/DE,EAAYF,EAAqB,EAEjCG,EAAWP,EAAgB,oCAAsC,iCACjEQ,EAAmBR,EAAgBt9C,EAAK,4BAA6Bq7C,GAAUr7C,EAAK,QAASnY,EAAO,KACpGk2D,EAAiB/9C,EAAK69C,EAAU,CAACN,EAAWzB,EAAUgC,QAAmBv9F,EAAWu7F,GAEpFkC,EAAmB3tD,EACrB2P,EAAK,wCAAyC,CAACu9C,EAAWzB,EAAUzrD,QAAmB9vC,EAAWu7F,QAClGv7F,EAEJ,IAAI09F,EAAY,GAEdA,EADEX,EACUM,EAAY,8CAAgD,uCAE5DA,EAAY,2CAA6C,oCAEvE,IAAIM,EAAkBl+C,EAAKi+C,EAAW,CAACT,EAAS1B,EAAUyB,EAAWG,QAAqBn9F,EAAWu7F,GACjGwB,GAAiB7B,EAAa0C,iBAChCD,GAAoB,IAAGl+C,EAAK,kCAAmCy7C,EAAa0C,mBAG9E,IAAIxxF,EAAS,GAET2wF,IAEA3wF,EADE8uF,EAAa2C,WACNp+C,EAAK,qCAELA,EAAKy7C,EAAa4C,SAAW,yBAA2B,8BAIrE,IAAIC,EAAgB,GACpB,GAAIhB,QAEG,GAAI7B,EAAa8C,kBACtBD,EAAgBt+C,EAAK,2CAChB,GAAIy7C,EAAa+C,sBAAuB,CAE7C,MACMC,GADYr8F,EAAAA,EAAAA,MAAYpC,MAAMC,KACHw7F,EAAa+C,uBACxCE,EAAsBD,IAAkBxwC,EAAAA,EAAAA,KAAajO,EAAMy+C,GACjEH,EAAgBt+C,EAAK,mCAAoC0+C,EAC3D,MAAO,GAAIjD,EAAakD,mBAAoB,CAC1C,MAAMA,GAAqBlB,EAAAA,GAAAA,GAAiBz9C,EAAwC,IAAlCy7C,EAAakD,oBAC/DL,EAAgBt+C,EAAK,8BAA+B2+C,EACtD,MACEL,EADS7C,EAAamD,gBACNhB,EACZ59C,EAAK,uCAAwC,CAACu9C,EAAWG,IACzD19C,EAAK,mCAAoCu9C,GAE7BK,EACZ59C,EAAK,sCAAuC,CAACu9C,EAAWI,EAAqBH,IAC7Ex9C,EAAK,kCAAmC,CAACu9C,EAAWC,IAG1D,OACEh/B,GAAAA,GAAAC,cAAAD,GAAAA,GAAAkC,SAAA,KACG/zD,GACC6xD,GAAAA,GAAAC,cAAA,KAAGr5C,UDnS2N,aCoS3NwgE,EAAAA,GAAAA,GAAWj5E,EAAQ,CAAC,qBAGzB6xD,GAAAA,GAAAC,cAAA,UACGmnB,EAAAA,GAAAA,GAAWmY,EAAgB,CAAC,qBAE9BC,GACCx/B,GAAAA,GAAAC,cAAA,UACGmnB,EAAAA,GAAAA,GAAWoY,EAAkB,CAAC,qBAGnCx/B,GAAAA,GAAAC,cAAA,UACGmnB,EAAAA,GAAAA,GAAWsY,EAAiB,CAAC,qBAE/BI,GACC9/B,GAAAA,GAAAC,cAAA,UACGmnB,EAAAA,GAAAA,GAAW0Y,EAAe,CAAC,qBAKtC,CAyCOO,IAEC,K,gBChVV,MA4DA,IAAe5/B,EAAAA,GAAAA,KA5DqB6/B,EAAG/mG,UAAS6oE,cAC9C,MAAM5gB,GAAOkgB,EAAAA,GAAAA,KA2BP6+B,GAAct+B,EAAAA,GAAAA,KAAQ,KAC1B,MAAMu+B,EAAuB,GAI7B,OAHAjnG,EAAQorF,cAAelqF,SAASywF,IAC9BsV,EAAMv8F,KAAKinF,EAAIlkF,KAAKg5B,IAAWygE,EAAAA,GAAAA,GAAyBj/C,EAAMxhB,KAAS,IAElEwgE,CAAK,GACX,CAACh/C,EAAMjoD,EAAQorF,gBAElB,OACE3kB,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,iBACZrtB,EAAQorF,cAAe39E,KAAI,CAACkkF,EAAKztF,IAChCuiE,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,OACZskE,EAAIlkF,KAAI,CAACg5B,EAAQ0gE,IAChB1gC,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL7c,KAAK,OACLupB,QAAM,EACN6pB,SAA0B,gBAAhB94D,EAAOrlC,KAEjBynE,QAASA,IAAMA,EAAQ,CAAEzoE,OAAQJ,EAAQI,OAAQ+F,UAAWnG,EAAQsB,GAAImlC,YAExEggC,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,sBACb25E,EAAY9iG,GAAGijG,IA9CV1gE,KAClB,MAAM,KAAErlC,GAASqlC,EACjB,OAAQrlC,GACN,IAAK,MACH,IAAKgmG,EAAAA,IAAYtyC,KAAKruB,EAAOpjB,KAC3B,OAAOojD,GAAAA,GAAAC,cAACkzB,GAAAA,EAAI,CAACvsE,UAAU,cAAcof,KAAK,gBAE5C,MAEF,IAAK,UACH,OAAOg6B,GAAAA,GAAAC,cAACkzB,GAAAA,EAAI,CAACvsE,UAAU,cAAcof,KAAK,gBAC5C,IAAK,MACL,IAAK,UACH,OAAOg6B,GAAAA,GAAAC,cAACkzB,GAAAA,EAAI,CAACvsE,UAAU,cAAcof,KAAK,SAC5C,IAAK,kBACH,OAAOg6B,GAAAA,GAAAC,cAACkzB,GAAAA,EAAI,CAACvsE,UAAU,cAAcof,KAAK,iBAC5C,IAAK,UACL,IAAK,gBACH,OAAOg6B,GAAAA,GAAAC,cAACkzB,GAAAA,EAAI,CAACvsE,UAAU,cAAcof,KAAK,WAC5C,IAAK,OACH,OAAOg6B,GAAAA,GAAAC,cAACkzB,GAAAA,EAAI,CAACvsE,UAAU,cAAcof,KAAK,SAE9B,EA0BL46D,CAAW5gE,SAKhB,I,4BC7CV,MAkGA,IAAeygC,EAAAA,GAAAA,KAlGeogC,EAC5BtnG,UACA28F,uBACAxH,iBACAsF,aACAnzD,QACAigE,kBAGA,MAAMn8B,GAAMD,EAAAA,GAAAA,IAAuB,MAE7BljB,GAAOkgB,EAAAA,GAAAA,KACPv2D,GAAU41F,EAAAA,EAAAA,KAAkBxnG,IAE5B,MACJsO,EAAK,YACL8O,EAAW,OACX2yB,EAAM,SACNyI,EAAQ,OACRivD,EAAM,MACN/iG,GACEkN,EAEE81F,GAAWpb,EAAAA,GAAAA,IAASqb,EAAAA,EAAAA,KAAmBjjG,IACvCkjG,EAAwBrwF,QAAQgwF,GAChCM,GAAuBC,EAAAA,GAAAA,GAAwBJ,GAAWE,GAC1DzhG,EAAYnG,EAAQsB,IAE1BymG,EAAAA,GAAAA,IAA4B,EAAEC,MAC5B,GAAKrL,GAOL,GAAI+K,EAAU,CACZ,MAAMO,EAAY78B,EAAI79C,QAAS26E,QAAwBC,EAAAA,MACvDC,EAAAA,GAAAA,GAAoBV,GAAU,EAAOvhG,EAAWs0F,EAAYnzD,GAAOxoB,MAAMupF,KACvEC,EAAAA,GAAAA,KAAgB,KACdL,EAAUhb,MAAMsb,YAAY,gBAAiBF,GAC7CJ,EAAU5P,aAAamQ,EAAAA,IAA2B,GAAG,GACrD,GAEN,OAdMR,GACF58B,EAAI79C,QAAS26E,QAAwBC,EAAAA,KAA2BjQ,gBAAgBsQ,EAAAA,IAapF,GACC,CAAC7L,EAAsB+K,EAAUvS,EAAgBsF,EAAYnzD,EAAOnhC,IAEvE,MAAM1G,EAAQ8nG,GAAe7iG,GAAOkqF,YAAYnvF,MAE1CwtF,GAAQC,EAAAA,GAAAA,GACZxoF,GAAOkqF,YAAe,UAASnvF,MAC/BiF,GAAOkqF,YAAe,iBAAgBlqF,EAAMkqF,WAAWnvF,WAAWiF,EAAMkqF,WAAW5B,SACnFz1E,SAAS7S,GAAOkqF,YAAc2Y,IAAiB,UAASA,OAG1D,OACE9gC,GAAAA,GAAAC,cAAA,OACE0E,IAAKA,EACL/9C,UAAU,WAET/e,GACCm4D,GAAAA,GAAAC,cAAA,KAAGr5C,UAAU,UAASwgE,EAAAA,GAAAA,GAAWv/E,IAElC8O,GACCqpD,GAAAA,GAAAC,cAAA,YAAMmnB,EAAAA,GAAAA,GAAWzwE,EAAa,CAAC,QAAS,QAE1CqpD,GAAAA,GAAAC,cAAA,OAAKr5C,UAAY,gBAAc3oB,EAAQ,YAAc,KAClD6S,QAAQ7S,IACP+hE,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,2BACZu6E,GAAyBnhC,GAAAA,GAAAC,cAAA,UAAQ0E,IAAKy8B,EAAsBx6E,UAAU,yBACtEq6E,GACCjhC,GAAAA,GAAAC,cAAA,OACEr5C,UAAU,gBACV8/D,IAAKua,EACLta,IAAI,GACJH,MAAOA,EACPwb,YAAY,YACZ/O,WAAW,KAGbgO,GAAYhjG,GACZ+hE,GAAAA,GAAAC,cAACinB,GAAAA,EAAQ,CACPluF,MAAOA,EACPutF,OAAQtoF,EAAMkqF,YAAY5B,OAC1BY,kBAAgB,KAKxBnnB,GAAAA,GAAAC,cAAA,KAAGr5C,UAAU,qBACVq7E,EAAAA,GAAAA,GAAe34D,EAAQyI,EAAUyP,EAAKxa,KAAM,CAAEk7D,cAAe,0BAC7DlB,GAAUhhC,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,gBAAgB46B,EAAK,yBAGhD,I,gBC7HV,UAAgB,KAAO,WAAW,SAAW,WAAW,IAAM,WAAW,QAAU,YCiFnF,IAAeif,EAAAA,GAAAA,KAxD2B0hC,EACxC5oG,UACA6oG,kBAEA,MAAM,YAAE7hE,EAAW,kBAAE8hE,IAAsB7hF,EAAAA,EAAAA,MACrCghC,GAAOkgB,EAAAA,GAAAA,KACPv2D,GAAU41F,EAAAA,EAAAA,KAAkBxnG,IAE5B,OAAEI,EAAM,GAAEkB,GAAOtB,EAEjB+oG,GAAuB97B,EAAAA,GAAAA,IAAgB,KAC3C67B,EAAkB,CAAE1oG,SAAQ4I,IAAK,CAAC1H,IAAM,KAG1C0nG,EAAAA,GAAAA,GAAYD,EAAsBF,EAhBX,SAgB4CrgG,GAEnE,MAAM,OACJunC,EAAM,SACNyI,EAAQ,cACR9mC,GACEE,GAEE,MACJnS,EAAK,OAAEutF,EAAM,UAAE9nF,EAAS,SAAEq8B,GACxB7vB,EAEE0lF,GAAcnqB,EAAAA,GAAAA,IAAgB,KAClCjmC,EAAY,CACV5lC,KAAM,UACNhB,SACA+F,UAAW7E,EACXkuC,iBAAiB,GACjB,IAGJ,OACEi3B,GAAAA,GAAAC,cAAA,OACEr5C,WAAWg7C,EAAAA,GAAAA,GAAeshB,GAAOsf,KAAM,eACvCpgC,QAASuuB,GAET3wB,GAAAA,GAAAC,cAACwiC,GAAAA,EAAY,CACXC,aAAcjkG,GAAWg0F,QACzBz5F,MAAOA,EACPutF,OAAQA,EACRoc,WAAS,EACT/7E,UAAWs8D,GAAO0f,UAEnB9xF,QAAQgqB,IAAaklC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWs8D,GAAOpoD,WAAW+nE,EAAAA,GAAAA,IAAoB/nE,IAC5EklC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWs8D,GAAO4f,KACrB9iC,GAAAA,GAAAC,cAAA,KAAGr5C,WAAWg7C,EAAAA,GAAAA,GAAe,OAAQ,YAAashB,GAAO6f,QACxDvhD,EAAK,qBAAqBud,EAAAA,GAAAA,GAAuBz1B,EAAQyI,KAExD,I,4ECvCJixD,GAAsBC,GAAmB/pG,KAAKgqG,GAC9CC,GAAiB,KACjBC,GAAqB,CACzBpqG,MAAO,IACPutF,OAAQ,IACR14B,KAAM,IA+NR,SAASw1C,KACP,OACErjC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,YAAY4/D,MAAM,kCAAkC8c,QAAQ,aACzEtjC,GAAAA,GAAAC,cAAA,UAAQsjC,GAAG,KAAKC,GAAG,KAAKxnG,EAAE,SAC1BgkE,GAAAA,GAAAC,cAAA,QAAMwjC,EAAE,+IACRzjC,GAAAA,GAAAC,cAAA,QAAMwjC,EAAE,sFACRzjC,GAAAA,GAAAC,cAAA,QAAMwjC,EAAE,yNAGd,CAEA,UAAehjC,EAAAA,GAAAA,KA/NgBijC,EAC7BnqG,UACAud,WAEA,MAAM,aAAE6sF,IAAiBnjF,EAAAA,EAAAA,MAEnBmkD,GAAMD,EAAAA,GAAAA,IAAuB,MAE7Bk/B,GAAel/B,EAAAA,GAAAA,IAAuB,MACtCljB,GAAOkgB,EAAAA,GAAAA,KACPmiC,GAAcC,EAAAA,GAAAA,KAEdnoE,GAAWooE,EAAAA,EAAAA,KAAmBxqG,IAC9B,UAAE8R,EAAS,IAAE24F,GAAQroE,EAErB8e,GAAa5iB,EAAAA,GAAAA,MACbosE,GAAYC,EAAAA,EAAAA,KAAiB3qG,GAC7B4qG,EAAkC,YAAd94F,GAA4B44F,OAClDliG,EAD+DxI,EAAQ0T,KAAO0uB,EAASyoE,OAAS3pD,GAG7FsT,EAAOs2C,IAAY5iC,EAAAA,GAAAA,IAASuiC,GAE7BM,EAAiC,UAAdj5F,GAAwC,YAAdA,IAA4B44F,GACzE,MAAEjrG,EAAK,OAAEutF,EAAM,KAAE14B,GAASu1C,GAC1BmB,GAAMC,EAAAA,GAAAA,KAENC,GAAYC,EAAAA,EAAAA,KAAmB32C,EAAO/0D,EAAOutF,EAAQ14B,EAAM02C,GAC3DjS,GAAezM,EAAAA,GAAAA,GAAS4e,GACxBE,GAAmBC,EAAAA,GAAAA,GAAsBtS,GAAc,GACvDuS,EAAavS,GAAgBqS,EAE7BG,GAAmB7iC,EAAAA,GAAAA,KAAQ,KAC/B,GAAkB,YAAd52D,IAA4B0iD,EAAMg3C,eACpC,OAAO,EAGT,MAAM,IAAEC,EAAG,eAAED,GAAmBh3C,EAChC,OAAOg3C,GAAiBE,EAAAA,GAAAA,IAAkBD,EAAKn3C,EAAK,GACnD,CAACxiD,EAAW0iD,EAAOF,IAMhBq3C,GAAkB1+B,EAAAA,GAAAA,IAAiB2+B,IACvC,GAAkB,YAAd95F,EAAyB,OAC7B,MAAM+5F,EAAQD,EAAYE,iBACpBC,EAAUH,EAAYI,kBAEtBC,EAAWjsG,EAAQ0T,KAAO0uB,EAASyoE,QAASvsE,EAAAA,GAAAA,MAC5C4tE,GAAoB,EAAID,EAAW7pE,EAASyoE,QAAUpB,GACtDp8F,GAAO8+F,EAAAA,GAAAA,IAAqBlkD,EAAiB,IAAXgkD,GACxCF,EAAQK,YAAc/+F,EACtBw+F,EAAMG,kBAAmB3T,aAAa,oBAAsB,IAAG6T,IAAmB,IAgJpF,OA7IAG,EAAAA,GAAAA,KAAgB,KACVhC,EAAa98E,SACfo+E,EAAgBtB,EAAa98E,QAC/B,GACC,CAACo+E,KAEJpkC,EAAAA,GAAAA,KAAU,KAEJ5nE,KAAK4xF,IAAIkZ,EAAIgB,IAAMj3C,EAAMi3C,KAAO7B,IAAkBjqG,KAAK4xF,IAAIkZ,EAAI6B,KAAO93C,EAAM83C,MAAQ1C,GAClFp1C,EAAMg3C,iBAAmBf,EAAIe,gBAC/BV,EAAS,IACJt2C,EACHg3C,eAAgBf,EAAIe,iBAK1BV,EAASL,EAAI,GACZ,CAACA,EAAKj2C,KAET2gB,EAAAA,GAAAA,IAAW,KACTm1B,GAAa,GACXI,OAA6CliG,EAAP,KAAzBoiG,GAAoB,KAErC5B,EAAAA,GAAAA,IAAY,MACVV,EAAAA,GAAAA,KAAgB,KACd,MAAMsD,EAAcvB,EAAa98E,QAC7Bq+E,GACFD,EAAgBC,EAClB,GACA,GACDhB,EAAmB,SAAOpiG,GA+G3Bi+D,GAAAA,GAAAC,cAAA,OACE0E,IAAKA,EACL/9C,UAAU,mCACVw7C,QAjKgBuuB,KAClBgT,EAAa,CAAE/1C,SAAUG,EAAOF,QAAO,GAkKrCmS,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,eAtEZi+E,EAEH7kC,GAAAA,GAAAC,cAAA,OACEr5C,UAAU,iBACV8/D,IAAKme,EACLle,IAAI,oBACJsM,WAAW,EACXzM,MAAQ,UAAS4c,GAAmBpqG,oBAAoBoqG,GAAmB7c,cAPvDvmB,GAAAA,GAAAC,cAACinB,GAAAA,EAAQ,CAACluF,MAAOA,EAAOutF,OAAQA,IAgD1D,WACE,GAAKse,EAEL,OACE7kC,GAAAA,GAAAC,cAAAD,GAAAA,GAAAkC,SAAA,KACGpxD,QAAQg0F,KAAsBb,GAC7BjkC,GAAAA,GAAAC,cAAA,OACEr5C,UAAU,oBACV4/D,MAAQ,UAA4B,EAAnBse,gBAAsD,EAAnBA,QA5C9D,WACE,MAAMgB,GAAelkC,EAAAA,GAAAA,GACnB,MACAv2D,EACA44F,GAAa,WAEf,GAAkB,YAAd54F,EACF,OACE20D,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWk/E,GACd9lC,GAAAA,GAAAC,cAACojC,GAAM,MACPrjC,GAAAA,GAAAC,cAACw5B,GAAAA,EAAM,CAAC3iF,KAAMA,EAAM8P,UAAU,yBACR7kB,IAArB45B,EAASoqE,SACR/lC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,YAAY4/D,MAAQ,gBAAe7qD,EAASoqE,gBAMnE,GAAkB,UAAd16F,EAAuB,CACzB,MAAMm3D,GAAQwjC,EAAAA,GAAAA,IAAcrqE,EAASsqE,WAC/BC,GAAUC,EAAAA,GAAAA,IAAgBxqE,EAASsqE,WACzC,GAAIC,EACF,OACElmC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWk/E,EAActf,MAAQ,gBAAehkB,KACnDxC,GAAAA,GAAAC,cAACojC,GAAM,MACPrjC,GAAAA,GAAAC,cAAA,OAAKymB,IAAKwf,EAASjT,WAAW,EAAOrsE,UAAU,aAAa+/D,IAAI,KAIxE,CAEA,OACE3mB,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWk/E,EAAc7S,WAAW,EAAOvM,IAAK0f,GAAQzf,IAAI,IAErE,CAaO0f,GAGP,CAUOC,IApHP,WACE,GAAKhC,EACL,MAAkB,UAAdj5F,EAEA20D,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,iBACbo5C,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,uBACZ+U,EAAS9zB,OAEZm4D,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,0BACZ+U,EAAS4qE,UAKA,YAAdl7F,EAEA20D,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,iBACbo5C,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,uBAAuB46B,EAAK,uBAC3Cwe,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,2BACZ4/E,EAAAA,GAAAA,IAAkBhlD,EAAM/G,EAAYlhD,EAAQktG,YAE7CxC,GACAjkC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,gBAAgB+9C,IAAKi/B,GAClC5jC,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,uBAChBo5C,GAAAA,GAAAC,cAAA,OAAKjnE,MAAM,OAAOutF,OAAO,QACvBvmB,GAAAA,GAAAC,cAAA,UACEsjC,GAAG,KACHC,GAAG,KACHxnG,EAtIG,GAuIH4qB,UAAU,yBACV8/E,UAAU,sBACV,mBAAkB1D,GAClB,oBAAkB,cAlBhC,CA2BF,CA6EK2D,GACG,ICzOV,GAxBA,UAAyB,MAAErsG,IACzB,MAAMssG,EAAOtsG,EACT,0FACA,6FACJ,OACE0lE,GAAAA,GAAAC,cAAA,OAAKjnE,MAAM,IAAIutF,OAAO,KAAK3/D,UAAU,gBACnCo5C,GAAAA,GAAAC,cAAA,YACED,GAAAA,GAAAC,cAAA,UAAQznE,EAAE,OAAO08C,EAAE,SAASl8C,MAAM,OAAOutF,OAAO,SAASsgB,YAAY,oBAAoBhsG,GAAG,mBAC1FmlE,GAAAA,GAAAC,cAAA,YAAU6mC,GAAG,IAAIC,GAAG,cAAc54F,OAAO,uBACzC6xD,GAAAA,GAAAC,cAAA,kBAAgB+mC,aAAa,IAAID,GAAG,qBAAqB54F,OAAO,qBAChE6xD,GAAAA,GAAAC,cAAA,iBACEz/D,OAAO,4EACPumG,GAAG,uBAIT/mC,GAAAA,GAAAC,cAAA,KAAGgnC,KAAK,OAAO,YAAU,WACvBjnC,GAAAA,GAAAC,cAAA,QAAMwjC,EAAGmD,EAAMK,KAAK,OAAO5sG,OAAO,0BAClC2lE,GAAAA,GAAAC,cAAA,QAAMwjC,EAAGmD,EAAMK,KAAM3sG,EAAQ,UAAY,MAAOssB,UAAU,YAIlE,E,yBCaA,MAuIA,IAAe65C,EAAAA,GAAAA,KAvImBymC,EAChC3tG,UACA4tG,iBACAC,YACAC,qBACAC,oBACAC,4BACAC,YACAC,eACAj/F,WACAk/F,eACAC,cACAvlC,UACAwlC,qBACAC,gBACAC,mBAEA,MAAM,iBAAEngG,IAAqB6Y,EAAAA,EAAAA,MACvBghC,GAAOkgB,EAAAA,GAAAA,MACNqmC,EAAaC,IAAiBj6B,EAAAA,GAAAA,KAErC,SAASk6B,EAAoBj+C,GAC3BA,EAAEyhB,kBAEF9jE,EAAiB,CACfpO,QAASioD,EAAK,iBAElB,CAOA,MAAM35C,GAAQo6D,EAAAA,GAAAA,KAAQ,KACpB,IAAK8lC,EAAa,OAClB,MAAMG,GAAiBzJ,EAAAA,GAAAA,IAAsC,IAAfllG,EAAQ0T,KAAau0C,EAAKxa,UAAMjlC,EAAWy/C,EAAK2mD,YACxFC,EAAe7uG,EAAQ8uG,WACxB5J,EAAAA,GAAAA,IAA2C,IAApBllG,EAAQktG,SAAkBjlD,EAAKxa,UAAMjlC,EAAWy/C,EAAK2mD,YAC3EG,EAAoB/uG,EAAQ0oD,cAC7Bw8C,EAAAA,GAAAA,IAC6D,KAA7DllG,EAAQ0oD,YAAYsmD,WAAahvG,EAAQ0oD,YAAYh1C,MACtDu0C,EAAKxa,UACLjlC,EACAy/C,EAAK2mD,YAGT,IAAIvhG,EAAOshG,EAUX,OATIE,IACFxhG,GAAQ,KACRA,GAAQ46C,EAAK,mBAAmB10B,QAAQ,SAAUs7E,IAEhDE,IACF1hG,GAAQ,KACRA,GAAQ46C,EAAK,sBAAsB10B,QAAQ,SAAUw7E,IAGhD1hG,CAAI,GAGV,CAACmhG,EAAavmD,EAAMjoD,EAASioD,EAAK2mD,aAE/Bl7F,GAAOg1D,EAAAA,GAAAA,KAAQ,KACnB,MAAMumC,GAAOC,EAAAA,GAAAA,IAAWjnD,EAAqB,IAAfjoD,EAAQ0T,MACtC,OAAKy6F,GAIEgB,EAAAA,GAAAA,IAAoBlnD,EAAoD,KAA7CjoD,EAAQ0oD,aAAah1C,MAAQ1T,EAAQ0T,OAAc,GAH5Eu7F,CAGiF,GACzF,CAAChnD,EAAMjoD,EAAQ0T,KAAM1T,EAAQ0oD,aAAah1C,KAAMy6F,IAE7CiB,GAAgB/mC,EAAAA,GAAAA,GACpB,cACAylC,GAAsB,mBACtB9tG,EAAQ0oD,aAAa2mD,YAAc,eAGrC,OACE5oC,GAAAA,GAAAC,cAAA,QACEr5C,UAAW+hF,EACXtmC,IAAK7gB,EAAK8gB,MAAQ,MAAQ,MAC1BF,QAASA,EACT,2BAECulC,GACC3nC,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,sBAAsBw7C,QAASylC,IAC5CzgB,EAAAA,GAAAA,GAAWugB,IAGfF,GACCznC,GAAAA,GAAAC,cAACkzB,GAAAA,EAAI,CAACntD,KAAK,WAAWpf,UAAU,qBAAqBw7C,QAASwlC,IAE/D92F,QAAQvX,EAAQ2nB,aACf8+C,GAAAA,GAAAC,cAAAD,GAAAA,GAAAkC,SAAA,KACElC,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,kBACbo6C,EAAAA,GAAAA,IAAqBznE,EAAQ2nB,aAEhC8+C,GAAAA,GAAAC,cAACkzB,GAAAA,EAAI,CAACntD,KAAK,mBAGbwhE,GAAa12F,QAAQw2F,GAAmBjmG,gBACxC2+D,GAAAA,GAAAC,cAAA,QAAMmC,QAxEZ,SAA0BpY,GACxBA,EAAEyhB,kBACFq8B,GACF,EAqEuClhF,UAAU,2BACzCo5C,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,mBACdo5C,GAAAA,GAAAC,cAACs5B,GAAAA,EAAe,CAAC3yF,MAAMo6D,EAAAA,GAAAA,IAAqBsmC,EAAmBjmG,kBAEjE2+D,GAAAA,GAAAC,cAACkzB,GAAAA,EAAI,CAACntD,KAAK,kBAGdx9B,GACCw3D,GAAAA,GAAAC,cAACkzB,GAAAA,EAAI,CAACntD,KAAK,iBAAiBpf,UAAU,mBAEvCwgF,GACCpnC,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,sBAAqBwgE,EAAAA,GAAAA,GAAWggB,IAElDpnC,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,eAAe/e,MAAOA,EAAO8uE,aAAcqxB,GACxDzuG,EAAQ0oD,aAAa2mD,YACpB5oC,GAAAA,GAAAC,cAAAD,GAAAA,GAAAkC,SAAA,KACElC,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,mBAAmBw7C,QAAS6lC,IACzCxJ,EAAAA,GAAAA,IAAkD,IAA3BllG,EAAQ0oD,YAAYh1C,KAAau0C,EAAKxa,MAAM,IAEtEg5B,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,mBAAmBw7C,QAAS6lC,GAAsBzmD,EAAK,qBAG1EjoD,EAAQ8uG,UAAa,GAAE7mD,EAAK,oBAC5BjoD,EAAQqQ,0BAA6B,GAAE43C,EAAK,sBAC5Cv0C,GAEFk6F,GACCnnC,GAAAA,GAAAC,cAAC4oC,GAAAA,EAAqB,CAAC7/D,OAAQm+D,IAEhCI,GAA6BA,IACzB,IC5EX,IAAe9mC,EAAAA,GAAAA,KAzEwBqoC,EACrC5qC,YACA3kE,UACAI,aAEA,MAAM,4BAAEovG,IAAgCvoF,EAAAA,EAAAA,MAElCghC,GAAOkgB,EAAAA,GAAAA,MACP,WACJ9lE,EAAU,QAAEgjE,EAAO,OAAEjpC,EAAM,SAAEmF,GAC3BojC,EACE8qC,EAAsB,WAAXrzE,EACXme,EAAyB,SAAXne,QAAkC5zB,IAAb+4B,EAEnCmuE,GAAaziC,EAAAA,GAAAA,IAAgB,KACjCuiC,EAA4B,CAAEnqC,UAASnqD,OAAQ9a,GAAS,IAGpDuvG,GAAajnC,EAAAA,GAAAA,KAAQ,IACrBrD,EACEoqC,EAAiBptG,EAAa,iCAAmC,iCACjEk4C,EAAoB,mCAEjBl4C,EAAa,2BAA6B,2BAE7CotG,EAAiBptG,EAAa,4BAA8B,4BAC5Dk4C,EAAoB,8BAEjBl4C,EAAa,sBAAwB,uBAE7C,CAACk4C,EAAak1D,EAAUptG,EAAYgjE,IAEjCuqC,GAAoBlnC,EAAAA,GAAAA,KAAQ,IACzB/D,EAAUpjC,UAAWsuE,EAAAA,GAAAA,IAAmB5nD,EAAM0c,EAAUpjC,eAAY/4B,GAC1E,CAACy/C,EAAM0c,EAAUpjC,WAEduuE,GAAgBZ,EAAAA,GAAAA,IAAWjnD,EAAqB,IAAfjoD,EAAQ0T,MAC/C,OACE+yD,GAAAA,GAAAC,cAAA,OAAKr5C,UC5Dc,YD6DjBo5C,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL7c,KAAK,UACL8c,MAAM,cACNz0D,OAAK,EACLkhE,QAAM,EACN7M,QAAS6mC,EACTriF,UCnEmC,WDoEnCkyE,UAAW76B,EAAAA,GACXwE,UAAWjhB,EAAK5lD,EAAa,YAAc,aAE3CokE,GAAAA,GAAAC,cAAA,KAAGr5C,WAAWg7C,EAAAA,GAAAA,GAAe,OAAQhD,EAAU,sBAAwB,iBAEzEoB,GAAAA,GAAAC,cAAA,OAAKr5C,UCzEkD,YD0ErDo5C,GAAAA,GAAAC,cAAA,OAAKr5C,UC1EoE,YD0EzC46B,EAAK0nD,IACrClpC,GAAAA,GAAAC,cAAA,OAAKr5C,UC3EyK,YD4E5Ko5C,GAAAA,GAAAC,cAAA,KACEr5C,WAAWg7C,EAAAA,GAAAA,GACT,OACA,mBC/EsF,WDiFtFonC,GCjFgI,WDkFhIl1D,GClFsJ,YDmFrJl4C,GCnF2G,cDsFhHokE,GAAAA,GAAAC,cAAA,QAAMr5C,UCtF4L,YDuF/LuiF,EAAoB3nD,EAAK,0BAA2B,CAAC6nD,EAAeF,IAAsBE,KAI7F,I,gBE3FV,MCiFA,IAAe5oC,EAAAA,GAAAA,KAvDU6oC,EACvBh+F,YACA3R,SACA+F,YACA9D,aACA2tG,eAEA,MAAM,YAAEhpE,IAAgB/f,EAAAA,EAAAA,MAClBghC,GAAOkgB,EAAAA,GAAAA,KAEP8nC,GAAel+F,EAAUJ,SAEzB81B,GAAaihC,EAAAA,GAAAA,KAAQ,KACzB,MAAM3jC,EAAQkjB,EAAK,oBAAqBl2C,EAAUm+F,aAElD,OAAOC,EAAAA,GAAAA,GACLprE,EAAOqrE,EAAAA,IAAwB3pC,GAAAA,GAAAC,cAACoP,GAAAA,EAAQ,CAACzoD,UD1C2C,WC0CnBjsB,KAAK,OAAO+qD,KAAK,aACnF,GACA,CAAClE,EAAMl2C,IAEJqlF,GAAcnqB,EAAAA,GAAAA,IAAiBxc,IACnCzpB,EAAY,CACV5lC,KAAM,UACNhB,SACA+F,eAEFuxF,EAAAA,GAAAA,GAAUjnC,EAAE,IAGd,OACEgW,GAAAA,GAAAC,cAAA,OACEr5C,UDzDiB,WC0DjBw7C,QAASonC,EAAc7Y,OAAc5uF,GAEpCwnG,EACAC,GACCxpC,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL37C,UD/DoC,WCgEpC47C,MAAM,OACN9c,KAAK,OACLgtB,OAAK,EACLk3B,MAAI,GAEJ5pC,GAAAA,GAAAC,cAAA,QAAMr5C,UDrEkG,YCqEnEoa,IAGxC11B,EAAUJ,UACT80D,GAAAA,GAAAC,cAAA,OAAKr5C,WAAWg7C,EAAAA,GAAAA,GAAe,4BDzEiC,aC0E7DhmE,GAAaqmG,EAAAA,GAAAA,GAAe32F,EAAUm+F,YAAaI,EAAAA,KAAuBroD,EAAK,6BAGhF,I,uCCeV,SAASsoD,GAAcxrE,EAAeyrE,GACpC,OAAOA,EAAQ,GAAMzrE,EAAQyrE,EAAS,KAAKC,UAAY,CACzD,CAEA,SAzEiCC,EAC/BC,SACAC,cACAC,cACAC,iBACAC,iBACAC,oBAEA,MAAMp8F,EAASg8F,GAAeA,EAAYpuG,MAAMC,GAAMA,EAAE4a,SAAWszF,EAAOtzF,SACpE4zF,EAA0C,IAA1BF,EAAelwG,SAA2D,IAA3CkwG,EAAer8E,QAAQi8E,EAAOtzF,QAC7E6zF,EAAYH,EAAelwG,OAAS,GAAKowG,GAAmBr8F,GAAQu8F,SACpEC,EAAgBx8F,EAAS27F,GAAc37F,EAAOy8F,YAAaR,GAAe,GAAK,GAC9ES,EAAcC,IAAmBrpC,EAAAA,GAAAA,IAAS8oC,EAAgB,EAAII,GAC/DI,EAAY58F,EAAS27F,GAAc37F,EAAOy8F,YAAaP,GAAkB,GAAK,EAC9EW,EAA0BH,IAAiBF,EAQjD,IANA7pC,EAAAA,GAAAA,KAAU,KACJypC,GACFO,EAAgBH,EAClB,GACC,CAACJ,EAAeI,KAEdR,IAAgBh8F,EACnB,OAGF,MAAM88F,EAAa,UAASF,wBAAgCC,EAA0B,EAAI,KAE1F,OACEhrC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,aAAay7C,IAAI,OAC9BrC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAY,sBAAsC,QAAlB+jF,EAA0B,cAAgB,KAC5EA,EAAc,IACdF,GACCzqC,GAAAA,GAAAC,cAAA,QAAMr5C,WAAWg7C,EAAAA,GAAAA,GACf,sBACC4oC,GAAiB,QAClBD,GAAiB,YAGjBvqC,GAAAA,GAAAC,cAACkzB,GAAAA,EAAI,CAACntD,KAAMwkE,EAAgB,QAAU,QAAS5jF,UAAU,uBAI/Do5C,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,qBACbo5C,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,mBAAmBy7C,IAAI,SACnCq5B,EAAAA,GAAAA,GAAuB,CACtB90F,KAAMsjG,EAAOtjG,KAAKA,KAClB8L,SAAUw3F,EAAOtjG,KAAK8L,YAG1BstD,GAAAA,GAAAC,cAAA,OAAKr5C,WAAWg7C,EAAAA,GAAAA,GAAe,qBAAsB6oC,IAAaD,GAAiB,UAChFD,GACCvqC,GAAAA,GAAAC,cAAA,OACEr5C,UAAU,YACV4/D,MAAQwkB,EAAkF,GAAxD,uDAElChrC,GAAAA,GAAAC,cAAA,QAAMwjC,EAAE,oCAGZzjC,GAAAA,GAAAC,cAAA,OACEr5C,UAAU,mBACV4/D,MAAOykB,MAIT,EC5CJjI,GAAsBC,GAAmB/pG,KAAKgqG,GAgTpD,SAASz3B,GAAgBzhB,GACvBA,EAAEyhB,iBACJ,CAEA,UAAehL,EAAAA,GAAAA,KAhTYyqC,EACzB3xG,UACAmL,OACAstF,gCACAmZ,gCACAC,iBAEA,MAAM,YACJ3rG,EAAW,gBAAE4rG,EAAe,gBAAEj6D,EAAe,iBAAEzpC,IAC7C6Y,EAAAA,EAAAA,OAEI3lB,GAAI6E,EAAS,OAAE/F,GAAWJ,GAC5B,QAAE+xG,EAAO,QAAExxG,GAAY4K,GACtB6mG,EAAcC,IAAmB/pC,EAAAA,GAAAA,KAAkB,IACnDgqC,EAAeC,IAAoBjqC,EAAAA,GAAAA,IAAmB,KACtDkqC,EAAcC,IAAmBnqC,EAAAA,GAAAA,KAAkB,IACnDoqC,EAAaC,IAAkBrqC,EAAAA,GAAAA,KACnC6pC,EAAQS,QAAUT,EAAQU,WAAaV,EAAQU,UAAY,EACxD9yG,KAAKC,IAAImyG,EAAQU,WAAYn0E,EAAAA,GAAAA,MAAiByzE,EAAQO,aACtD,GAGAjI,GAAel/B,EAAAA,GAAAA,IAAuB,MAEtCunC,GAAiBvnC,EAAAA,GAAAA,IAAyB,OACxC5qE,QAASqwG,EAAW,YAAEC,GAAgBtwG,EACxCoyG,EAAW/B,GAAeA,EAAYxgG,MAAM3N,GAAMA,EAAE0uG,WACpDyB,GAAWb,EAAQS,SAAWG,EAC9BE,GAAiBD,GAAWb,EAAQe,UAAYhpG,OAAOvJ,EAAQswG,aAAe,EAC9EkC,EAAaH,GAAWb,EAAQiB,eAChCC,EAAiB1yG,EAAQ0yG,eACzBnC,EAAiBF,EAAcjxG,KAAKE,OAAO+wG,EAAYnjG,KAAKhL,GAAMA,EAAE4uG,eAAgBR,EACpFE,GAAiBroC,EAAAA,GAAAA,KAAQ,IACtBkoC,GAAa9vG,QAAQ2B,GAAMA,EAAEywG,YAAWzlG,KAAKhL,GAAMA,EAAE4a,UAAW,IACtE,CAACuzF,IACEuC,GAAUzqC,EAAAA,GAAAA,KAAQ,IAAMqpC,EAAQoB,QAAQ1lG,KAAK9J,IAAC,CAClD6vE,OAAO2uB,EAAAA,GAAAA,GAAuB,CAC5B90F,KAAM1J,EAAE0J,KAAKA,KACb8L,SAAUxV,EAAE0J,KAAK8L,SACjBs/E,gCACAmZ,kCAEF7sE,MAAOphC,EAAE0Z,OACT+1F,OAAQ77F,QAAQw6F,EAAQsB,MAAQtB,EAAQO,aAAeA,GAAe,QACnE,CACHA,EAAa7Z,EAA+BmZ,EAC5CG,EAAQoB,QAASpB,EAAQO,YAAaP,EAAQsB,QAGhD9rC,EAAAA,GAAAA,KAAU,KACR,MAAM+rC,EAASnoG,EAAK5K,QAAQA,SAASiC,MAAMoS,GAAWA,EAAOu8F,WACzDa,GAAgBsB,IACdA,EAAOJ,WACTr7D,EAAgB,CAAC,GAEnBo6D,GAAgB,GAClB,GACC,CAACD,EAAc7mG,EAAK5K,QAAQA,QAASs3C,KAExCw0D,EAAAA,GAAAA,KAAgB,KAId,GAHIiG,EAAc,GAChBloG,YAAW,IAAMmoG,EAAeD,EAAc,IAhEtB,MAkErBI,EAAenlF,QAAS,OAEzB+kF,GAAe,GACjBjI,EAAa98E,QAAS+pE,UAAUnuF,IAAI,YAGtC,MAAM+iG,GAAqB6F,EAAQO,YAAeA,GAAeP,EAAQO,YAAgB7I,GACzFiJ,EAAenlF,QAAQ8qE,aAAa,oBAAsB,IAAG6T,IAAmB,GAC/E,CAACoG,EAAaP,EAAQO,eAEzB/qC,EAAAA,GAAAA,KAAU,KACJwqC,EAAQsB,OAASf,GAAe,GAAMK,IAAaZ,EAAQS,SAC7DtsG,EAAY,CAAE9F,SAAQ+F,aACxB,GACC,CAAC/F,EAAQkyG,EAAaK,EAAUzsG,EAAaC,EAAW4rG,EAAQS,OAAQT,EAAQsB,QAGnF9rC,EAAAA,GAAAA,KAAU,KACR,IAAIgsC,EAQJ,OANIxB,EAAQsB,OAAStB,EAAQS,QAAUT,EAAQO,aAAeP,EAAQO,YAAc,IAClFiB,EAAQlvF,OAAOja,YAAW,KACxBlE,EAAY,CAAE9F,SAAQ+F,aAAY,GACX,IAAtB4rG,EAAQO,cAGN,KACDiB,GACFlvF,OAAO0C,aAAawsF,EACtB,CACD,GACA,CAACX,EAASxyG,EAAQ8F,EAAaC,EAAW4rG,EAAQO,YAAaP,EAAQS,OAAQT,EAAQsB,OAE1F,MAAMG,GAAe9qC,EAAAA,GAAAA,KAAQ,KAE3B,MAAM1pE,GAASqL,EAAAA,EAAAA,MACf,OAAO4oG,EAAiBA,EAAe35F,QAAO,CAAC1E,EAAmBtT,KAChE,MAAMic,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQsC,GAKhC,OAJIic,GACF3I,EAAOlK,KAAK6S,GAGP3I,CAAM,GACZ,IAAM,EAAE,GACV,CAACq+F,IAEEQ,GAAoBxmC,EAAAA,GAAAA,IAAiB5vD,IACzC80F,EAAiB,CAAC90F,IAClB40F,GAAgB,GAChBI,GAAgB,GAChBR,EAAW,CAACx0F,GAAQ,IAGhBq2F,GAAuBzmC,EAAAA,GAAAA,IAAiB37D,IAC5C6gG,EAAiB7gG,EAAQ,IAGrBqiG,GAAkB1mC,EAAAA,GAAAA,IAAgB,KACtCglC,GAAgB,GAChBI,GAAgB,GAChBR,EAAWK,EAAc,IAGrB0B,GAAyB3mC,EAAAA,GAAAA,IAAgB,KAC7C6kC,EAAgB,CAAE1xG,SAAQ+F,aAAY,IAGlC0tG,GAAe5mC,EAAAA,GAAAA,IAAgB,KACnC7+D,EAAiB,CACfF,SAASnL,EAAAA,EAAAA,IAAc/C,GACvBA,SAASmiG,EAAAA,GAAAA,GAAuB,CAAE90F,KAAMlC,EAAK5K,QAAQuzG,SAAW36F,SAAUhO,EAAK5K,QAAQwzG,mBACvFxyE,SA5IoB,IA6IpByyE,kBA9IwB,0BA+IxB,KAIJzsC,EAAAA,GAAAA,KAAU,KACJ6qC,GAAgBO,GAAYZ,EAAQsB,MAAQ9yG,EAAQA,SAAW4K,EAAK5K,QAAQuzG,WACxDvzG,EAAQA,QAAQiC,MAAMC,GAAMA,EAAE0uG,UAAY1uG,EAAEywG,aAEhEW,IAEJ,GACC,CAAClB,EAAUP,EAAc7xG,EAAQA,QAASwxG,EAAQsB,KAAMloG,EAAK5K,QAAQuzG,WAExE,MAAM7rD,GAAOkgB,EAAAA,GAAAA,KA6Bb,OACE1B,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,OAAOy7C,IAAK7gB,EAAK8gB,MAAQ,OAAS,OAC/CtC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,kBACZ80E,EAAAA,GAAAA,GAAuB,CACtB90F,KAAM0kG,EAAQkC,SAAS5mG,KACvB8L,SAAU44F,EAAQkC,SAAS96F,SAC3Bs/E,gCACAmZ,mCAGJnrC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,aACZ46B,EAsFT,SAA2B8pD,GAEzB,YAAgC,IAArBA,EAAQe,SAvRR,IA2RPf,EAAQS,OACH,eAGLT,EAAQsB,KACHtB,EAAQe,SAAW,WAAa,oBAGlCf,EAAQe,SAAW,aAAe,eAC3C,CArGcoB,CAAkBnC,IAtB1ByB,EAAa3yG,OAAS,GACpB4lE,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,sBACbo5C,GAAAA,GAAAC,cAACytC,GAAAA,EAAU,CACThoD,KAAK,QACL/I,MAAOowD,KAoBVlB,EAAc,GAAKM,GAClBnsC,GAAAA,GAAAC,cAAA,OAAK0E,IAAKi/B,EAAch9E,UAAU,kBAChCo5C,GAAAA,GAAAC,cAAA,aAAO4iC,EAAAA,GAAAA,IAAoBgJ,IAC3B7rC,GAAAA,GAAAC,cAAA,OAAKjnE,MAAM,OAAOutF,OAAO,QACvBvmB,GAAAA,GAAAC,cAAA,UACE0E,IAAKsnC,EACL1I,GAAG,IACHC,GAAG,IACHxnG,EA5MK,EA6ML4qB,UAAU,0BACV8/E,UAAU,oBACV,mBAAkB1D,GAClB,oBAAkB,QAKzBsI,EAAQsB,MAAQloG,EAAK5K,QAAQuzG,WAAalB,GACzCnsC,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLx0D,OAAK,EACL23C,KAAK,OACL8c,MAAM,cACN57C,UAAU,iBACVw7C,QAASgrC,EACT3qC,UAAU,iBAEVzC,GAAAA,GAAAC,cAAA,KAAGr5C,UAAU,qBAIlBulF,GACCnsC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,eAAew7C,QAASqJ,IACpC6gC,EAEGtsC,GAAAA,GAAAC,cAAC0tC,GAAAA,EAAa,CACZ9iG,QAAS6hG,EACT54B,SAAUm5B,EACVnU,SAAUv/F,EAAQqE,aAAe2tG,EACjCqC,eAAgBrC,EAAeE,OAAgB1pG,EAC/C8rG,SAAO,IAIT7tC,GAAAA,GAAAC,cAAC6tC,GAAAA,EAAU,CACT9nE,KAAO,QAAOtmC,IACdmL,QAAS6hG,EACT54B,SAAUk5B,EACVlU,SAAUv/F,EAAQqE,aAAe2tG,EACjCwC,cAAexC,EAAeE,EAAc,QAAK1pG,MAKzDoqG,GACAnsC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,gBACZ0kF,EAAQoB,QAAQ1lG,KA/FzB,SAA4BkjG,GAC1B,OACElqC,GAAAA,GAAAC,cAACgqC,GAAU,CACTriG,IAAKsiG,EAAOtzF,OACZ2zF,cAAeoB,IAAiBQ,EAChCjC,OAAQA,EACRC,YAAaA,EACbC,YAAaA,EACbC,eAAgBA,EAChBC,eAAgBA,GAGtB,MAsFM8B,IAAkBE,GAClBtsC,GAAAA,GAAAC,cAAA,OAAKr5C,UAAU,qBA0CvB,SAAgC46B,EAAiBphB,EAA0B/xB,GACzE,OAAKA,EAIEmzC,EAAKphB,EAAS,SAAW,OAAQ/xB,EAAO,KAHtCmzC,EAAKphB,EAAS,4BAA8B,kCAIvD,CAhD4C4tE,CAAuBxsD,EAAM8pD,EAAQsB,KAAM9yG,EAAQswG,cAExFkC,GACCtsC,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLi4B,QAAM,EACN1B,SAAmC,IAAzB2S,EAAcrxG,OACxBsrD,KAAK,OACL0c,QAAS8qC,GAER1rD,EAAK,oBAGT4qD,GACCpsC,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACLi4B,QAAM,EACN90C,KAAK,OACL0c,QAAS+qC,GAER3rD,EAAK,oBAGN,I,mDCxRV,MAAMysD,GAAY,IAAMh2G,EAAAA,EAClBi2G,GAAc,IAAMj2G,EAAAA,EACpBk2G,GAAoB99F,EAAAA,IAAU6qB,EAAAA,GAAc,EAAI,EAChDkzE,GAAW/9F,EAAAA,IAAU6qB,EAAAA,GAAc,EAAI,EA8F7C,IAAeulC,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAAC1qE,GAAUiE,kBACT,MAAM,gBAAE26C,IAAoB1+C,EAAAA,EAAAA,KAAeF,GAErCm/F,GAAct7F,EAAAA,EAAAA,KAA+B7D,EAAQ,mBAE3D,MAAO,CACL4+C,gBAAiBA,IAAkB36C,GACnCk7F,cACD,GATez0B,EA5FMorC,EACxB7xG,cACA9B,WACAksB,YACA8+B,OAAOuoD,GACPK,aAAaJ,GACb/2D,kBACAl7C,cACAy7F,cACA7C,0BAEA,MAAM,mBAAEn+C,IAAuBl2B,EAAAA,EAAAA,MAGzBmkD,GAAMD,EAAAA,GAAAA,IAAuB,MAE7B6pC,GAAY7pC,EAAAA,GAAAA,IAAuB,OAElC8pC,EAAYC,IAAiBhtC,EAAAA,GAAAA,IAAmB,IAEjDwwB,GAAiBC,EAAAA,GAAAA,IAAkBvtB,EAAKkwB,GAExC6Z,GAAiBzsC,EAAAA,GAAAA,KAAQ,IAC7B9qB,GAAiBp7C,MAAMq7C,IAAWzqB,EAAAA,EAAAA,KAAeyqB,EAAQ18C,MACxD,CAACy8C,EAAiBz8C,IAEfi0G,EAAmB79F,QACvB4mF,GAAegX,GAEXE,EAAoBJ,EAAWp0G,OAAS+zG,IAE9Cx/B,EAAAA,GAAAA,IAAsB,EAAEkgC,MACjBF,GAKA1yG,GAAeA,IAAgB4yG,GAAmB,IAInDD,GACFH,GAAejT,GAAS,IAAIA,EAAMxgG,KAAKC,SATvCwzG,EAAc,GAUhB,GACC,CAACxyG,EAAa2yG,EAAmBD,IAEpC,MACE/pC,aAAckqC,IACZ9pC,EAAAA,GAAAA,GAAkB,CACpBL,IAAK4pC,EACL5mC,mBAAmB,EACnB95B,OAAQ8gE,EACR/nF,UAAW,OACXq+C,kBAAkB,IAGd8pC,GAAcvoC,EAAAA,GAAAA,IAAgB,KAClC,MAAMwoC,EAAgBR,EAAW9+F,MAAM,GACvC++F,EAAcO,GACTA,EAAc50G,QACjBs8C,EAAmB,CAAEl6C,cAAa9B,YACpC,IAGIu0G,GAAgBrtC,EAAAA,GAAAA,GACpBshB,GAAAA,EAAOsf,KACPsM,GAAsB5rB,GAAAA,EAAOgsB,UAC7BtoF,GAGF,OACEo5C,GAAAA,GAAAC,cAAA,OAAKr5C,UAAWqoF,EAAetqC,IAAKA,EAAKwqC,eAAa,GACpDnvC,GAAAA,GAAAC,cAACoP,GAAAA,EAAQ,CAACznE,IAAI,OAAOjN,KAAK,OAAO+qD,KAAK,WAAW8gC,MAAQ,UAAS9gC,gBAAmBA,QACpFopD,GAAsBN,EAAWxnG,KAAKnM,GACrCmlE,GAAAA,GAAAC,cAACmvC,GAAAA,EAAY,CACXxnG,IAAK/M,EACL8pE,IAAK4pC,EACL3nF,UAAWs8D,GAAAA,EAAOruC,OAClB6Q,KAAM4oD,EACNtQ,OAAQC,GAAAA,EAAeoR,mBACvBnY,KAAMjF,EACNmM,QAAM,EACNzF,aAAW,EACXwF,gBAAc,EACd3F,QAAS4V,GACTkB,QAASP,MAGT,K,wCCvGV,MAAMQ,GAAgB,KAAOt3G,EAAAA,EAiB7B,SAASu3G,GAAiBj3G,GACxB,OAAOA,EAAO8wC,KAChB,CAEA,MA4KA,IAAeo3B,EAAAA,GAAAA,KA5KQgvC,EACrB/0G,WACA8B,cACA6gG,eACAqS,iBACA9oF,YACA+oF,kBACAh2G,SACA+F,YACAm1F,sBACAzyB,UACAwtC,kBAEA,MAAM,sBACJrmE,EAAqB,wBACrBwN,EAAuB,sBACvB84D,EAAqB,YACrBC,IACEtvF,EAAAA,EAAAA,MAEEmkD,GAAMD,EAAAA,GAAAA,IAA0B,MAEhCqrC,GAAarrC,EAAAA,GAAAA,IAAwB,MACrCsrC,GAAetrC,EAAAA,GAAAA,MAEfurC,EAAoC,SAA3Bv1G,EAASA,SAASC,KAE3Bu1G,GAAaC,EAAAA,GAAAA,GAAYX,IACzBY,EAAiBt/F,QAAQo/F,GAEzBG,GAAkB7pC,EAAAA,GAAAA,IAAgB,CAACn4D,EAAQ,KAC/CuhG,IAAcvhG,EAAM,IAGhBsiF,GAAcnqB,EAAAA,GAAAA,IAAiBxc,IACnC,GAA+B,SAA3BtvD,EAASA,SAASC,KAIpB,OAHAqvD,EAAEyhB,uBACF4kC,IAKFjuC,IAAU1nE,EAASA,SAAS,KAGxB,kBACJ0mF,EAAiB,wBACjByN,EAAuB,kBACvBxN,EAAiB,uBACjBC,EAAsB,sBACtBC,IACEC,EAAAA,GAAAA,GAAuB7c,EAAgC,SAA3BjqE,EAASA,SAASC,UAAiBoH,OAAWA,OAAWA,GAAW,IAEpG++D,EAAAA,GAAAA,KAAU,KACJsgB,IACFyuB,EAAsB,CACpBl2G,SACA+F,cAGF4hF,IACAC,IACF,GACC,CAACD,EAAwBC,EAAuBH,EAAmBznF,EAAQ+F,KAE9EivE,EAAAA,GAAAA,IAAsB,EAAE2hC,MACtB,MAAMhnE,EAAS5uC,EAASuB,YAClB+jC,EAAS2kC,EAAI79C,QACnB,IAAKwiB,IAAWtJ,GAAUsJ,IAAWgnE,GAAcr0G,YAAa,OAEhE,GAAIm0G,GAAkB9mE,EAAS4mE,EAAW9mE,QAAQE,OAYhD,OAXAC,EAAsB,CACpB0N,eAAgB,CACdt9C,SACA+F,YACA4pC,iBAGJyN,EAAwB,CACtBp9C,SACA+F,cAKJ,GAAIhF,EAASuB,YAAa,CACxB,MAAM,KAAEs0G,EAAI,IAAEC,GAAQxwE,EAAOmwD,wBACvB/jC,EAASmkD,EAAOvwE,EAAOywE,YAAc,EACrCpkD,EAASmkD,EAAMxwE,EAAO0wE,aAAe,EAC3CZ,EAAY,CAAE1jD,SAAQC,UACxB,CAEA,MAAMskD,EAAettG,OAAOutG,iBAAiB5wE,GAAQ6wE,QAAU,EAC/Db,EAAalpF,SAASgqF,SAEtBd,EAAalpF,QAAUkZ,EAAO+wE,QAAQ,CACpC,CAAEF,MAAOF,GACT,CAAEE,MAAO33G,KAAKC,IAAmB,IAAfw3G,EArHN,GAqHsCl4F,OAAQ,IAC1D,CAAEo4F,MAAO,IACR,CACD/1E,SAAU,IAAM61E,EAChBK,OAAQ,YACR,GACD,CAACt2G,EAAUw1G,GAAY9mE,QAASgnE,EAAgBz2G,EAAQ+F,IAE3D,MAAMuxG,GAAa5xB,EAAAA,GAAAA,GAAY3kF,EAASuB,cAGtC2oE,aAAcssC,IACZlsC,EAAAA,GAAAA,GAAkB,CACpBn3B,OAAQ/8B,QAAQpW,EAASuB,aACzB0oE,IAAKorC,EACLnpF,UAAW,OACXq+C,kBAAkB,IAGpB,OACEjF,GAAAA,GAAAC,cAACsC,GAAAA,EAAM,CACL37C,WAAWg7C,EAAAA,GAAAA,GACTshB,GAAAA,EAAOsf,KACPnF,GAAgBna,GAAAA,EAAOiuB,IACvBlB,GAAU/sB,GAAAA,EAAOkuB,MACjBC,EAAAA,EAAAA,KAAiB32G,IAAawoF,GAAAA,EAAO2pB,QACrCwE,EAAAA,EAAAA,KAAiB32G,IAAai1G,EAC9B/oF,GAEF8+B,KAAK,OACLif,IAAKA,EACLmuB,YAAajE,EACbpN,cAAeJ,EACfjf,QAASuuB,GAEmB,SAA3Bj2F,EAASA,SAASC,KACjBqlE,GAAAA,GAAAC,cAAAD,GAAAA,GAAAkC,SAAA,KACElC,GAAAA,GAAAC,cAACqxC,GAAAA,EAAQ,CAACC,OAAO,WACjBvxC,GAAAA,GAAAC,cAACouC,GAAiB,CAChBznF,UAAWs8D,GAAAA,EAAOsuB,cAClBh1G,YAAaA,EACb9B,SAAUA,EAASA,SACnBgrD,KAAM6pD,GACNtzG,YAAavB,EAASuB,YACtB44F,oBAAqBA,IAEtBqc,GACClxC,GAAAA,GAAAC,cAACs5B,GAAAA,EAAe,CACd50B,IAAKorC,EACLnpG,KAAO,KAAGo6D,EAAAA,GAAAA,IAAqBtmE,EAASuB,aAAeg1G,KACvDrqF,UAAWs8D,GAAAA,EAAOuuB,eAKxBzxC,GAAAA,GAAAC,cAACyxC,GAAAA,EAAqB,CACpB9qF,UAAWs8D,GAAAA,EAAOsuB,cAClBh1G,YAAaA,EACb9B,SAAUA,EAASA,SACnBgrD,KAAM6pD,GACN1a,oBAAqBA,IAGxB6a,GAAgBt1G,OACf4lE,GAAAA,GAAAC,cAACytC,GAAAA,EAAU,CAAChoD,KAAK,OAAO/I,MAAO+yD,IAE/B1vC,GAAAA,GAAAC,cAACs5B,GAAAA,EAAe,CACd3yF,MAAMo6D,EAAAA,GAAAA,IAAqBtmE,EAAS2T,OAAS3T,EAASuB,aAAe,IACrE2qB,UAAWs8D,GAAAA,EAAOyuB,UAGf,I,gBCnLb,MAwLA,IAAelxC,EAAAA,GAAAA,KArLiBmxC,EAC9Br4G,UACA8G,WACAwxG,YACA3oB,WACA4oB,eACAjd,sBACAkd,mBACAx4F,uBACA0+B,WAEA,MAAM,eACJvC,EAAc,qBACds8D,EAAoB,mBACpB9lF,EAAkB,oBAClB+lF,EAAmB,iBACnBl2F,EAAgB,wBAChBg7B,EAAuB,iBACvBpvC,IACE6Y,EAAAA,EAAAA,MACEghC,GAAOkgB,EAAAA,GAAAA,MAEP,QAAE5nE,EAAO,QAAEC,EAAO,gBAAEI,GAAoBZ,EAAQM,UAEhD2vB,GAAay4C,EAAAA,GAAAA,KAAQ,IACzBnoE,EAAQ+Y,QAAO,CAACC,EAAKpY,IAAaoY,EAAMpY,EAAS2T,OAAO,IACvD,CAACvU,IAEEo4G,GAA8BjwC,EAAAA,GAAAA,KAAQ,KAC1C,MAAM1pE,GAASqL,EAAAA,EAAAA,MAEf,OAAOzJ,GAAiB0Y,QAAO,CAACC,EAAKq/F,KACnC,MAAM,SAAEz3G,EAAQ,OAAEH,GAAW43G,EACvBvqG,GAAMuwC,EAAAA,EAAAA,KAAez9C,GACrBoc,GAAOe,EAAAA,EAAAA,KAAWtf,EAAQgC,GAEhC,IAAKuc,EAAM,OAAOhE,EAElB,MAAM6pC,EAAQ7pC,EAAIlL,IAAQ,GAG1B,OAFA+0C,EAAM14C,KAAK6S,GACXhE,EAAIlL,GAAO+0C,EACJ7pC,CAAG,GACT,CAAC,EAAuC,GAC1C,CAAC3Y,IAEEwlE,GAAQsC,EAAAA,GAAAA,KAAQ,KACpB,MAAM5lE,GAAaC,EAAAA,EAAAA,IAAc/C,GACjC,OAAOO,EAAQkN,KAAKtM,IAClB,MAAM03G,GAAcj6D,EAAAA,EAAAA,KAAez9C,EAASA,UACtCg1G,EAAiBwC,IAA8BE,GAC/CC,EAA2B7oF,EArDZ,GAqD+CuoF,EAC9D75D,EAAMn+C,EAAUk+C,IAAOm6D,QAAerwG,EAE5C,MAAO,CACLrH,WACA03G,cACA/1G,aACAqzG,eAAiB2C,OAA4CtwG,EAAjB2tG,EAC5ChF,UAAU2G,EAAAA,EAAAA,KAAiB32G,GAC3Bw9C,MACD,GACD,GACD,CAAC3+C,EAASw4G,EAAkBG,EAA6Bp4G,EAASC,EAASk+C,EAAMzuB,IAE9EmnE,GAAcnqB,EAAAA,GAAAA,IAAiB9rE,IACnC,GAAIX,EACF,OAAKwf,GAOL2S,EAAmB,CAAEvyB,OAAQJ,EAAQI,OAAQ0G,WAAUjF,OAAQ,CAAE+wB,SAAUzxB,UAC3Eu3G,EAAoB,CAAEt4G,OAAQJ,EAAQI,OAAQ0G,mBAP5C0b,EAAiB,CACfC,eAAgB,eAUtB05B,EAAe,CACb/7C,OAAQJ,EAAQI,OAChB+F,UAAWnG,EAAQsB,GACnBH,YACA,IAGE43G,GAAiBrwC,EAAAA,GAAAA,KAAQ,IAAMnoE,EAAQiC,MAAMC,GAA0B,SAApBA,EAAEtB,SAASC,QAAkBsB,aAAe,GAAG,CAACnC,IAEnGu2G,GAAkB7pC,EAAAA,GAAAA,IAAiBn4D,IACvC2jG,EAAqB,CACnBr4G,OAAQJ,EAAQI,OAChB+F,UAAWnG,EAAQsB,GACnBwT,SACA,KAGJyyD,EAAAA,GAAAA,KAAU,KACHwxC,GAEL3qG,EAAiB,CACfF,SAASnL,EAAAA,EAAAA,IAAc/C,GACvBsO,MAAO25C,EAAK,kBACZjoD,QAASioD,EAAK,gBAAiB8wD,GAC/BxoG,WAAY03C,EAAK,iBACjB+wD,aAAcD,EAAe3rF,WAC7B9jB,OAAQ,CACNA,OAAQ,0BACRkH,QAAS,CAAEpQ,OAAQJ,EAAQI,OAAQ+F,UAAWnG,EAAQsB,KAExD23G,cAAe,CACb3vG,OAAQ,mBACRkH,QAAS,CAAEpQ,OAAQJ,EAAQI,OAAQ+F,UAAWnG,EAAQsB,KAExDigC,SAlHkB,IAmHlB23E,iBAAiB,EACjBC,qBAAqB,EACrBx+C,KAAM,QACN,GACD,CAAC1S,EAAMjoD,EAAS+4G,IAEnB,MAAMK,GAAuBnsC,EAAAA,GAAAA,IAAiB9rE,IAC5Cg7C,EAAe,CACb/7C,OAAQJ,EAAQI,OAChB+F,UAAWnG,EAAQsB,GACnBH,YACA,IAWJ,OAPAk4G,EAAAA,GAAAA,IAAc,IAAM,KAClB77D,EAAwB,CACtBp9C,OAAQJ,EAAQI,OAChB+F,UAAWnG,EAAQsB,IACnB,IAIFmlE,GAAAA,GAAAC,cAAA,OACEr5C,WAAWg7C,EAAAA,GAAAA,GAAe,YAAaiwC,GAAa,cACpDrrB,MAAO0C,EAAY,cAAaA,WAAennF,EAC/CsgE,IAAK7gB,EAAK8gB,MAAQ,MAAQ,OAEzB3C,EAAM34D,KAAI,EACTtM,WAAUg1G,iBAAgBrzG,aAAY+1G,cAAa1H,WAAUxyD,SAE7Dn+C,EACEimE,GAAAA,GAAAC,cAAC4yC,GAAAA,EAAc,CACbjrG,IAAKwqG,EACLxrF,UAAU,mBACV+oF,gBAAgB,SAChBnzG,YAAaH,EACbghG,aAAc9jG,EAAQqC,WACtB8uG,SAAUA,EACVhwG,SAAUA,EAASA,SACnBw9C,IAAKA,EACL46D,gBAAiBv5F,EACjB6oD,QAASuuB,EACToiB,SAAUJ,EACV9d,oBAAqBA,IAGvB70B,GAAAA,GAAAC,cAACwvC,GAAc,CACb7nG,IAAKwqG,EACLz4G,OAAQJ,EAAQI,OAChB+F,UAAWnG,EAAQsB,GACnB+rB,UAAU,mBACV+oF,gBAAgB,SAChBnzG,YAAaH,EACbghG,aAAc9jG,EAAQqC,WACtB8zG,eAAgBA,EAChBh1G,SAAUA,EACV0nE,QAASuuB,EACTif,YAAaS,EACbxb,oBAAqBA,MAI1Bid,EACG,I,mDC3NV,SAAmE,WCqKnE,GA9H8BkB,EAC5Bz5G,UAASs7F,sBAAqBsW,gCAA+B7lB,aAC7DqpB,mBAAkBsE,aAAYC,mBAE9B,MAAM,iBAAEvrG,EAAgB,eAAEwrG,IAAmB3yF,EAAAA,EAAAA,MAEvCghC,GAAOkgB,EAAAA,GAAAA,MACP,SAAE4M,IAAaC,EAAAA,EAAAA,MAGf5J,GAAMD,EAAAA,GAAAA,IAAuB,MAG7B6pC,GAAY7pC,EAAAA,GAAAA,IAAuB,MAEnCvmE,EAAU5E,EAAQwE,QAAQI,SAC1B,eAAE4kB,EAAc,QAAE67C,EAAO,UAAEw0C,GAAcj1G,EACzCk1G,GAAc95G,EAAQqC,WAEtB6oG,EAAYtmG,EAAQS,yBAAsBmD,GAC9CuxG,EAAAA,EAAAA,KAAoBn1G,EAASygE,IAAY20C,EAAAA,GAAoB,YAAc,UAGvEC,GAAUthB,EAAAA,GAAAA,IAAkBvtB,EAAKkwB,GACjChO,GAAUqL,EAAAA,GAAAA,IAAkBvtB,EAAKwmC,GACjCsI,EAAmB,UAASt1G,EAAQtD,YACpC64G,GAAgB7tB,EAAAA,GAAAA,GACpB4tB,GACCD,IAAYJ,IAAcH,EAC3B5+D,EAAAA,GAAeC,UAEVq/D,EAAiBC,EAAoBC,IAAqB9lC,EAAAA,GAAAA,KAE3D+lC,GAAoBttC,EAAAA,GAAAA,IAAgB,KACxCqtC,IACAX,KAAgB,KAGlBpyC,EAAAA,GAAAA,KAAU,KACJsyC,GAAaH,GAAcpsB,GAAW8nB,GACxCiF,GACF,GACC,CAACR,EAAWvsB,EAAS8nB,EAAkBiF,EAAoBX,IAE9D,MAAMnE,EAAqBsE,GAAaH,GAAcS,GAAiBC,GACvEI,EAAAA,GAAAA,GAAmB,CACjBC,UAAWrvC,EACXsvC,WAAY1F,EACZ8E,aACApqC,YAAa6lC,IAGf,MAAMoF,GAAY1tC,EAAAA,GAAAA,IAAgB,KAChC2sC,EAAe,CACbpwF,eAAgB5kB,EAAQ4kB,gBACxB,IAGE4tE,GAAcnqB,EAAAA,GAAAA,IAAgB,KAClC,GAAI4sC,EAAW,CACb,GAAIO,IAAoBV,EAWtB,YAVAtrG,EAAiB,CACfpO,QAASioD,EAAK,yBACd3+C,OAAQ,CACNA,OAAQ,iBACRkH,QAAS,CACPgZ,eAAgB5kB,EAAQ4kB,iBAG5BjZ,WAAY03C,EAAK,gBAGd,GAAIyxD,EAET,YADAW,GAGJ,CACAM,GAAW,IAGPC,EAAkB,cAAepxF,GACjC,MAAE/pB,EAAK,OAAEutF,IAAW6tB,EAAAA,EAAAA,IAAqBj2G,EAASmwE,GAClD1nD,GAAYg7C,EAAAA,GAAAA,GAChB,cD1HmB,WC4HnBuyC,GD5HyC,WC6HzCf,GAAaC,GAAcnwB,IAG7B,OACEljB,GAAAA,GAAAC,cAAA,OACE0E,IAAKA,EACL/9C,UAAWA,EACX4/D,MAAQ,UAASxtF,gBAAoButF,OACrCnkB,QAAU+xC,OAAgCpyG,EAAd4uF,GAE5B3wB,GAAAA,GAAAC,cAAColB,GAAAA,EAAW,CACVH,aAAcvgB,EACdxmE,QAASA,EACTk2G,cAAe5P,EACf6P,mBAAmB,aACnB5uD,KAAM1sD,EACNssF,WAAYA,EACZmT,QAAS+a,EACT3b,QAAShR,EACTsR,qBAAmB,IAEpB2W,GACC9uC,GAAAA,GAAAC,cAACs0C,GAAAA,EAAM,KACLv0C,GAAAA,GAAAC,cAACu0C,GAAAA,EAAe,CACd7vC,IAAK4pC,EACL3mG,IAAK6rG,EACL7sF,WAAWg7C,EAAAA,GAAAA,GDvJgE,WCuJlCyxC,GAAcnwB,IACvD8a,OAAQ0V,EACRhuD,KA9HmB,KA8Hb1sD,EACNk+F,MAAI,EACJud,eAAa,EACbrW,QAAM,EACNkR,QAASwE,KAIX,E,gBC/HV,UAAerzC,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KAAqB,CAAC1qE,GAAUgB,cAClD,MAAM,GAAEsB,EAAE,OAAEN,GAAWhB,EAAQwE,QAAQmH,UAEvC,MAAO,CACLua,OAAOC,EAAAA,EAAAA,KAAgBnnB,EAAQgC,EAAQM,GACvCunG,YAAwC,yBAA3B7pG,EAAOmf,gBACrB,GANiBurD,EAdpB,UAAe,QACb1pE,EAAO,MAAEkmB,EAAK,YAAEmvE,EAAW,YAAEwT,IAE7B,MAAM,UAAEl9F,GAAc3L,EAAQwE,QAE9B,OACEiiE,GAAAA,GAAAC,cAACy0C,GAAAA,EAAS,CACRj1F,MAAOA,GAASva,EAChB0pF,YAAaA,EACbwT,YAAaA,GAGnB,KC6DA,IAAe3hC,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KAAqB,CAAC1qE,GAAUgB,cAClD,MAAM,GAAEsB,EAAE,OAAEN,GAAWhB,EAAQwE,QAAQmH,UACjC01C,GAAaP,EAAAA,EAAAA,KAAkB9hD,EAAQgC,IAASqgD,WAEtD,MAAO,CACLn7B,OAAOC,EAAAA,EAAAA,KAAgBnnB,EAAQgC,EAAQM,GACvCic,MAAMe,EAAAA,EAAAA,KAAWtf,EAAQgC,GACzBo6G,YAAY9nG,EAAAA,EAAAA,KAAWtU,EAAQgB,EAAQI,QACvCwC,SAAU2U,QAAQ8pC,GAAcA,EAAa//C,GAC9C,GATiBooE,EA7DpB,UAAsB,QACpB1pE,EAAO,MAAEkmB,EAAK,KAAE3I,EAAI,SAAE3a,EAAQ,WAAEw4G,IAEhC,MAAM,gBAAE3+C,IAAoBx1C,EAAAA,EAAAA,MAEtBghC,GAAOkgB,EAAAA,GAAAA,MAEP,UAAEx8D,GAAc3L,EAAQwE,QAExB4yF,GAAcnqB,EAAAA,GAAAA,IAAgB,KAClCxQ,EAAgB,CACdz7D,OAAQklB,EAAOllB,OACf0K,QAASwa,EAAO5kB,GAChB06D,cAAc,EACdC,eAAe,GACf,IAGEjrD,EAAYkV,GAAS,cAAeA,EACpCm1F,EAAWn1F,GAAS,YAAaA,EACjCvhB,EAAQ02G,EAAWn1F,EAAM1hB,QAAQG,WAAQ6D,EACzC8yG,EAAYD,GACdriB,EAAAA,EAAAA,KAAkB9yE,EAAO,kBACzB1d,EAEE+yG,GADajvB,EAAAA,GAAAA,GAASgvB,IACG32G,GAAOO,WAAWg0F,QAgBjD,OAdAsiB,EAAAA,GAAAA,GAAe7vG,EAAW3K,OAAQ2K,EAAWrK,GAAI4kB,GAe/CugD,GAAAA,GAAAC,cAAA,OACEr5C,WAAWg7C,EAAAA,GAAAA,GAAe,+BAAgCzlE,GAAY,YAAay4G,GAAY,gBAC/FlyC,SAAU,EACV82B,KAAK,SACLp3B,QAASwyC,EAAWjkB,OAAc5uF,GAEjC6yG,GACC50C,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,uBACbkuF,GACC90C,GAAAA,GAAAC,cAAA,OAAKymB,IAAKouB,EAAUnuB,IAAI,GAAG//D,UAAU,iBAK3Co5C,GAAAA,GAAAC,cAAA,QAAMr5C,UAAU,gBAAewgE,EAAAA,GAAAA,GA1B7BtwE,GAAQ,WAAYA,GAAQA,EAAKyhB,OAE/BipB,EADGj3C,EACE,wBACA,0BADyBwnB,EAAAA,EAAAA,KAAuB4iF,IAIpDpqG,EACHi3C,EAAK,uBACLA,EAAK,uBAAuBQ,EAAAA,EAAAA,KAAaR,EAAM1qC,IAkBK,CAAC,QAAS,qBAGtE,K,gBCmOA,MAGMk+F,GAAsB,KAAO/8G,EAAAA,EAC7Bg9G,GAA4B,KAAOh9G,EAAAA,EA82CzC,IAAewoE,EAAAA,GAAAA,KAAKwC,EAAAA,EAAAA,KAClB,CAAC1qE,EAAQs7F,KACP,MAAM,eACJqhB,EAAc,gBAAEpjG,EAAe,gBAAEqlC,EAAe,wBAAE/wC,EAAuB,cACzE+uG,IACE18G,EAAAA,EAAAA,KAAeF,IACb,QACJgB,EAAO,MAAEuuD,EAAK,eAAEstD,EAAc,WAAEC,EAAU,SAAEh1G,EAAQ,gBAAEyH,EAAe,sBAAEwtG,EAAqB,eAAEC,GAC5F1hB,GACE,GACJh5F,EAAE,OAAElB,EAAM,SAAEsnC,EAAQ,WAAErlC,EAAU,YAAEqmD,EAAW,gBAAEz2C,EAAe,SAAEhD,EAAQ,iBAAEgtG,EAAgB,SAAErgG,GAC1F5b,EAEEoC,GAAOqE,EAAAA,EAAAA,KAAWzH,EAAQoB,GAC1B4pF,GAAiB7pF,EAAAA,EAAAA,KAAqBnB,EAAQoB,GAC9C87G,GAAkBC,EAAAA,EAAAA,KAAY/7G,GAC9Bg8G,GAAsBC,EAAAA,EAAAA,KAAwBj8G,GAC9C8lF,EAAY9jF,IAAQia,EAAAA,EAAAA,KAAcja,GAClC08C,EAAU18C,IAAQ6sB,EAAAA,EAAAA,KAAY7sB,GAC9BwY,GAAgB7K,EAAAA,EAAAA,KAAS3P,QAA+CoI,GAArCqS,EAAAA,EAAAA,KAAmB7b,EAAQoB,GAC9Dk8G,EAAmBt8G,EAAQwE,QAAQ+3G,SAASr2F,MAC5Cs2F,EAAeF,GACjBn2F,EAAAA,EAAAA,KAAgBnnB,EAAQs9G,EAAiBt7G,OAAQs7G,EAAiBh7G,SAClEkH,EAEE8P,EAAeC,EAAgB5K,YAAc4K,EAAgB5K,WAAWrK,SAAShC,GACjFm7G,GAAmBzyB,IAAkB0yB,EAAAA,EAAAA,KAAsB18G,GAC3D28G,EAAgBd,GAAkBC,GAAcW,EAChDr1E,GAASC,EAAAA,EAAAA,KAAaroC,EAAQgB,GAC9B48G,GAAezZ,EAAAA,EAAAA,KAAsBnkG,EAAQgB,GAC7CgpC,EAAYtB,GAAWp0B,EAAAA,EAAAA,KAAWtU,EAAQ0oC,QAAYl/B,EACtDq0G,EAAoBz1E,GAAQ9lC,IAAMw9C,EACpClkC,GAAc+lD,mBAAmBv5B,GAAQ9lC,SACzCkH,EAEEs0G,EAAc98G,EAAQsB,KAAOwF,GAE7B,aAAEf,EAAY,cAAEkf,EAAa,UAAE83F,IAAcn3G,EAAAA,EAAAA,GAAoB5F,IAAY,CAAC,GAC5EgB,OAAQg8G,EAAkBtxG,QAASuxG,IAAiB5xG,EAAAA,EAAAA,GAAkBrL,IAAY,CAAC,EAErFk9G,EAAkBn3G,GAAgBA,IAAiBe,EACnDgR,EAAe/R,GAAejC,EAAAA,EAAAA,KAAkB9E,EAAQimB,GAAiB7kB,EAAQ2F,QAAgByC,EACjG20G,GAAgBz0D,GAAeq0D,EAC/BK,GAAqBtlG,GAAeuvB,EAAAA,EAAAA,KAAaroC,EAAQ8Y,IAC3DqlG,IAAkBjB,GAAoBE,OACY5zG,GAAhD60G,EAAAA,EAAAA,KAAuBr+G,EAAQm+G,IAC/BG,GAA4BxlG,IAAgBqrF,EAAAA,EAAAA,KAAsBnkG,EAAQ8Y,GAC1EylG,GAAmBt4F,GAAgBxe,EAAAA,EAAAA,KAAWzH,EAAQimB,QAAiBzc,EACvEg1G,IAAkBtB,IAAoBE,GAAuBmB,MAC7DE,EAAAA,EAAAA,KAAaF,MACbA,GAAiBpxG,aAAeoxG,GAAiBlmG,cACjDqmG,GAA6D,gBAAvC5lG,GAActT,QAAQ8E,QAAQlI,KACpDu8G,GAAaV,GAAgBD,GAC/B72F,EAAAA,EAAAA,KAAgBnnB,EAAQg+G,EAAkBC,QAC1Cz0G,EACEo1G,GAAcZ,GAAmB1+F,EAAAA,EAAAA,KAAWtf,EAAQg+G,QAAoBx0G,EAExE8zF,IAAiBuhB,EAAAA,EAAAA,KAAqB7+G,EAAQgB,GAC9C89G,GAAgC,WAApBvvG,IAChBggD,EACIA,EAAMr/C,SAASkB,MAAMoQ,IAAMu9F,EAAAA,EAAAA,KAAuB/+G,EAAQwhB,EAAG1Z,MAC7Di3G,EAAAA,EAAAA,KAAuB/+G,EAAQgB,EAAS8G,KAI5CgN,UAAWkqG,GAAgBjyG,YAAakyG,GAAgB,oBAAEjyG,GAC1D++C,MAAOmzD,GAAY,qBAAE9/D,IAClB0/D,IAAanC,GAAmB,CAAC,EAEhCwC,IAAezrF,EAAAA,EAAAA,KAA0B1zB,GACzCo/G,GAAYD,IAAc59G,SAAS2pB,OACnC,GAAEi0F,GAAatrF,UAAY,IAAM,KAAKsrF,GAAa59G,QAAQ2pB,QAE3Dm0F,IAAcC,EAAAA,EAAAA,KAA6Bt+G,GAC3Ci4G,GAAgBoG,KAAexf,EAAAA,EAAAA,KAAoB7/F,EAAQq/G,IAAeA,QAAc71G,EACxF+1G,IAAsBC,EAAAA,EAAAA,KAA4Bx+G,GAExD,IAAIy6F,GAEFA,GADElsC,GAAOr/C,SACIq/C,EAAMr/C,SAASuvG,OAAM,EAAGn9G,GAAI6E,MAAgBu0F,EAAAA,EAAAA,KAAwB17F,EAAQmH,MAE5Eu0F,EAAAA,EAAAA,KAAwB17F,EAAQsC,GAG/C,MAAM8zF,GAA+B,WAApB7mF,IAAgCmwG,EAAAA,EAAAA,KAAwB1/G,EAAQgB,EAAS8G,GACpFo0F,IAAkBC,EAAAA,EAAAA,KAAsBn8F,GACxC2/G,IAAoB/xD,EAAAA,EAAAA,KAA4B5sD,GAChD88F,GAAgB6hB,KAAqB5hB,EAAAA,EAAAA,KAAiB7B,GAAiByjB,IAEvE5Q,IAAoBpkG,EAAAA,EAAAA,KAAiB3K,EAAQoB,EAAQmuD,GAAOm8B,iBAAiBppF,IAAMA,GAEnFg7C,GAAoB/kC,QAAQvX,EAAQia,aAAeja,EAAQu8C,UAC3DC,GAA8BF,IAChCG,EAAAA,EAAAA,KAA0Bz9C,EAAQoB,EAAQJ,EAAQia,WAAa,QAC/DzR,EACEo2G,GAAkBtiE,GACtBy/D,GAAwBj4G,EAAAA,EAAAA,KAAkB9E,EAAQoB,EAAQo8C,SAAgCh0C,EACxFxI,EAEE6+G,GAAoBz8G,GAAMiB,iBAAiBC,SAAStD,EAAQsB,IAE5Dw9G,GAAeh4G,IAAaD,EAAAA,IAAkBzE,GAAMkG,SAAW0zG,EAC/D+C,GAAeD,IAAev2G,EAAAA,EAAAA,KAAuBvJ,EAAQgB,QAAWwI,EAExEw2G,IAAmBC,EAAAA,EAAAA,KAAuBjgH,EAAQoB,GAElD8+G,IAA+BjxD,EAAAA,EAAAA,KAA0CjvD,EAAQoB,EAAQJ,EAAQsB,IACjG69G,IAAmCjxD,EAAAA,EAAAA,KAAuClvD,EAAQoB,GAElFg/G,GAAyBrrB,EAAAA,IAA4B/0F,EAAOm5B,SAAS6S,MAAMq0E,eAC3EF,GAEAtW,GAAyC,yBAA3B7pG,EAAOmf,gBAErBmhG,GAAqB/nG,QAAQqnG,IAAmBhhE,GAAgB76C,EAAAA,EAAAA,IAAc67G,MAAmB/9G,QAEjGqsB,IAAYjN,EAAAA,EAAAA,KAA2BjhB,GACvCugH,GAAen4E,IAAUjnC,EAAAA,EAAAA,KAAqBnB,EAAQooC,EAAO9lC,IAC9DsZ,GAAc47B,eAAiBx2C,EAAQu/G,aAAgBv/G,EAAQu/G,aAE9DC,GAAYp9G,GAAMq9G,YAAc,EAChCC,GAAqB1gH,EAAO8kB,WAAW67F,wBACvCC,GAAqB1yF,IAAa3V,QAAQmoG,IAAsBF,IAAaE,IAE7EG,GAAiB5D,GAAmB3oG,EAAAA,EAAAA,KAAWtU,EAAQi9G,QAAoBzzG,EAE3E8yC,GAAS1/B,EAAW5c,EAAOy8C,oBAAoB7/B,QAAYpT,EAE3D2C,IAAO8T,EAAAA,EAAAA,KAAsBjgB,EAAQgB,GAE3C,MAAO,CACLsnC,OAAOspC,EAAAA,EAAAA,KAAY5xE,GACnBy9G,kBACAr1E,SACAu1E,gBACAC,eACA5zE,YACAk0E,gBAAiBA,GAAmBQ,GACpCZ,cACAhlG,eACAslG,sBACAE,6BACAC,oBACAI,cACAH,kBACAI,eACAthE,qBACA+4C,aAAayqB,EAAAA,EAAAA,KAAyB9gH,EAAQgB,GAC9C+/G,iBAAiBC,EAAAA,EAAAA,KAAsBhhH,EAAQoB,GAC/C09G,aACAxlG,eACAsmG,mBACA50B,iBACAi2B,cAAe/D,EACfE,sBACAl2B,YACApnC,UACAs2C,YACAgpB,aACAnG,iBACAsG,uBACAppB,gBAAgBqF,EAAAA,EAAAA,KAAqBx7F,GACrCy7F,cACAylB,gBACE3oG,QAAQvX,EAAQia,aACZja,EAAQu8C,YACT4jE,EAAAA,EAAAA,KAA8BnhH,EAAQoB,EAAQJ,EAAQia,WAE3DnT,WACAg2F,iBACAsjB,aAAkC,WAApB7xG,EACdU,WACAqzF,kBAAkB9F,EAAAA,EAAAA,KAAuBx9F,EAAQgB,GACjDqgH,kBAAkB3jB,EAAAA,EAAAA,KAAuB19F,EAAQgB,GACjDsgH,sBAAuBthH,EAAOm5B,SAAS6S,MAAMs1E,sBAC7CC,oBAAoBC,EAAAA,EAAAA,KAAyBxhH,GAC7C+uG,qBACA3yD,mBAAoBp8C,EAAOsB,UAAU86C,mBACrC4C,iBAAiBr2C,EAAAA,EAAAA,KAAe3H,IAAgC,cAApBuO,OACxC/F,GAAY0zC,EAAAA,EAAAA,KAAsBl9C,EAAQoB,GAC9Ck/G,sBACAzyG,0BACAgyG,qBACA4B,oBAAoCj4G,IAApByJ,GAAiCjT,EAAOmT,eAAeF,IAAkBC,UACzFwuG,qBAAqCl4G,IAApByJ,EAAgCjT,EAAOmT,eAAeF,IAAkB5E,UAAO7E,EAChG0kB,aACA2vF,oBACAkC,gBACAD,gBACAE,oBACAI,0BACAuB,0BAA0BC,EAAAA,EAAAA,KAA+B5hH,EAAQoB,GACjE8+G,gCACAC,oCACA0B,cAAetpG,QAAQqD,GAAckmG,cACrCC,qBAAqBl+G,EAAAA,EAAAA,KAA+B7D,EAAQ,kBAC5Dw9G,eACA3T,eACAmY,kBAAmBjT,IAAmB/yE,gBACjC4gF,GAAeqF,gBAAkBlT,IAAmBpO,iBACpDic,GAAesF,mBAAqBnT,IAAmBthD,gBAC5D00D,mBAAoBniH,EAAOm5B,SAAS6S,MAAMm2E,sBACtC9+G,GAAc,CAAEurG,gBAAgBwT,EAAAA,EAAAA,KAAqBpiH,EAAQgB,EAA6B,cAApBuO,OAC5C,iBAAnB+tF,IAA+B,CAAEA,sBACxCwhB,IAAa,CACfE,kBACAC,oBACAjyG,uBACAkyG,gBACA9/D,yBAEFmhE,gBACA7gE,KAAM1/C,EAAOu/C,mBAAmBvT,MAChC40E,sBACAC,kBACAvkE,UACAnwC,QACD,GAzNeu+D,EAz2CuB23C,EACzCrhH,UACAshH,+BACA7oB,gCACAmZ,gCACArjD,QACAwgC,YACA+sB,aACAD,iBACA0F,aACAtT,YACAuT,kBACAC,cACAzF,iBACA9uF,YACAw0F,gBACAC,yBACA5F,wBACA0E,iBACAC,kBACAkB,eACAt6E,QACAm1E,kBACAr1E,SACAu1E,gBACAC,eACA5zE,YACA8zE,cACAI,kBACAplG,eACAslG,qBACAE,4BACAC,mBACAI,aACAH,iBACAI,cACAhQ,iBACAtR,iBACAhgD,oBACA0kE,oBACA3rB,cACA0qB,kBACAjC,YACAE,iBACAE,eACAD,mBACA7/D,wBACApyC,uBACAsM,gBACA0xE,kBACAi2B,iBACA7D,uBACAl2B,aACApnC,WACAs2C,YACAgpB,aACAnG,iBACAsG,uBACAe,sBACAuB,iBACA1rB,kBACAsF,cACAylB,mBACAp5G,YACA83G,mBACAxjE,sBACA4C,mBACAnxC,2BACA0B,mBACA6xG,gBACAnxG,YACA6tF,iBACAwF,oBACA+d,oBACAE,sBACA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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/password.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/common/reactions/PaidReactionEmoji.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/UserGift.module.scss?7193","webpack://telegram-t/./src/components/common/gift/UserGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/components/common/BadgeButton.module.scss?da7b","webpack://telegram-t/./src/components/common/BadgeButton.tsx"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: Number(threadId) });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    reactions.results = addPaidReaction(reactions.results, localPaidReaction.localAmount);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId, type WebPageMediaSize } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageBatches = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      messageBatches.forEach((batch) => {\n        callApi('forwardMessages', {\n          fromChat,\n          toChat,\n          toThreadId,\n          messages: batch,\n          isSilent,\n          scheduledAt,\n          sendAs,\n          withMyScore,\n          noAuthors,\n          noCaptions,\n          isCurrentUserPremium,\n          wasDrafted: Boolean(draft),\n          lastMessageId,\n        });\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n  webPageMediaSize?: WebPageMediaSize;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { peer, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { peerId, isMedia, isFullscreen } = payload;\n  const peer = selectPeer(global, peerId);\n  const message = selectSponsoredMessage(global, peerId);\n  if (!peer || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', {\n    peer, random: message.randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { peer, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, peerId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = result;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = resultsByType?.[type] || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n}) {\n  const {\n    query = '', type, offsetRate, offsetId, offsetPeer, peer, maxDate, minDate, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPane', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPane', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      loadAllChats({ listType: 'saved' });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatusId, referrerWebAppKey, expires, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatusId, expires);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatusId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n      },\n    },\n  };\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoiceStarGift, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n} from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, userId, message, shouldHideName, tabId = getCurrentTabId(),\n  } = payload;\n\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < gift.stars) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    userId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n  };\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    starGift: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { starGift, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || starGift?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || starGift?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n  actions.closeGiftModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: starGift ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { StarGiftCategory } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n} from '../../reducers';\nimport {\n  selectPeer,\n  selectUser,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const { gifts, stickers } = result;\n\n  const starGiftsById = buildCollectionByKey(gifts, 'id');\n\n  const starGiftCategoriesByName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(starGiftsById);\n  const allStarGifts = Object.values(starGiftsById);\n\n  const limitedStarGiftIds = allStarGifts.map(\n    (gift) => {\n      return gift.isLimited ? gift.id : undefined;\n    },\n  ).filter(Boolean) as string[];\n\n  starGiftCategoriesByName.all = allStarGiftIds;\n  starGiftCategoriesByName.limited = limitedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!starGiftCategoriesByName[starsCategory]) {\n      starGiftCategoriesByName[starsCategory] = [];\n    }\n    starGiftCategoriesByName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGiftsById,\n    starGiftCategoriesByName,\n    stickers: {\n      ...global.stickers,\n      starGifts: {\n        stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserGifts', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefresh } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const currentGifts = global.users.giftsById[userId];\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const result = await callApi('fetchUserStarGifts', {\n    user,\n    offset: !shouldRefresh ? localNextOffset : '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = {\n    ...global,\n    users: {\n      ...global.users,\n      giftsById: {\n        ...global.users.giftsById,\n        [userId]: {\n          gifts: newGifts,\n          nextOffset: result.nextOffset,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisilibity', async (global, actions, payload): Promise<void> => {\n  const { userId, messageId, shouldUnsave } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('saveStarGift', {\n    user,\n    messageId,\n    shouldUnsave,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.loadUserGifts({ userId: global.currentUserId!, shouldRefresh: true });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { userId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('convertStarGift', {\n    user,\n    messageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.loadUserGifts({ userId: global.currentUserId!, shouldRefresh: true });\n  actions.openStarsBalanceModal({ tabId });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, isPrivate, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateMonetizationInfo,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, onSuccess, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateMonetizationInfo(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('loadMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateMonetizationInfo(global, { isLoading: false });\n  setGlobal(global);\n\n  if (result) {\n    onSuccess();\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('clearMonetizationInfo', (global): ActionReturnType => {\n  return updateMonetizationInfo(global, { error: undefined });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openPrivateChannel', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    actions.showNotification({\n      message: {\n        key: 'PrivateChannelInaccessible',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id, tabId });\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !global.settings.byKey.shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  getPeerTitle,\n  isChatChannel,\n  isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    message, isSchedule, album,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      isSchedule,\n      album,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiUserStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectStarsPayment } from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsBalanceModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('closeStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsTransactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsSubscriptionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    giftModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift') return;\n  const starGift = action.starGift!;\n\n  const giftReceiverId = message.isOutgoing ? message.chatId : global.currentUserId!;\n\n  const gift = {\n    date: message.date,\n    gift: starGift.gift,\n    message: starGift.message,\n    starsToConvert: starGift.starsToConvert,\n    isNameHidden: starGift.isNameHidden,\n    isUnsaved: !starGift.isSaved,\n    fromId: message.isOutgoing ? global.currentUserId : message.chatId,\n    messageId: (!message.isOutgoing || chatId === global.currentUserId) ? message.id : undefined,\n    isConverted: starGift.isConverted,\n  } satisfies ApiUserStarGift;\n\n  actions.openGiftInfoModal({ userId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const userId = 'userId' in payload ? payload.userId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      userId,\n      gift,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftInfoModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n          && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { applyLangPackDifference, requestLangPackDifference } from '../../../util/localization';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.isPrivate,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePasswordError': {\n      return {\n        ...global,\n        monetizationInfo: {\n          ...global.monetizationInfo,\n          isLoading: false,\n          error: update.error,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n\n      if (paymentState.inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', paymentState.inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forUserId) {\n          global = updateTabState(global, {\n            giftModal: {\n              ...giftModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n\n        actions.requestConfetti({ withStars: true, tabId });\n      }\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatusId: sticker.id });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile, isDesktop } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (!isDesktop && !isMessageListOpen) && (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            fluid\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            fluid\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGifts);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {lang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage?: boolean, isMobile?: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, false, noAvatars, isMobile);\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getPeerTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  // eslint-disable-next-line @typescript-eslint/comma-dangle\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ActiveEmojiInteraction } from '../../../types';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"medium\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              size=\"tiny\"\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                size=\"tiny\"\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      chatId: message.chatId,\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isOwnMessage,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription, stars,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {message?.content?.giveaway?.stars ? (\n              <>\n                {renderText(\n                  lang('Chat.Giveaway.Message.Stars.PrizeText', lang('Stars', message?.content?.giveaway?.stars)),\n                  ['simple_markdown'],\n                )}\n                <br />\n                {renderText(lang('AmongWinners', quantity), ['simple_markdown'])}\n              </>\n            ) : (\n              <>\n                {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n                <br />\n                {renderText(lang(\n                  'ActionGiftPremiumSubtitle',\n                  lang('Chat.Giveaway.Info.Months', months),\n                ), ['simple_markdown'])}\n              </>\n            )}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PeerChip\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PeerChip\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const giveawayDuration = isResultsInfo ? lang('Chat.Giveaway.Info.Months', months) : lang('Stars', stars, 'i');\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, giveawayDuration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: (payload: ActionPayloads['clickBotInlineButton']) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n      case 'copy':\n        return <Icon className=\"corner-icon\" name=\"copy\" />;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ chatId: message.chatId, messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    description,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n  const messageId = message.id;\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, messageId, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme, messageId]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {description && (\n        <div>{renderText(description, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePreviousDeprecated(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {message.isVideoProcessingPending && `${lang('lng_approximate')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import React, { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const lang = useOldLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = lang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [lang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing ? formatCurrency(paidMedia.starsAmount, STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <Icon name={correctAnswer ? 'check' : 'close'} className=\"poll-option-icon\" />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { selectPeer } from '../../../global/selectors';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps> = ({\n  message,\n  poll,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const {\n    loadMessage, openPollResults, requestConfetti, showNotification,\n  } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const recentVoterIds = results.recentVoterIds;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const global = getGlobal();\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const peer = selectPeer(global, id);\n      if (peer) {\n        result.push(peer);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const showSolution = useLastCallback(() => {\n    showNotification({\n      localId: getMessageKey(message),\n      message: renderTextWithEntities({ text: poll.results.solution!, entities: poll.results.solutionEntities }),\n      duration: SOLUTION_DURATION,\n      containerSelector: SOLUTION_CONTAINER_ID,\n    });\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        showSolution();\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            onClick={showSolution}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                isRound\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: OldLangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(Poll);\n","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiReaction, ApiReactionPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectPerformanceSettingsValue, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID, IS_IOS } from '../../../util/windowEnvironment';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport AnimatedIcon from '../AnimatedIcon';\nimport StarIcon from '../icons/StarIcon';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  containerId: string;\n  reaction: ApiReactionPaid;\n  className?: string;\n  size?: number;\n  effectSize?: number;\n  localAmount?: number;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  activeReactions?: ApiReaction[];\n  withEffects?: boolean;\n};\n\nconst ICON_SIZE = 1.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\nconst MAX_EFFECT_COUNT = (IS_IOS || IS_ANDROID) ? 2 : 5;\nconst QUALITY = (IS_IOS || IS_ANDROID) ? 2 : 3;\n\nconst PaidReactionEmoji = ({\n  containerId,\n  reaction,\n  className,\n  size = ICON_SIZE,\n  effectSize = EFFECT_SIZE,\n  activeReactions,\n  localAmount,\n  withEffects,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const [effectsIds, setEffectsIds] = useState<number[]>([]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlayEffect = Boolean(\n    withEffects && activeReaction,\n  );\n  const canAddMoreEffects = effectsIds.length < MAX_EFFECT_COUNT;\n\n  useEffectWithPrevDeps(([prevLocalAmount]) => {\n    if (!shouldPlayEffect) {\n      setEffectsIds([]);\n      return;\n    }\n\n    if (!localAmount || localAmount <= (prevLocalAmount || 0)) {\n      return;\n    }\n\n    if (canAddMoreEffects) {\n      setEffectsIds((prev) => [...prev, Date.now()]);\n    }\n  }, [localAmount, canAddMoreEffects, shouldPlayEffect]);\n\n  const {\n    shouldRender: shouldRenderEffect,\n  } = useShowTransition({\n    ref: effectRef,\n    noMountTransition: true,\n    isOpen: shouldPlayEffect,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  const handleEnded = useLastCallback(() => {\n    const newEffectsIds = effectsIds.slice(1);\n    setEffectsIds(newEffectsIds);\n    if (!newEffectsIds.length) {\n      stopActiveReaction({ containerId, reaction });\n    }\n  });\n\n  const rootClassName = buildClassName(\n    styles.root,\n    shouldRenderEffect && styles.animating,\n    className,\n  );\n\n  return (\n    <div className={rootClassName} ref={ref} teactFastList>\n      <StarIcon key=\"icon\" type=\"gold\" size=\"adaptive\" style={`width: ${size}px; height: ${size}px`} />\n      {shouldRenderEffect && effectsIds.map((id) => (\n        <AnimatedIcon\n          key={id}\n          ref={effectRef}\n          className={styles.effect}\n          size={effectSize}\n          tgsUrl={LOCAL_TGS_URLS.StarReactionEffect}\n          play={isIntersecting}\n          noLoop\n          forceAlways\n          nonInteractive\n          quality={QUALITY}\n          onEnded={handleEnded}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { containerId }) => {\n    const { activeReactions } = selectTabState(global);\n\n    const withEffects = selectPerformanceSettingsValue(global, 'reactionEffects');\n\n    return {\n      activeReactions: activeReactions?.[containerId],\n      withEffects,\n    };\n  },\n)(PaidReactionEmoji));\n","import React, { memo, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useContextMenuHandlers from '../../../../hooks/useContextMenuHandlers';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useShowTransition from '../../../../hooks/useShowTransition';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport PaidReactionEmoji from '../../../common/reactions/PaidReactionEmoji';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Sparkles from '../../../common/Sparkles';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\nconst MAX_SCALE = 3;\n\ntype OwnProps = {\n  chatId: string;\n  messageId: number;\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n  onPaidClick?: (count: number) => void;\n};\n\nfunction selectStarsState(global: GlobalState) {\n  return global.stars;\n}\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  chatId,\n  messageId,\n  observeIntersection,\n  onClick,\n  onPaidClick,\n}: OwnProps) => {\n  const {\n    openStarsBalanceModal,\n    resetLocalPaidReactions,\n    openPaidReactionModal,\n    requestWave,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLButtonElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const counterRef = useRef<HTMLSpanElement>(null);\n  const animationRef = useRef<Animation>();\n\n  const isPaid = reaction.reaction.type === 'paid';\n\n  const starsState = useSelector(selectStarsState);\n  const areStarsLoaded = Boolean(starsState);\n\n  const handlePaidClick = useLastCallback((count = 1) => {\n    onPaidClick?.(count);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (reaction.reaction.type === 'paid') {\n      e.stopPropagation(); // Prevent default message double click behavior\n      handlePaidClick();\n\n      return;\n    }\n\n    onClick?.(reaction.reaction);\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      openPaidReactionModal({\n        chatId,\n        messageId,\n      });\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, handleContextMenuHide, isContextMenuOpen, chatId, messageId]);\n\n  useEffectWithPrevDeps(([prevReaction]) => {\n    const amount = reaction.localAmount;\n    const button = ref.current;\n    if (!amount || !button || amount === prevReaction?.localAmount) return;\n\n    if (areStarsLoaded && amount > starsState.balance.amount) {\n      openStarsBalanceModal({\n        originReaction: {\n          chatId,\n          messageId,\n          amount,\n        },\n      });\n      resetLocalPaidReactions({\n        chatId,\n        messageId,\n      });\n      return;\n    }\n\n    if (reaction.localAmount) {\n      const { left, top } = button.getBoundingClientRect();\n      const startX = left + button.offsetWidth / 2;\n      const startY = top + button.offsetHeight / 2;\n      requestWave({ startX, startY });\n    }\n\n    const currentScale = Number(getComputedStyle(button).scale) || 1;\n    animationRef.current?.cancel();\n    // Animate scaling by 20%, and then returning to 1\n    animationRef.current = button.animate([\n      { scale: currentScale },\n      { scale: Math.min(currentScale * 1.2, MAX_SCALE), offset: 0.2 },\n      { scale: 1 },\n    ], {\n      duration: 500 * currentScale,\n      easing: 'ease-out',\n    });\n  }, [reaction, starsState?.balance, areStarsLoaded, chatId, messageId]);\n\n  const prevAmount = usePrevious(reaction.localAmount);\n\n  const {\n    shouldRender: shouldRenderPaidCounter,\n  } = useShowTransition({\n    isOpen: Boolean(reaction.localAmount),\n    ref: counterRef,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isPaid && styles.paid,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      ref={ref}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      onClick={handleClick}\n    >\n      {reaction.reaction.type === 'paid' ? (\n        <>\n          <Sparkles preset=\"button\" />\n          <PaidReactionEmoji\n            className={styles.animatedEmoji}\n            containerId={containerId}\n            reaction={reaction.reaction}\n            size={REACTION_SIZE}\n            localAmount={reaction.localAmount}\n            observeIntersection={observeIntersection}\n          />\n          {shouldRenderPaidCounter && (\n            <AnimatedCounter\n              ref={counterRef}\n              text={`+${formatIntegerCompact(reaction.localAmount || prevAmount!)}`}\n              className={styles.paidCounter}\n            />\n          )}\n        </>\n      ) : (\n        <ReactionAnimatedEmoji\n          className={styles.animatedEmoji}\n          containerId={containerId}\n          reaction={reaction.reaction}\n          size={REACTION_SIZE}\n          observeIntersection={observeIntersection}\n        />\n      )}\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter\n          text={formatIntegerCompact(reaction.count + (reaction.localAmount || 0))}\n          className={styles.counter}\n        />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { ThreadId } from '../../../../types';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/keys/messageKey';\n\nimport useEffectOnce from '../../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: ThreadId;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\nconst PAID_SEND_DELAY = 5000;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  threadId,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n}) => {\n  const {\n    toggleReaction,\n    addLocalPaidReaction,\n    updateMiddleSearch,\n    performMiddleSearch,\n    openPremiumModal,\n    resetLocalPaidReactions,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      updateMiddleSearch({ chatId: message.chatId, threadId, update: { savedTag: reaction } });\n      performMiddleSearch({ chatId: message.chatId, threadId });\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const paidLocalCount = useMemo(() => results.find((r) => r.reaction.type === 'paid')?.localAmount || 0, [results]);\n\n  const handlePaidClick = useLastCallback((count: number) => {\n    addLocalPaidReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      count,\n    });\n  });\n\n  useEffect(() => {\n    if (!paidLocalCount) return;\n\n    showNotification({\n      localId: getMessageKey(message),\n      title: lang('StarsSentTitle'),\n      message: lang('StarsSentText', paidLocalCount),\n      actionText: lang('StarsSentUndo'),\n      cacheBreaker: paidLocalCount.toString(),\n      action: {\n        action: 'resetLocalPaidReactions',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      dismissAction: {\n        action: 'sendPaidReaction',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      duration: PAID_SEND_DELAY,\n      shouldShowTimer: true,\n      disableClickDismiss: true,\n      icon: 'star',\n    });\n  }, [lang, message, paidLocalCount]);\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  // Reset paid reactions on unmount\n  useEffectOnce(() => () => {\n    resetLocalPaidReactions({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction as ApiReaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            chatId={message.chatId}\n            messageId={message.id}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            onPaidClick={handlePaidClick}\n            observeIntersection={observeIntersection}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getPeerTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getPeerTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiPoll,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  FocusDirection,\n  IAlbum,\n  ISettings,\n  MessageListType,\n  ScrollTargetPosition,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageDownloadableMedia,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getPeerTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isSystemBot,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectCanReplyToMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentMiddleSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectPollFromMessage,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n  poll?: ApiPoll;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  poll,\n  onIntersectPinnedMessage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [isPlayingSnapAnimation, setIsPlayingSnapAnimation] = useState(false);\n  const [isPlayingDeleteAnimation, setIsPlayingDeleteAnimation] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  useShowTransition({\n    ref,\n    isOpen: isShown || isJustAdded,\n    noMountTransition: noAppearanceAnimation && !isJustAdded,\n    className: false,\n  });\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      const id = album ? album.mainMessage.id : messageId;\n      onIntersectPinnedMessage({ viewportPinnedIdsToRemove: [id] });\n    }\n  });\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = !withVoiceTranscription && getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isAnonymousForwards\n    && !botSender\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n    && !((sticker || hasAnimatedEmoji) && asForwarded)\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed\n  && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || isChatWithSelf || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasForwardedCustomShape = asForwarded && isCustomShape;\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply || hasForwardedCustomShape;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const messageColorPeer = asForwarded ? originSender : sender;\n  const noUserColors = isOwn && !isCustomShape;\n\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers({\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    isTranslatingChat: Boolean(requestedChatTranslationLanguage),\n    story: replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n    isSavedMessages: isChatWithSelf,\n  });\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (message.isDeleting && element) {\n      if (animateSnap(element)) {\n        setIsPlayingSnapAnimation(true);\n      } else {\n        setIsPlayingDeleteAnimation(true);\n      }\n    }\n  }, [message.isDeleting]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    isPlayingDeleteAnimation && 'is-deleting',\n    isPlayingSnapAnimation && 'is-dissolving',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n    !canShowActionButton && 'no-action-button',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePreviousDeprecated(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = !withVoiceTranscription && hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.mediaType === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    poll,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasCommentButton: withCommentButton,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors, true),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage({\n    elementRef: ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    isQuote: Boolean(focusedQuote),\n    scrollTargetPosition,\n  });\n\n  const viaBusinessBotTitle = viaBusinessBot ? getPeerTitle(lang, viaBusinessBot) : undefined;\n\n  const canShowPostAuthor = !message.senderId;\n  const signature = viaBusinessBotTitle || (canShowPostAuthor && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    beginHeavyAnimation(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded && !isCustomShape ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo || video) {\n        const media = (photo || video);\n        if (media && !isRoundVideo) {\n          width = calculateMediaDimensions({\n            media,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (!asForwarded && invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        threadId={threadId}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasForwardedCustomShape && 'forwarded-custom-shape',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n      && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && shouldRenderSenderName() && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasForwardedCustomShape && (\n              <div className=\"forward-custom-shape-subheader\">\n                <div className=\"message-title\">\n                  {renderForwardTitle()}\n                </div>\n                {renderSenderName(true, true)}\n              </div>\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && !withVoiceTranscription && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n            onHideTranscription={setTranscriptionHidden}\n            isTranscriptionError={isTranscriptionError}\n            isTranscribed={Boolean(transcribedText)}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribing={isTranscribing}\n          />\n        )}\n        {(audio || voice || withVoiceTranscription) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={messageColorPeer?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function shouldRenderSenderName() {\n    const media = photo || video || location || paidMedia;\n    return !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n  }\n\n  function renderForwardTitle() {\n    return (\n      <span className=\"forward-title-container\">\n        {asForwarded && (\n          <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n        )}\n        {asForwarded && (\n          <span className=\"forward-title\">\n            {lang('ForwardedFrom')}\n          </span>\n        )}\n      </span>\n    );\n  }\n\n  function renderSenderName(shouldSkipRenderForwardTitle:boolean = false, shouldSkipRenderAdminTitle: boolean = false) {\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getPeerTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getPeerTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    const hasBotSenderUsername = botSender?.usernames?.length;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name-container',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            dir=\"ltr\"\n          >\n            {!shouldSkipRenderForwardTitle && renderForwardTitle()}\n            <span className=\"message-title-name\">\n              {storyData && <Icon name=\"play-story\" />}\n              {shouldRenderForwardAvatar && (\n                <Avatar\n                  className=\"forward-avatar\"\n                  peer={senderPeer}\n                  size=\"micro\"\n                />\n              )}\n              <span\n                className=\"sender-title\"\n                onClick={handleSenderClick}\n              >\n                {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n              </span>\n              {!asForwarded && senderEmojiStatus && (\n                <CustomEmoji\n                  documentId={senderEmojiStatus.documentId}\n                  loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                  observeIntersectionForLoading={observeIntersectionForLoading}\n                  observeIntersectionForPlaying={observeIntersectionForPlaying}\n                />\n              )}\n              {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n              {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n            </span>\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender?.usernames?.length && (\n          <span className=\"interactive\">\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"sender-title\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames[0].username}`)}\n            </span>\n          </span>\n        )}\n        <div className=\"title-spacer\" />\n        {!shouldSkipRenderAdminTitle && !hasBotSenderUsername ? (forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('message-content-wrapper',\n          contentClassName.includes('text') && 'can-select-text',\n          contentClassName.includes('giveaway') && 'giveaway-result-content')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {shouldRenderSenderName() && renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            threadId={threadId}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage)\n      : forwardHeader && !isSystemBotChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isSystemBotChat && !isAnonymousForwards && replyMessageChat\n      && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const middleSearch = selectCurrentMiddleSearch(global);\n    const highlight = middleSearch?.results?.query\n      && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const canReply = messageListType === 'thread' && selectCanReplyToMessage(global, message, threadId);\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = getMessageDownloadableMedia(message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? selectTopicFromMessage(global, message) : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    const poll = selectPollFromMessage(global, message);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n        scrollTargetPosition,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      effect,\n      poll,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers({\n  lang,\n  selectMessage,\n  message,\n  chatId,\n  threadId,\n  isInDocumentGroup,\n  asForwarded,\n  isScheduled,\n  album,\n  senderPeer,\n  botSender,\n  messageTopic,\n  isTranslatingChat,\n  story,\n  isReplyPrivate,\n  isRepliesChat,\n  isSavedMessages,\n}: {\n  lang: OldLangFn;\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void;\n  message: ApiMessage;\n  chatId: string;\n  threadId: ThreadId;\n  isInDocumentGroup: boolean;\n  asForwarded?: boolean;\n  isScheduled?: boolean;\n  album?: IAlbum;\n  avatarPeer?: ApiPeer;\n  senderPeer?: ApiPeer;\n  botSender?: ApiUser;\n  messageTopic?: ApiTopic;\n  isTranslatingChat?: boolean;\n  story?: ApiStory;\n  isReplyPrivate?: boolean;\n  isRepliesChat?: boolean;\n  isSavedMessages?: boolean;\n}) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    const originalChatId = (isSavedMessages && forwardInfo!.savedFromPeerId) || forwardInfo!.fromChatId!;\n\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: originalChatId, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: originalChatId, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage, ApiPoll } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    poll,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasCommentButton,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    poll?: ApiPoll;\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasCommentButton?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const content = getMessageContent(message);\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = content;\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const hasInlineKeyboard = Boolean(message.inlineButtons);\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (!Object.keys(content).length) {\n    classNames.push('unsupported');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia && !withVoiceTranscription) {\n    classNames.push('media');\n  } else if (video) {\n    classNames.push('video');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText\n      || forceSenderName || hasFactCheck || withVoiceTranscription) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && !hasInlineKeyboard && (photo || !isMediaWithNoText || hasCommentButton)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n}) => {\n  const { openChat } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const shouldPreferOriginSender = forwardInfo\n  && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {withAvatar && (\n        <div className={styles.avatarContainer}>\n          {renderAvatar()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ISettings['theme'];\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ peerId: chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ isMedia: photo || isGif ? true : undefined, peerId: chatId });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    clickSponsoredMessage({ isMedia: true, peerId: chatId });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    openAboutAdsModal({ chatId });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={message!}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { getOffsetToContainer } from '../../util/scroll';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  areAdsEnabled,\n  channelJoinInfo,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo) return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              type: 'joinedChannel',\n              mediaType: 'action',\n              text: '',\n              translationValues: [],\n              targetChatId: message.chatId,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getPeerTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getPeerTitle, isMessageLocal,\n} from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n  getPeerTitle,\n} from '../../../global/helpers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  // eslint-disable-next-line react/no-unused-prop-types\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredMessageContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    clickSponsoredMessage,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsoredMessage({ peerId: chatId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    openAboutAdsModal({ chatId });\n  });\n\n  useEffect(() => {\n    if (shouldRender && sponsoredMessage) {\n      viewSponsoredMessage({ peerId: chatId });\n    }\n  }, [shouldRender, sponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          message={renderingSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPane,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hideChatReportPane({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","import React, {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = chat || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState, chatReportState, pinnedState, botAdState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState, getChatReportState, getBotAdState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal' |\n'suggestedStatusModal' |\n'aboutAdsModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  aboutAdsModal: AboutAdsModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Db6J462r\",\"avatar\":\"vDMy3ohp\",\"stars\":\"xtk5vN0o\",\"hiddenGift\":\"X8rK1aAQ\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiUser, ApiUserStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './UserGift.module.scss';\n\ntype OwnProps = {\n  userId: string;\n  gift: ApiUserStarGift;\n};\n\ntype StateProps = {\n  fromPeer?: ApiUser;\n  sticker?: ApiSticker;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst UserGift = ({\n  userId, gift, fromPeer, sticker,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      userId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden || !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  if (!sticker) return undefined;\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <Avatar className={styles.avatar} peer={avatarPeer} size=\"micro\" />\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-closed-outline\" />\n        </div>\n      )}\n      <div className={styles.stars}>\n        {formatCurrency(gift.gift.stars, STARS_CURRENCY_CODE)}\n      </div>\n      {gift.gift.availabilityTotal && (\n        <GiftRibbon\n          color=\"blue\"\n          text={oldLang('Gift2Limited1OfRibbon', formatIntegerCompact(gift.gift.availabilityTotal))}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { gift }): StateProps => {\n    const sticker = global.stickers.starGifts.stickers[gift.gift.stickerId];\n    const fromPeer = gift.fromId ? selectUser(global, gift.fromId) : undefined;\n\n    return {\n      sticker,\n      fromPeer,\n    };\n  },\n)(UserGift));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStarGift,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport UserGift from '../common/gift/UserGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiUserStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadPreviewMedias,\n    loadUserGifts,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasGiftsTab ? [{ type: 'gifts' as const, title: 'ProfileGifts' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...(hasPreviewMediaTab ? [{\n      type: 'previewMedia' as const, title: 'ProfileBotPreviewTab',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasPreviewMediaTab,\n    hasStoriesTab,\n    hasGiftsTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  const giftIds = useMemo(() => {\n    return gifts?.map(({ date, gift, fromId }) => `${date}-${fromId}-${gift.id}`);\n  }, [gifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n  const handleLoadGifts = useCallback(() => {\n    loadUserGifts({ userId: chatId });\n  }, [chatId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (viewportIds && !viewportIds?.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (gifts?.map((gift) => (\n            <UserGift userId={chatId} key={`${gift.date}-${gift.fromId}-${gift.gift.id}`} gift={gift} />\n          )))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(userFullInfo?.starGiftCount) && !isSavedDialog;\n    const userGifts = global.users.giftsById[chatId];\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: userGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useOldLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{lang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport VerificationMonetizationModal from '../../common/VerificationMonetizationModal.async';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n  passwordHint?: string;\n  error?: string;\n  isLoading?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n  passwordHint,\n  error,\n  isLoading,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [\n    isVerificationMonetizationModalOpen, openVerificationMonetizationModal, closeVerificationMonetizationModal,\n  ] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openVerificationMonetizationModal();\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <VerificationMonetizationModal\n        chatId={chatId}\n        isOpen={isVerificationMonetizationModalOpen}\n        onClose={closeVerificationMonetizationModal}\n        passwordHint={passwordHint}\n        error={error}\n        isLoading={isLoading}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n    const isLoading = global.monetizationInfo?.isLoading;\n    const error = global.monetizationInfo?.error;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n      passwordHint,\n      error,\n      isLoading,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition, SVG_NAMESPACE } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.svg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    const filter = document.createElementNS(SVG_NAMESPACE, 'filter');\n    filter.setAttribute('x', '0');\n    filter.setAttribute('y', '0');\n    filter.setAttribute('width', '1');\n    filter.setAttribute('height', '1');\n    filter.setAttribute('color-interpolation-filters', 'sRGB');\n    addSvgDefinition(filter, FILTER_ID);\n\n    const feImage = document.createElementNS(SVG_NAMESPACE, 'feImage');\n    feImage.setAttribute('href', waveRipple);\n    feImage.setAttribute('result', 'waveImage');\n    filter.appendChild(feImage);\n\n    const feDisplacementMap = document.createElementNS(SVG_NAMESPACE, 'feDisplacementMap');\n    feDisplacementMap.setAttribute('in', 'SourceGraphic');\n    feDisplacementMap.setAttribute('in2', 'waveImage');\n    feDisplacementMap.setAttribute('scale', FILTER_SCALE);\n    feDisplacementMap.setAttribute('xChannelSelector', 'R');\n    feDisplacementMap.setAttribute('yChannelSelector', 'B');\n    filter.appendChild(feDisplacementMap);\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n\n      loadAttachBots();\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hJUqHi4B\"};","import React from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './BadgeButton.module.scss';\n\ntype OwnProps = {\n  children: React.ReactNode;\n  className?: string;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n};\n\nconst BadgeButton = ({\n  children,\n  className,\n  onClick,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default BadgeButton;\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","undefined","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","Boolean","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","peer","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectPeer","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageBatches","config","maxForwardedCount","splitMessagesForForwarding","batch","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","selectSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","Array","shouldIncrement","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","localMessage","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","isApiPeerChat","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","isPrivate","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatusId","referrerWebAppKey","expires","sendWebAppEvent","webAppKey","event","eventType","eventData","customEmojiIconId","isCloseFriend","customEmojiId","duration","botId","suggestedStatusModal","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","byKey","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","requestInfo","saveInfo","inputInvoice","selectPaymentInputInvoice","requestInputInvoice","getRequestInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","isPaymentFormLoading","form","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","balance","stars","amount","openStarsBalanceModal","giftId","sendStarPaymentForm","starGift","formId","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","slug","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","starGiftsById","starGiftCategoriesByName","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","starsCategory","starGifts","shouldRefresh","currentGifts","giftsById","localNextOffset","newGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","loadUserGifts","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","localIsPrivate","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateMonetizationInfo","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","size","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","album","deleteMessageModal","aboutAdsModal","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","icon","getStarsTransactionFromGift","starsTransactionModal","subscription","starsSubscriptionModal","giftReceiverId","starsToConvert","isNameHidden","isUnsaved","isSaved","fromId","isConverted","openGiftInfoModal","giftInfoModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","dismissNotification","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","senderId","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","loadFullUser","emojiStatus","targetUserFullInfo","botInfo","menuButton","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","paidReactionPrivacy","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","monetizationInfo","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","giftModalState","isCompleted","starsModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","animationLevel","attachBots","selectTheme","canInstall","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","useLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isDesktop","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PeerChip","fluid","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","MessageListBotInfo","isInMessageList","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","renderText","INTERSECTION_THROTTLE_FOR_MEDIA","getSingularPaidMedia","singularMedia","isPreview","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","noAvatars","ratios","isSingleMessage","calculateMediaDimensions","getRatios","proportions","ratio","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","resolve","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","handleBeforeContextMenu","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","handleClick","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","EmbeddedStory","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","onMouseDown","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","noSelectControls","selectIsInSelectMode","isSelected","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","Album","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","containerHeight","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","getMessagePhoto","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","getIsDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","audio","remove","Audio","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","AnimatedCustomEmoji","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","AnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","CommentButton","isCustomShape","disabled","shouldRenderLoading","useAsyncRendering","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","getContactName","countryList","phoneCodes","phoneCodeList","Contact","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","emojiIconClassName","formatPhoneNumberWithCode","isText","COLOR","FactCheck","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","peerColor","renderTextWithEntities","Separator","Game","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","Giveaway","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstKey","giveawayDuration","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","InlineButtons","buttonTexts","texts","renderKeyboardButtonText","j","RE_TME_LINK","renderIcon","Invoice","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","InvoiceMediaPreview","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","Location","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","dpr","useDevicePixelRatio","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePreviousDeprecated","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","MessageMeta","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","effectEmoji","onTranslationClick","onEffectClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","MessagePhoneCall","requestMasterAndRequestCall","isMissed","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","PaidMediaOverlay","children","isClickable","starsAmount","replaceWithTeact","STARS_ICON_PLACEHOLDER","pill","STARS_CURRENCY_CODE","getPercentage","total","toFixed","PollOption","answer","voteResults","totalVoters","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","isChosen","answerPercent","votersCount","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","Poll","observeIntersectionForPlaying","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","recentVoterIds","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","showSolution","solution","solutionEntities","containerSelector","question","getPollTypeString","AvatarList","CheckboxGroup","loadingOptions","isRound","RadioGroup","loadingOption","getReadableVotersCount","ICON_SIZE","EFFECT_SIZE","MAX_EFFECT_COUNT","QUALITY","PaidReactionEmoji","effectSize","effectRef","effectsIds","setEffectsIds","activeReaction","shouldPlayEffect","canAddMoreEffects","prevLocalAmount","shouldRenderEffect","handleEnded","newEffectsIds","rootClassName","animating","teactFastList","AnimatedIcon","StarReactionEffect","onEnded","REACTION_SIZE","selectStarsState","ReactionButton","recentReactors","chosenClassName","onPaidClick","openPaidReactionModal","requestWave","counterRef","animationRef","isPaid","starsState","useSelector","areStarsLoaded","handlePaidClick","prevReaction","left","top","offsetWidth","offsetHeight","currentScale","getComputedStyle","scale","cancel","animate","easing","prevAmount","shouldRenderPaidCounter","own","paid","isReactionChosen","Sparkles","preset","animatedEmoji","paidCounter","ReactionAnimatedEmoji","counter","Reactions","isOutside","metaChildren","noRecentReactors","addLocalPaidReaction","performMiddleSearch","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","paidLocalCount","cacheBreaker","dismissAction","shouldShowTimer","disableClickDismiss","handleRemoveReaction","useEffectOnce","SavedTagButton","withContextMenu","onRemove","Sticker","withEffect","onStopEffect","openStickerSet","hasEffect","isMirrored","getStickerMediaHash","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","useOverlayPosition","anchorRef","overlayRef","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","Portal","AnimatedSticker","isLowPriority","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","middleSearch","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectCanReplyToMessage","downloadableMedia","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isRepliesChat","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onIntersectPinnedMessage","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","isPlayingSnapAnimation","setIsPlayingSnapAnimation","isPlayingDeleteAnimation","setIsPlayingDeleteAnimation","requestEffect","isTouchScreen","useOnIntersect","contextMenuAnchor","contextMenuTarget","noAppearanceAnimation","markShown","useUnmountCleanup","viewportPinnedIdsToRemove","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","withVoiceTranscription","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","asForwarded","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","isRoundVideo","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasForwardedCustomShape","hasSubheader","messageSender","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","isSavedMessages","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","isQuote","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","albumIndex","ScheduledAlbum","originalChatId","savedFromPeerId","selectWithGroupedId","useInnerHandlers","handleEffectClick","animateSnap","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasCommentButton","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMediaWithNoText","hasInlineKeyboard","isViaBot","hasFooter","emojiOnlyCount","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","viaBusinessBotTitle","canShowPostAuthor","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","beginHeavyAnimation","resizeDiff","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","meta","renderWebPage","WebPage","backgroundEmojiId","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","messageText","shouldRenderSenderName","renderForwardTitle","renderSenderName","shouldSkipRenderForwardTitle","shouldSkipRenderAdminTitle","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","hasBotSenderUsername","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","textContentClass","shouldReadMedia","EmbeddedMessage","senderChat","forwardSender","MessageEffect","shouldPlay","onStop","RoundVideo","onReadMedia","onHideTranscription","isTranscribed","canTranscribe","AudioOrigin","isSelectable","onPlay","Document","Story","StoryMention","DotAnimation","footerClass","hasContentAfterText","isMetaInText","renderInvertedMediaContent","MessageAppendix","ContextMenuContainer","anchor","targetHref","SenderGroupContainer","handleAvatarClick","hiddenName","renderAvatar","SponsoredMessageContextMenuContainer","SponsoredMessage","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","openAboutAdsModal","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","handleHideSponsoredMessage","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","renderMediaContent","isRecommended","BadgeButton","isRectangular","canReport","triggerRef","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","dataset","shouldUpdateViews","albumMainId","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","senderGroupElements","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","lastMessageOrAlbum","firstMessageOrAlbum","firstMessage","calculateSenderGroups","SCHEDULED_WHEN_ONLINE","formatHumanDate","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","translationValues","targetChatId","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","computedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","useStickyDates","handleScroll","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","customIcon","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","pinMessage","loadPinnedMessages","currentPinnedIndex","isArray","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","renderingPinnedMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","confirmLabel","isFullVideo","asSpoiler","shouldRenderVideo","pluralValue","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","emojiStatusSticker","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","isBackButtonActive","isTablet","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPane","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","confirmIsDestructive","Checkbox","onCheck","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","isFirstRenderRef","audioPlayerState","pinnedState","stateArray","isFirstRender","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","Link","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","kind","isImage","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onDragEnter","isBlockingAnimation","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","SuggestedStatusModal","AboutAdsModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","stickerId","fromPeer","UserGift","CUSTOM_PEER_HIDDEN","availabilityTotal","GiftRibbon","PreviewMedia","idPrefix","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","hasGiftsTab","starGiftCount","userGifts","similarChannels","limitSimilarChannels","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadPreviewMedias","deletingUserId","setDeletingUserId","profileId","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","isCustomPeer","avatarIcon","peerColorId","CUSTOM_PEER_TO_BE_DISTRIBUTED","titleKey","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","VerificationMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","passwordHint","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isVerificationMonetizationModalOpen","openVerificationMonetizationModal","closeVerificationMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","graph","create","topText","linkText","withNodes","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","clear","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","rotate","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","createElementNS","SVG_NAMESPACE","addSvgDefinition","feImage","waveRipple","appendChild","feDisplacementMap","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}