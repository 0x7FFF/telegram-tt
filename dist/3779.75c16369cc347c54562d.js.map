{"version":3,"file":"3779.75c16369cc347c54562d.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/hooks/useLongPress.ts","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/StoryViewers.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/WebAppModal.module.scss?73f6","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/common/ReactionEmoji.module.scss?b399","webpack://telegram-t/./src/components/common/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/common/InviteLink.module.scss?000d","webpack://telegram-t/./src/components/common/InviteLink.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.module.scss?8334","webpack://telegram-t/./src/components/middle/message/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.module.scss?e7ab","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/util/launchMediaWorkers.ts"],"sourcesContent":["import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize,\n  getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n  const isLocal = Boolean(localBlobUrl);\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  const dimensions = useMemo(() => {\n    if (message) {\n      if (isDocumentPhoto || isDocumentVideo) {\n        return getMessageDocument(message)!.mediaSize!;\n      } else if (photo || webPagePhoto || actionPhoto) {\n        return getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n      } else if (video || webPageVideo) {\n        return getVideoDimensions((video || webPageVideo)!)!;\n      }\n    } else {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n    return undefined;\n  }, [\n    isDocumentPhoto,\n    isDocumentVideo,\n    isVideoAvatar,\n    message,\n    photo,\n    video,\n    actionPhoto,\n    webPagePhoto,\n    webPageVideo,\n  ]);\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useEffect(() => {\n    return () => {\n      setZoomChange(1);\n    };\n  }, []);\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectBot,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const isChatWithBot = Boolean(selectBot(global, message.chatId));\n\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  });\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { createSignal } from '../util/signals';\nimport { useEffect } from '../lib/teact/teact';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useEffect(() => {\n    return () => {\n      setCurrentTime(0);\n    };\n  }, []);\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import { createSignal } from '../../../util/signals';\nimport { useEffect } from '../../../lib/teact/teact';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useEffect(() => {\n    return () => {\n      setIsVideoWaiting(false);\n    };\n  }, []);\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { requestMutation } from '../fasterdom/fasterdom';\n\nimport { callApi } from '../../api/gramjs';\nimport { ApiMediaFormat } from '../../api/types';\nimport { IS_ANDROID, IS_IOS } from '../../util/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames: Map<number, ImageBitmap> = new Map();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => videoPreview?.destroy();\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"FWH9e05HHn4BJrkuqmgL\",\"preview\":\"PmR9chdfbwrolc8FOkNB\",\"previewCanvas\":\"O7IGkaF5yzopTKVImH2v\",\"previewTime\":\"R85IB61J5InMMYwLQWxU\",\"previewTimeText\":\"QBMgsZDdCiXJzzHzd8rg\",\"track\":\"YiY5CtrarIYsGovxCo1b\",\"buffered\":\"s3rSBAeNFQimTK3eRl8t\",\"played\":\"sQTcQShWx8rMXJFKN2hO\",\"seeking\":\"pNanY7hqtTLHXdRob0qg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useState, useEffect, memo, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport { captureEvents } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { clamp, round } from '../../util/math';\nimport { animateNumber } from '../../util/animation';\n\nimport { createVideoPreviews, renderVideoPreview, getPreviewDimensions } from '../../lib/video-preview/VideoPreview';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: Function | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  // eslint-disable-next-line no-null/no-null\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const progressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewTimeRef = useRef<HTMLDivElement>(null);\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = e instanceof MouseEvent ? e.pageX : e.touches[0].pageX;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useLayoutEffect,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { ApiDimensions } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useSignal from '../../hooks/useSignal';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport SeekLine from './SeekLine';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={buildClassName('icon', isPlaying ? 'icon-pause' : 'icon-play')} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={buildClassName('icon ', isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen')} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { clamp } from '../../util/math';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered && !isUnsupported, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, []);\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV, ARE_WEBCODECS_SUPPORTED } from '../../util/windowEnvironment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    withAnimation,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useLang from '../../hooks/useLang';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSignal from '../../hooks/useSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useZoomChange from './hooks/useZoomChangeSignal';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const rightSlideRef = useRef<HTMLDivElement>(null);\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveMediaId, setActiveMediaId] = useSignal<number | undefined>(mediaId);\n  const activeMediaIdRef = useSignalRef(getActiveMediaId);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeMediaId = useDerivedState(getActiveMediaId);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveMediaId(mediaId);\n    }\n  }, [mediaId, setActiveMediaId, transformRef]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaIdRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaIdRef.current, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaIdRef.current, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    onClose,\n    setTransform,\n    getMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    withAnimation,\n    setIsMouseDown,\n    setIsActive,\n    isHidden,\n    isFullscreen,\n    transformRef,\n    setActiveMediaId,\n    activeMediaIdRef,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={prevMediaId}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={nextMediaId}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  });\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={sender.id} size=\"medium\" peer={sender} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiMessage, ApiPhoto, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectScheduledMessage,\n  selectUser,\n  selectOutlyingListByMessageId,\n  selectUserFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStateRef } from '../../hooks/useStateRef';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  avatarOwnerFallbackPhoto?: ApiPhoto;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  avatarOwnerFallbackPhoto,\n  message,\n  chatMessages,\n  collectionIds,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const mediaIdRef = useStateRef(mediaId);\n  const handleFooterClick = useLastCallback(() => {\n    handleClose();\n\n    const currentMediaId = mediaIdRef.current;\n\n    if (!chatId || !currentMediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: currentMediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: currentMediaId });\n    }\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  });\n\n  const selectMedia = useLastCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const mediaIdsRef = useStateRef(mediaIds);\n\n  const getMediaId = useLastCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const mIds = mediaIdsRef.current;\n    const index = mIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mIds.length - 1)) {\n      return mIds[index + direction];\n    }\n    return undefined;\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  });\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === avatarOwnerFallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        withAnimation,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        avatarOwnerFallbackPhoto: user ? selectUserFullInfo(global, avatarOwnerId)?.fallbackPhoto : undefined,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { IDimensions } from '../../../global/types';\n\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 404;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  return {\n    activeSlide: {\n      width: BASE_ACTIVE_SLIDE_WIDTH * scale,\n      height: BASE_ACTIVE_SLIDE_HEIGHT * scale,\n    },\n    slide: {\n      width: BASE_SLIDE_WIDTH * scale,\n      height: BASE_SLIDE_HEIGHT * scale,\n    },\n    scale,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = (mainOffset + additionalOffset) * scale;\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"uXHBlEUDZKJr1u7dvj4k\",\"viewed\":\"GiJXPT0zbAmsx82Nm8ci\",\"active\":\"PaCfy7Nei0tOQAE9i0XV\",\"inner\":\"goBtmBaUzEEUaT_NbrvT\",\"progress\":\"kvGsn6HE3seo_5jfVRs1\",\"paused\":\"J1oS3YeXCbdBhKm3eIBi\"};","import React, {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gJ2Z_EQBnbDYMJ2NKHPj\",\"fullSize\":\"F47ywnKRf0QnMNfkDAhN\",\"backdrop\":\"aZegQFa4eGDydcez2hhX\",\"captionBackdrop\":\"tt0i3c46mBP8eper4sX9\",\"backdropNonInteractive\":\"qBNqjd4Jivn9JZM9LTR1\",\"close\":\"oHmnmRivkoOTtFlipOlm\",\"wrapper\":\"tfRbD6UXCoHpURk9jkFs\",\"slideAnimation\":\"KeE62xWk53FkLDgmLDHC\",\"slideAnimationToActive\":\"u4UY_cga_HGYeSeXtJFy\",\"content\":\"AS2XHnign2xV16Kjj6bL\",\"slideAnimationFromActive\":\"fMXsSVdwtbHbHVPe7TRY\",\"composer\":\"RrR48bdsuf7ziCaT39SR\",\"caption\":\"DfZIQpvbsc1Lopohx81T\",\"storyIndicators\":\"E5huzrUvL4LEC9dx4KwW\",\"slide\":\"Xd5grwcEn6r_RQyYYwTw\",\"slidePreview\":\"fH5dgpor5kv4sjYevuiU\",\"activeSlide\":\"Cs943zlR1iWQhsSG8QUZ\",\"slideInner\":\"UxBW6ApLLCk97qq1YxJH\",\"mediaWrapper\":\"tOO6t_Iv78rQnpDEOgh8\",\"media\":\"IWB6V7TuwMQUqxdPJDKT\",\"name\":\"zX3llen5J3KlIJGrCz2u\",\"forward\":\"mFCpxKAL5_Xa89VkFv5i\",\"storyHeader\":\"Kcahvy487TvQIEvXamQu\",\"sender\":\"E1bHDTXle6dida5Kw_Ob\",\"senderInfo\":\"MtJgsqpsPRYORGENbJDM\",\"senderName\":\"h7HZqUP3UoB_TWRA3ien\",\"storyMetaRow\":\"N9xfCNDRX4SkiLZ4_S9E\",\"storyMeta\":\"_fljB0mSVyj1YctbrtIQ\",\"actions\":\"rlPJs7dRj8mRAAzEoxxg\",\"visibilityButton\":\"L2DlAgxoJ9gNRcSiZRkI\",\"visibilityButtonSelf\":\"uFpWDsHmcfI_qQSfKtph\",\"button\":\"Njk4jy0AOyHD31ABkS6M\",\"buttonMenu\":\"nqQ3MS3rHe4c00GJvtwh\",\"captionInner\":\"jXIvfN5QPnrzWo9eANQf\",\"captionContent\":\"_nAzidGNr0mdSkqyvmj_\",\"expanded\":\"zAH8_B8BrtyxRZR_iHvS\",\"hasOverflow\":\"d3FJsMTVC2kORJMGxgbG\",\"animate\":\"ZguPPKlRJgtkBr7ENcvT\",\"captionInteractive\":\"fsSpTEXhxEhQa5DEeRVt\",\"captionExpand\":\"HEWICMDIyCsZP70dwK68\",\"hidden\":\"xXfNy3huKEBoZLbfiqZL\",\"navigate\":\"nAa_W_FxKosbXRpB3tgu\",\"prev\":\"zwhGmE8SJA8XAnthasxt\",\"next\":\"a9J5InzXCE1XEX5m3A6J\",\"recentViewers\":\"N8tqQ_Z0rKf1tO_Bcg78\",\"recentViewersInteractive\":\"ftzBm5h1HJpZMMU5eWg8\",\"recentViewer\":\"BQl0jmqxDZ9FVomJOfN3\",\"recentViewersCount\":\"HgVhOw9B6AZOvYcG9XMA\",\"modal\":\"RiK8REKD0zdsqi8XRHh5\",\"seenByList\":\"Yikb41TpYxdFcNR2vvLq\",\"seenByListLoading\":\"edjqCi7ln8JNBJ6yF0SO\",\"thumbnail\":\"lFdi4MIeHlnMCtiJbwTA\",\"skeleton\":\"xdp13qDPuCtBUYtJNUnJ\",\"expiredText\":\"RbONa2EB74FigMNxDcQa\"};","import React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiStory } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  onExpand: NoneToVoidFunction;\n  className?: string;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst OVERFLOW_THRESHOLD_PX = 4;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand,\n}: OwnProps) {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const [hasOverflow, setHasOverflow] = useState<boolean>(false);\n  const [height, setHeight] = useState<number>(0);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    const { scrollHeight, clientHeight } = ref.current;\n    setHasOverflow(scrollHeight - clientHeight > OVERFLOW_THRESHOLD_PX);\n    setHeight(scrollHeight - clientHeight);\n  }, []);\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [height, isExpanded]);\n\n  const canExpand = hasOverflow && !isExpanded;\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    hasOverflow && !isExpanded && styles.hasOverflow,\n    (isExpanded || prevIsExpanded) && styles.expanded,\n    canExpand && styles.captionInteractive,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        style={`--scroll-height: ${isExpanded ? height : 0}px;`}\n        onClick={canExpand ? () => onExpand() : undefined}\n      >\n        <div ref={ref} className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}>\n          {hasOverflow && (\n            <div className={buildClassName(styles.captionExpand, isExpanded && styles.hidden)}>\n              {lang('Story.CaptionShowMore')}\n            </div>\n          )}\n\n          <MessageText\n            messageOrStory={story}\n            withTranslucentThumbs\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiStory, ApiTypeStory, ApiUser } from '../../api/types';\nimport type { IDimensions } from '../../global/types';\nimport type { Signal } from '../../util/signals';\n\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\nimport {\n  getStoryMediaHash, getUserFirstOrLastName, hasMessageText,\n} from '../../global/helpers';\nimport { formatRelativeTime } from '../../util/dateFormat';\nimport { getServerTime } from '../../util/serverTime';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLongPress from '../../hooks/useLongPress';\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../hooks/useMediaTransition';\n\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport StoryProgress from './StoryProgress';\nimport Composer from '../common/Composer';\nimport MenuItem from '../ui/MenuItem';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Skeleton from '../ui/Skeleton';\nimport StoryCaption from './StoryCaption';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  userId: string;\n  storyId: number;\n  dimensions: IDimensions;\n  // eslint-disable-next-line react/no-unused-prop-types\n  isReportModalOpen?: boolean;\n  // eslint-disable-next-line react/no-unused-prop-types\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (storyId: number) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  user: ApiUser;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  isSelf: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  areChatSettingsLoaded?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = 4;\nconst SPACEBAR_CODE = 32;\n\nconst PRIMARY_VIDEO_MIME = 'video/mp4; codecs=\"hvc1\"';\nconst SECONDARY_VIDEO_MIME = 'video/mp4; codecs=\"avc1.64001E\"';\n\nfunction Story({\n  isSelf,\n  userId,\n  storyId,\n  user,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  areChatSettingsLoaded,\n  getIsAnimating,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadUserSkippedStories,\n    openForwardMenu,\n    openStorySeenBy,\n    copyStoryLink,\n    toggleStoryPinned,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadChatSettings,\n    fetchChat,\n    loadStorySeenBy,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const canPinToProfile = useCurrentOrPrev(\n    isSelf && isLoadedStory ? !story.isPinned : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isSelf && isLoadedStory ? story.isPinned : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isSelf && isLoadedStory && (story!.date + viewersExpirePeriod) < getServerTime(),\n  );\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && userId !== storyChangelogUserId\n    && !isCaptionExpanded,\n  );\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n  const {\n    shouldRender: shouldRenderSkeleton, transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransition((isVideo && !hasFullData) || (!isVideo && !previewBlobUrl));\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransition(Boolean(fullMediaData));\n\n  const hasThumb = !previewBlobUrl && !hasFullData;\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransition(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransition(!isSelf);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransition(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransition(true);\n\n  useStoryPreloader(userId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ userId, storyId });\n    }\n  }, [storyId, userId]);\n\n  useEffect(() => {\n    loadUserSkippedStories({ userId });\n  }, [userId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    if (!isChatExist) {\n      fetchChat({ chatId: userId });\n    }\n  }, [isChatExist, userId]);\n  useEffect(() => {\n    if (isChatExist && !areChatSettingsLoaded) {\n      loadChatSettings({ chatId: userId });\n    }\n  }, [areChatSettingsLoaded, isChatExist, userId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress(handleLongPressStart, handleLongPressEnd);\n\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !isVideo || !fullMediaData);\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => { if (hasAllData && !isUnsupported) handlePlayStory(); }, [hasAllData, isUnsupported]);\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isSelf || isDeletedStory || areViewsExpired) return;\n    if (story && 'recentViewerIds' in story && story.recentViewerIds?.length) return;\n\n    // Refresh recent viewers list on new stories each view\n    loadStorySeenBy({ storyId });\n  }, [isDeletedStory, areViewsExpired, isSelf, story, storyId]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) return;\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      setCurrentTime(video.currentTime);\n    }\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: userId });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    setCurrentTime(0);\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    setCurrentTime(0);\n    openNextStory();\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ userId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryPinned({ storyId, isPinned: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryPinned({ storyId, isPinned: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    setCurrentTime(0);\n    onDelete(story!.id);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: userId, storyId });\n    handlePauseStory();\n  });\n\n  const handleOpenStorySeenBy = useLastCallback(() => {\n    openStorySeenBy({ storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'selectedContacts');\n\n    let message;\n    const myName = getUserFirstOrLastName(user);\n    switch (visibility) {\n      case 'selectedContacts':\n        message = lang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = lang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = lang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: lang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: lang('StoryNotFound'),\n    });\n  }, [lang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className={isOpen ? 'active' : ''}\n          onClick={onTrigger}\n          ariaLabel={lang('AccDescrOpenMenu2')}\n        >\n          <i className=\"icon icon-more\" aria-hidden />\n        </Button>\n      );\n    };\n  }, [isMobile, lang]);\n\n  function renderStoriesTabs() {\n    const duration = isLoadedStory && story.content.video?.duration\n      ? story.content.video.duration\n      : undefined;\n\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    let privacyIcon = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isSelf) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'selectedContacts':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isSelf && styles.visibilityButtonSelf)}\n        onClick={isSelf ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <i className={`icon icon-${privacyIcon}`} aria-hidden />\n        {isSelf && <i className=\"icon icon-next\" aria-hidden />}\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Avatar\n          peer={user}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderInfo}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getUserFirstOrLastName(user) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativeTime(lang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{lang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={buildClassName(styles.button, styles.buttonVolume)}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={lang('Volume')}\n            >\n              <i\n                className={buildClassName(\n                  'icon',\n                  isMuted || noSound ? 'icon-speaker-muted-story' : 'icon-speaker-story',\n                )}\n                aria-hidden\n              />\n            </Button>\n          )}\n          <DropdownMenu\n            className={buildClassName(styles.button, styles.buttonMenu)}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handlePauseStory}\n            onClose={handlePlayStory}\n          >\n            <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{lang('CopyLink')}</MenuItem>\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>{lang('StorySave')}</MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>{lang('ArchiveStory')}</MenuItem>\n            )}\n            {isSelf && <MenuItem icon=\"delete\" destructive onClick={handleDeleteStoryClick}>{lang('Delete')}</MenuItem>}\n            {!isSelf && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{lang('Report')}</MenuItem>}\n          </DropdownMenu>\n        </div>\n      </div>\n    );\n  }\n\n  function renderRecentViewers() {\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById } } = getGlobal();\n\n    const { recentViewerIds, viewsCount } = story as ApiStory;\n\n    if (!viewsCount) {\n      return (\n        <div className={buildClassName(styles.recentViewers, appearanceAnimationClassNames)}>\n          {lang('NobodyViewed')}\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={buildClassName(\n          styles.recentViewers,\n          styles.recentViewersInteractive,\n          appearanceAnimationClassNames,\n        )}\n        onClick={handleOpenStorySeenBy}\n      >\n        {!areViewsExpired && recentViewerIds?.map((viewerId) => (\n          <Avatar\n            key={`viewer-${viewerId}`}\n            size=\"small\"\n            peer={usersById[viewerId]}\n            className={styles.recentViewer}\n          />\n        ))}\n\n        <span className={styles.recentViewersCount}>{lang('Views', viewsCount, 'i')}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img src={previewBlobUrl} alt=\"\" className={buildClassName(styles.media, previewTransitionClassNames)} />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton\n            width={dimensions.width}\n            height={dimensions.height}\n            className={buildClassName(skeletonTransitionClassNames, styles.skeleton)}\n          />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPlaying={markStoryPlaying}\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n            onEnded={handleOpenNextStory}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={lang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={lang('Next')}\n            />\n          </>\n        )}\n      </div>\n\n      {isSelf && renderRecentViewers()}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={lang('Close')}\n        />\n      )}\n      {hasText && (\n        <StoryCaption\n          key={`caption-${storyId}-${userId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          className={appearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={userId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isSelf}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector=\"#editable-story-input-text\"\n          editableInputId=\"editable-story-input-text\"\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={lang('ReplyPrivately')}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  userId, storyId, isPrivateStories, isArchivedStories, isReportModalOpen, isDeleteModalOpen,\n}): StateProps => {\n  const { currentUserId, appConfig } = global;\n  const user = global.users.byId[userId];\n  const chat = selectChat(global, userId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: { isMuted, storyIdSeenBy, isPrivacyModalOpen },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const {\n    byId, orderedIds, pinnedIds, archiveIds,\n  } = global.stories.byUserId[userId] || {};\n  const story = byId && storyId ? byId[storyId] : undefined;\n  const shouldForcePause = Boolean(\n    storyIdSeenBy || forwardedStoryId || tabState.reactionPicker?.storyId || isReportModalOpen || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen,\n  );\n\n  return {\n    user,\n    story,\n    orderedIds: isArchivedStories ? archiveIds : (isPrivateStories ? pinnedIds : orderedIds),\n    isMuted,\n    isSelf: currentUserId === userId,\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    areChatSettingsLoaded: Boolean(chat?.settings),\n  };\n})(Story));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst DEFAULT_THRESHOLD = 250;\n\nfunction useLongPress(\n  onStart: NoneToVoidFunction,\n  onEnd: NoneToVoidFunction,\n) {\n  const isLongPressActive = useRef(false);\n  const isPressed = useRef(false);\n  const timerId = useRef<number | undefined>(undefined);\n\n  const start = useCallback((e: React.MouseEvent | React.TouchEvent) => {\n    const canProcessEvent = ('button' in e && e.button === 0) || ('touches' in e && e.touches.length > 0);\n    if (isPressed.current || !canProcessEvent) {\n      return;\n    }\n\n    isPressed.current = true;\n    timerId.current = window.setTimeout(() => {\n      onStart();\n      isLongPressActive.current = true;\n    }, DEFAULT_THRESHOLD);\n  }, [onStart]);\n\n  const cancel = useCallback(() => {\n    if (isLongPressActive.current) {\n      onEnd();\n    }\n\n    isLongPressActive.current = false;\n    isPressed.current = false;\n    window.clearTimeout(timerId.current);\n  }, [onEnd]);\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(timerId.current);\n    };\n  }, []);\n\n  return {\n    onMouseDown: start,\n    onMouseUp: cancel,\n    onMouseLeave: cancel,\n    onTouchStart: start,\n    onTouchEnd: cancel,\n  };\n}\n\nexport default useLongPress;\n","import React, { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory, ApiUser, ApiUserStories } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { getStoryMediaHash, getUserFirstOrLastName } from '../../global/helpers';\nimport useMedia from '../../hooks/useMedia';\n\nimport Avatar from '../common/Avatar';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  user?: ApiUser;\n  userStories?: ApiUserStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n}\n\nfunction StoryPreview({\n  user, userStories, lastViewedId,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadUserSkippedStories } = getActions();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!userStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = userStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1);\n    const resultId = byId[previewIndexId]?.id || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, userStories]);\n\n  useEffect(() => {\n    if (story && !('content' in story)) {\n      loadUserSkippedStories({ userId: story.userId });\n    }\n  }, [story]);\n\n  const video = story && 'content' in story ? story.content.video : undefined;\n  const imageHash = story && 'content' in story\n    ? getStoryMediaHash(story)\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!user || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ userId: story.userId, storyId: story.id }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n\n      <div className={styles.content}>\n        <Avatar\n          peer={user}\n          withStory\n          storyViewerMode=\"disabled\"\n        />\n        <div className={styles.name}>{renderText(getUserFirstOrLastName(user) || '')}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { user }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByUserIds,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: user?.id ? lastViewedByUserIds?.[user.id] : undefined,\n  };\n})(StoryPreview));\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiUserStories } from '../../api/types';\n\nimport { IS_FIREFOX, IS_SAFARI } from '../../util/windowEnvironment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { selectIsStoryViewerOpen, selectTabState, selectUser } from '../../global/selectors';\nimport { calculateOffsetX, calculateSlideSizes } from './helpers/dimensions';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useSignal from '../../hooks/useSignal';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isReportModalOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (storyId: number) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  userIds: string[];\n  currentUserId?: string;\n  currentStoryId?: number;\n  byUserId?: Record<string, ApiUserStories>;\n  isSingleUser?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ANIMATION_DURATION_MS = 350 + (IS_SAFARI || IS_FIREFOX ? ANIMATION_END_DELAY : 20);\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst FROM_ACTIVE_SCALE_VALUE = 0.333;\nconst ANIMATION_TO_ACTIVE_SCALE = '3';\nconst ANIMATION_FROM_ACTIVE_SCALE = `${FROM_ACTIVE_SCALE_VALUE}`;\n\nfunction StorySlides({\n  userIds, currentUserId, currentStoryId, isSingleUser, isSingleStory, isPrivate, isArchive, byUserId,\n  isReportModalOpen, isDeleteModalOpen, onDelete, onClose, onReport,\n}: OwnProps & StateProps) {\n  const [renderingUserId, setRenderingUserId] = useState(currentUserId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevUserId = usePrevious(currentUserId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSingleUser = useCurrentOrPrev(isSingleUser, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  const slideSizes = useMemo(() => {\n    return calculateSlideSizes(windowWidth, windowHeight);\n  }, [windowWidth, windowHeight]);\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement | null }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  function setRef(ref: HTMLDivElement | null, userId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[userId]) {\n      rendersRef.current[userId] = { current: ref };\n    } else {\n      rendersRef.current[userId].current = ref;\n    }\n  }\n\n  const renderingUserIds = useMemo(() => {\n    if (renderingUserId && (renderingIsSingleUser || renderingIsSingleStory)) {\n      return [renderingUserId];\n    }\n\n    const index = renderingUserId ? userIds.indexOf(renderingUserId) : -1;\n    if (!renderingUserId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, userIds.length);\n\n    return userIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSingleUser, renderingUserId, userIds]);\n\n  const renderingUserPosition = useMemo(() => {\n    if (!renderingUserIds.length || !renderingUserId) {\n      return -1;\n    }\n\n    return renderingUserIds.indexOf(renderingUserId);\n  }, [renderingUserId, renderingUserIds]);\n\n  const currentUserPosition = useMemo(() => {\n    if (!renderingUserIds.length || !currentUserId) {\n      return -1;\n    }\n    return renderingUserIds.indexOf(currentUserId);\n  }, [currentUserId, renderingUserIds]);\n\n  useEffect(() => {\n    const timeoutId = window.setTimeout(() => {\n      setRenderingUserId(currentUserId);\n    }, ANIMATION_DURATION_MS);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [currentUserId]);\n\n  useEffect(() => {\n    let timeOutId: number | undefined;\n\n    if (renderingUserId !== currentUserId) {\n      timeOutId = window.setTimeout(() => {\n        setRenderingStoryId(currentStoryId);\n      }, ANIMATION_DURATION_MS);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n\n    return () => {\n      window.clearTimeout(timeOutId);\n    };\n  }, [renderingUserId, currentStoryId, currentUserId, renderingStoryId]);\n\n  useEffect(() => {\n    let timeOutId: number | undefined;\n\n    if (prevUserId && prevUserId !== currentUserId) {\n      setIsAnimating(true);\n      timeOutId = window.setTimeout(() => {\n        setIsAnimating(false);\n      }, ANIMATION_DURATION_MS);\n    }\n\n    return () => {\n      setIsAnimating(false);\n      window.clearTimeout(timeOutId);\n    };\n  }, [prevUserId, currentUserId, setIsAnimating]);\n\n  const slideAmount = currentUserPosition - renderingUserPosition;\n  const isBackward = renderingUserPosition > currentUserPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return userIds.reduce<Record<string, number>>((transformX, userId, index) => {\n      if (userId === renderingUserId) {\n        transformX[userId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && userIds[index - 1] === renderingUserId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < userIds.length - 1 && userIds[index + 1] === renderingUserId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[userId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentUserId === userId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useLayoutEffect(() => {\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([userId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n\n        return;\n      }\n\n      const scale = currentUserId === userId\n        ? ANIMATION_TO_ACTIVE_SCALE\n        : userId === renderingUserId ? ANIMATION_FROM_ACTIVE_SCALE : '1';\n\n      let offsetY = 0;\n      if (userId === renderingUserId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * FROM_ACTIVE_SCALE_VALUE;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (userId === currentUserId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[userId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', scale);\n    });\n  }, [currentUserId, getIsAnimating, renderingUserId]);\n\n  function renderStoryPreview(userId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={userId}\n        ref={(ref) => setRef(ref, userId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          user={selectUser(getGlobal(), userId)}\n          userStories={byUserId?.[userId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(userId: string) {\n    const style = buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={userId}\n        ref={(ref) => setRef(ref, userId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          userId={userId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isReportModalOpen={isReportModalOpen}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.wrapper} style={`--story-viewer-scale: ${slideSizes.scale}`}>\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingUserIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingUserIds.map((userId, index) => {\n        if (userId === renderingUserId) {\n          return renderStory(renderingUserId);\n        }\n\n        return renderStoryPreview(userId, index, index - renderingUserPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, ownProps, detachWhenChanged): StateProps => {\n  const {\n    storyViewer: {\n      userId: currentUserId, storyId: currentStoryId, isSingleUser, isSingleStory, isPrivate, isArchive,\n    },\n  } = selectTabState(global);\n  const { byUserId, orderedUserIds: { archived, active } } = global.stories;\n  const user = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  const isOpen = selectIsStoryViewerOpen(global);\n  detachWhenChanged(isOpen);\n\n  return {\n    byUserId,\n    userIds: user?.areStoriesHidden ? archived : active,\n    currentUserId,\n    currentStoryId,\n    isSingleUser,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n})(StorySlides));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  storyId?: number;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({ isOpen, storyId, onClose }: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!storyId) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ storyId });\n    onClose();\n  }, [onClose, storyId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import React, { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectStorySeenBy, selectTabState, selectUserStory } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dateFormat';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface StateProps {\n  storyId?: number;\n  storyDate?: number;\n  viewsCount?: number;\n  seenByDates?: Record<string, number>;\n  viewersExpirePeriod: number;\n}\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction StoryViewers({\n  storyId,\n  storyDate,\n  viewsCount,\n  viewersExpirePeriod,\n  seenByDates,\n}: StateProps) {\n  const {\n    loadStorySeenBy, openChat, closeStorySeenBy, closeStoryViewer,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(storyId);\n  const isExpired = Boolean(storyDate) && (storyDate + viewersExpirePeriod) < getServerTime();\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const renderingIsExpired = usePrevious(isExpired) || isExpired;\n  const renderingViewsCount = useCurrentOrPrev(viewsCount, true);\n\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates || renderingIsExpired) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingIsExpired, renderingSeenByDates]);\n  const isLoading = !renderingIsExpired && (!memberIds || memberIds.length === 0);\n\n  useEffect(() => {\n    if (!storyId || seenByDates || renderingIsExpired) {\n      return;\n    }\n\n    // TODO Infinite scroll\n    loadStorySeenBy({ storyId });\n  }, [renderingIsExpired, seenByDates, storyId]);\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeStorySeenBy();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeStorySeenBy();\n    closeStoryViewer();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeStorySeenBy}\n      className={buildClassName(styles.modal, 'narrow', 'component-theme-dark')}\n      title={isLoading ? 'Loading...' : `Seen by ${renderingViewsCount} users`}\n    >\n      <div\n        dir={lang.isRtl ? 'rtl' : undefined}\n        className={buildClassName(styles.seenByList, isLoading && styles.seenByListLoading)}\n      >\n        {isLoading && <Loading />}\n        {renderingIsExpired && (\n          <div className={styles.expiredText}>\n            {renderText(lang('ExpiredViewsStub'), ['simple_markdown', 'emoji'])}\n          </div>\n        )}\n        {memberIds?.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"icon-message-read\"\n              withStory\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { storyIdSeenBy } } = selectTabState(global);\n  const story = storyIdSeenBy ? selectUserStory(global, global.currentUserId!, storyIdSeenBy) : undefined;\n  const storyDate = story && 'date' in story ? story.date : undefined;\n  const viewsCount = story && 'viewsCount' in story ? story.viewsCount : undefined;\n\n  return {\n    storyId: storyIdSeenBy,\n    seenByDates: storyIdSeenBy ? selectStorySeenBy(global, global.currentUserId!, storyIdSeenBy) : undefined,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    storyDate,\n    viewsCount,\n  };\n})(StoryViewers));\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"wU1uWdwnVeSGSB5gOjJ6\",\"active\":\"SlrHi8_ck8rgqhL48EhA\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterUsersByName([...closeFriendIds, ...contactIds], usersById, searchQuery));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery, usersById]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","import React, { memo, useMemo, useState } from '../../../lib/teact/teact';\nimport Picker from '../../common/Picker';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName } from '../../../global/helpers';\nimport type { ApiUser } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  usersById: Record<string, ApiUser>;\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  usersById,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterUsersByName([...selectedIds || [], ...contactIds], usersById, searchQuery));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds, usersById]);\n\n  return (\n    <Picker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"Tc2kIulYTlFPvwfiTsFu\",\"header\":\"JXAfpcoB9izWjIX_WP0Q\",\"closeButton\":\"Hku60UdVn3LASgJdRQuw\",\"headerTitle\":\"L0Y7Snis7FiIcjMWZBBV\",\"content\":\"TBDaWd1Xw_wRqKUfj6IE\",\"section\":\"aNUFlXJVOpJVBLust1Ow\",\"title\":\"zNuDMViBzMNzGZxwFYGt\",\"list\":\"uW2YeebP6I62I5STt6az\",\"option\":\"CmouOddJNYo5qMb1eDhZ\",\"checked\":\"PxjIam8OpB7IAvp7fByQ\",\"input\":\"K9FImlb6XOJreshP5cfK\",\"icon\":\"Wpl9IXFnTYZf8HWj8H7_\",\"action\":\"oOUd_PRdTkIxpN_BekC1\",\"optionContent\":\"BkziTDKbvbzgii4mPbsx\",\"footer\":\"gH3hgLj6tnN_xhycOx0Q\",\"info\":\"i2HOS8g2UGDP69ABnvAe\",\"submit\":\"XwAIvijHgerStkRxm6rt\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiUser } from '../../api/types';\nimport type { ApiPrivacySettings, PrivacyVisibility } from '../../types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { selectTabState, selectUserStory } from '../../global/selectors';\nimport { getUserFullName } from '../../global/helpers';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport Switcher from '../ui/Switcher';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport CloseFriends from './privacy/CloseFriends';\nimport AllowDenyList from './privacy/AllowDenyList';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: string;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: undefined,\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'selectedContacts',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen, story, visibility, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryPinned } = getActions();\n\n  const lang = useLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isPinned);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isPinned !== isPinned) {\n      toggleStoryPinned({ storyId: story!.id, isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getUserFullName(usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if (action === 'blockUserIds') {\n      if (!privacy?.blockUserIds || privacy.blockUserIds.length === 0) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[closeFriendIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  // eslint-disable-next-line consistent-return\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            selectedIds={privacy?.blockUserIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? convertSecondsToHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <i className={`icon icon-${option.icon}`} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Change List')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <i className=\"icon icon-next\" aria-hidden />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, userId,\n    },\n  } = selectTabState(global);\n  const story = (userId && storyId)\n    ? selectUserStory(global, userId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story as ApiStory : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n\nfunction convertSecondsToHours(seconds: number): number {\n  const secondsInHour = 3600;\n  const minutesInHour = 60;\n\n  const hours = Math.floor(seconds / secondsInHour);\n  const remainingSeconds = seconds % secondsInHour;\n  const remainingMinutes = Math.floor(remainingSeconds / minutesInHour);\n\n  // If remaining minutes are greater than or equal to 30, round up the hours\n  return remainingMinutes >= 30 ? hours + 1 : hours;\n}\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectIsStoryViewerOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport ShowTransition from '../ui/ShowTransition';\nimport Button from '../ui/Button';\nimport StorySlides from './StorySlides';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StoryViewers from './StoryViewers';\nimport ReportModal from '../common/ReportModal';\nimport StorySettings from './StorySettings';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface StateProps {\n  isOpen: boolean;\n  userId?: string;\n  storyId?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  userId,\n  storyId,\n  shouldSkipHistoryAnimations,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor } = getActions();\n\n  const lang = useLang();\n  const [idStoryForDelete, setIdStoryForDelete] = useState<number | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag(false);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setIdStoryForDelete(undefined);\n      closeReportModal();\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return () => {\n      enableDirectTextInput();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useCallback((id: number) => {\n    setIdStoryForDelete(id);\n    openDeleteModal();\n  }, []);\n\n  const handleCloseDeleteModal = useCallback(() => {\n    closeDeleteModal();\n    setIdStoryForDelete(undefined);\n  }, []);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: handleClose,\n    shouldBeReplaced: true,\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <i className=\"icon icon-close\" aria-hidden />\n      </Button>\n\n      <StorySlides\n        isReportModalOpen={isReportModalOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openReportModal}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        storyId={idStoryForDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewers />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        subject=\"story\"\n        userId={userId}\n        storyId={storyId}\n      />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const { shouldSkipHistoryAnimations, storyViewer: { storyId, userId, isPrivacyModalOpen } } = selectTabState(global);\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    userId,\n    storyId,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useLastCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const handleTopicClick = useLastCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  });\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport { getChatTitle, getUserFirstOrLastName, isUserId } from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\nimport usePrevious from '../../hooks/usePrevious';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingIsStory = usePrevious(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, isManyMessages, isStory, lang]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title, duration,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          duration={duration}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUserName?: string;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUserName,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, currentUserName]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../lib/teact/teactn';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_switch_inline_query';\n  eventData: {\n    query: string;\n    chat_types: ('users' | 'bots' | 'groups' | 'channels')[];\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: data.eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n\n        showNotification({\n          message: 'Clipboard access is not supported in this client yet',\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, sendEvent, onEvent, sendCustomStyle, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\nimport { convertToApiChatType } from '../../global/helpers';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n    switchBotInline,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState<string>();\n  const [headerColor, setHeaderColor] = useState<string>();\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  useEffect(() => {\n    const themeParams = extractCurrentThemeParams();\n    setBackgroundColor(themeParams.bg_color);\n    setHeaderColor(themeParams.bg_color);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = Boolean(buttonText);\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeWebApp();\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (currentType) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(currentBot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(currentBot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [currentBot, currentType, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', currentBot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../api/types';\n\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePrevious(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder!.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import React, { memo } from '../../../../lib/teact/teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon, 'icon')} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'infinite_reactions',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts' | 'chatlistInvites' | 'chatlistJoined'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n  count: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  count,\n  onClick,\n}) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 1);\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <Avatar\n          peer={renderedUser}\n          size=\"jumbo\"\n          className={styles.avatar}\n        />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? selectUserFullInfo(global, user.id)?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n  chatlistInvites: 'icon-link-badge',\n  chatlistJoined: 'icon-folder-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { RefObject } from 'react';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll(\n        containerRef.current!,\n        stickerSetEl,\n        'start',\n        FOCUS_MARGIN,\n        isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      );\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xW0m4eR0ukCfRp6WS_Qd\",\"selected\":\"XTCJlnWtVba28wuDmeBN\"};","import React, {\n  memo, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { getDocumentMediaHash, isSameReaction } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCoordsInSharedCanvas from '../../hooks/useCoordsInSharedCanvas';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useMedia from '../../hooks/useMedia';\n\nimport CustomEmoji from './CustomEmoji';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  sharedCanvasHqRef?: React.RefObject<HTMLCanvasElement>;\n  onClick: (reaction: ApiReaction) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isCustom = 'documentId' in reaction;\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation) : undefined,\n    !animationId,\n  );\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={mediaData}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction, ApiSticker } from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport { getReactionUniqueKey } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport StickerButton from './StickerButton';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport ReactionEmoji from './ReactionEmoji';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isTranslucent,\n  noContextMenus,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransition(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID && stickerSet.id !== POPULAR_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && isEmoji && !isInstalled && !isPopular;\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-name', withAddSetButton && 'symbol-set-name-external')}>\n            {isLocked && <i className=\"symbol-set-locked-icon icon icon-lock-badge\" />}\n            {stickerSet.title}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">{lang('Stickers', stickerSet.stickers.length, 'i')}</span>\n            )}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon icon-close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionUniqueKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z2hl3sxq0tzStr0JpMxi\",\"video\":\"h6jE3TEaqlzbs0ro0J2_\",\"image\":\"ivo3DVINrp81Kb9ho9kA\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    hasThumbnail, thumbCustomEmojiId, isLottie, isVideos: isVideo,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className={buildClassName(styles.root, 'sticker-set-cover')}>\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gsyAr7lPlzHWUF_aYaVa\",\"main\":\"cnWk4tq3tmB7r08ScyxQ\",\"main_customEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"mainCustomEmoji\":\"UEOQzPhb8wS2YI61dKJE\",\"header\":\"x0Qtu0yjl4v02fLLyxV1\",\"headerWithBorder\":\"m4MXEae1lmdJZV64zN6b\",\"stickerCover\":\"A5Fetmgo_VQRMWxFTV_v\",\"activated\":\"yiTAGOkL3Hgb0VXRPy46\",\"pickerDisabled\":\"jNEbrwsYAlEp67HG75uy\"};","import React, {\n  useEffect, memo, useRef, useMemo,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiStickerSet, ApiSticker, ApiReaction, ApiAvailableReaction,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { REM } from './helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport buildClassName from '../../util/buildClassName';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { pickTruthy, unique } from '../../util/iteratees';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Loading from '../ui/Loading';\nimport Button from '../ui/Button';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  CHAT_STICKER_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker) {\n      const topReactionsSlice = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, lang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleReactionSelect = useLastCallback((reaction: ApiReaction) => {\n    onReactionSelect?.(reaction);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <i className=\"icon icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !loadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n              index={i}\n              idPrefix={prefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={handleReactionSelect}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      recentReactions,\n      topReactions,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      availableReactions: isReactionPicker ? global.availableReactions : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"z0kj3ATb_u7kBMYsqUpx\",\"activated\":\"sGL0teusRxo4NrXceldd\"};","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"UwWVjbf4Ptl9vrrJPZon\",\"picker-wrapper\":\"h97ntomDmLCVEoTjzCHi\",\"pickerWrapper\":\"h97ntomDmLCVEoTjzCHi\",\"picker-header\":\"Wz6C5rszlwOTdImks0cL\",\"pickerHeader\":\"Wz6C5rszlwOTdImks0cL\",\"picker-header-info\":\"OwAqbtXus5KwSxvNBKyu\",\"pickerHeaderInfo\":\"OwAqbtXus5KwSxvNBKyu\",\"selection-toggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"selectionToggle\":\"s9Pgceru2c49SJ_hpk8Q\",\"foldersWrapper\":\"HFZAaai7bs4X21rCRSyQ\",\"folders\":\"Xrr7zKG4KrVimUxojATI\",\"folder\":\"_7YreahCXXe3zGG5sywZA\",\"button-text\":\"K7T3MH1zL9aRmVFtTBBu\",\"buttonText\":\"K7T3MH1zL9aRmVFtTBBu\",\"button-badge\":\"_Z6IH9MHEorrdl7VDqJ2\",\"buttonBadge\":\"_Z6IH9MHEorrdl7VDqJ2\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(lang('FolderLinkSubtitle', invite.title), ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.peerIds}\n          lockedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkButtonAdd', invite.title)}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = hasChatsToAdd\n    ? lang('FolderLinkSubtitleChats', [newChatsCount, folder.title], undefined, newChatsCount)\n    : lang('FolderLinkSubtitleAlready', folder.title);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.alreadyPeerIds}\n          lockedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Badge from '../../ui/Badge';\nimport Picker from '../../common/Picker';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(suggestedPeerIds);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { TabState } from '../../../global/types';\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatlistNew from './ChatlistNew';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  info?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  info,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(info);\n  const renderingInfo = usePrevious(info) || info;\n  const renderingFolder = usePrevious(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) return renderingFolder.title;\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) return renderingInfo.invite.title;\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: string) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab className={styles.folder} isActive badgeCount={folderTabNumber} isBadgeActive title={folderTitle} />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { info }): StateProps => {\n    const { invite, removal } = info || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useLastCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteMessageForSelf = useLastCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  });\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={buildClassName('icon', `icon-${icon}`)} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport { formatDateAtTime } from '../../util/dateFormat';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"icon-message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"phK_DdEImRiGA8z2FwyB\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\nimport { formatDateAtTime } from '../../util/dateFormat';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './ReactorListModal.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <i className=\"icon icon-heart-outline status-icon\" />\n                          {formatDateAtTime(lang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(lang, seenByUser * 1000) : undefined}\n                        statusIcon=\"icon-message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/windowEnvironment';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport ListItem from '../ui/ListItem';\nimport InputText from '../ui/InputText';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"syvgWO0b6lIEPd3iu1TA\",\"list-item\":\"_nKqEo7SgYwpaclSSCIx\",\"listItem\":\"_nKqEo7SgYwpaclSSCIx\",\"title\":\"R7LNh8TMqiktRuTuESsf\",\"subtitle\":\"so4259O2hcdGOxENXdqc\",\"languages\":\"DiSTH_4CZnPK8Dh8Tpfq\"};","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} withStory avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  localContactIds,\n  localChatIds,\n  localUserIds,\n  globalChatIds,\n  globalUserIds,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { selectChat } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState, TabState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n    };\n  };\n}\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { LoadMoreDirection } from '../../../types';\nimport type { StateProps } from './helpers/createMapStateToProps';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\nimport type { StateProps } from './helpers/createMapStateToProps';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return <h3>{lang('PrivacyP2P')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('Animations and Performance')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{lang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {lang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n                  || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadProfilePhotos({ profileId: currentUserId });\n    }\n  }, [currentUserId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    loadAuthorizations();\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUserId && (\n          <ProfileInfo\n            userId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Performance)}\n        >\n          {lang('Animations and Performance')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <i className=\"icon icon-link mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item pt-3\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item mb-0\"\n              icon=\"link\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo, useState,\n} from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport buildClassName from '../../../../util/buildClassName';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  shouldHideChatTypes?: boolean;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onSaveFilter: VoidFunction;\n  isActive?: boolean;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  shouldHideChatTypes,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n  onSaveFilter,\n  isActive,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const [isTouched, setIsTouched] = useState(false);\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestMutation(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    setIsTouched(true);\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    setIsTouched(true);\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={buildClassName('icon', `icon-${type.icon}`)} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll fab-padding-bottom\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {!shouldHideChatTypes && (\n              <>\n                <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('FilterChatTypes')}\n                </h4>\n                {chatTypes.map(renderChatType)}\n                <div className=\"picker-list-divider\" />\n              </>\n            )}\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      shouldHideChatTypes={shouldHideChatTypes}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onSaveFilter={onSaveFilter}\n      isActive={isActive}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","// extracted by mini-css-extract-plugin\nexport default {\"primaryLink\":\"B0vKZtyx_PUcanptgC5I\",\"input\":\"ODZGlpe7i3BMlnIuPGUg\",\"moreMenu\":\"hDpRcaj2QNUxsuLouJu_\",\"buttons\":\"w1XUPoN0jJ1kMZLO7Haj\",\"button\":\"LFzEXLButr24C5xfk1X4\"};","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Button from '../ui/Button';\n\nimport styles from './InviteLink.module.scss';\n\ntype OwnProps = {\n  title?: string;\n  inviteLink: string;\n  onRevoke?: VoidFunction;\n  isDisabled?: boolean;\n};\n\nconst InviteLink: FC<OwnProps> = ({\n  title,\n  inviteLink,\n  onRevoke,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  const { showNotification, openChatWithDraft } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const copyLink = useLastCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleCopyPrimaryClicked = useLastCallback(() => {\n    if (isDisabled) return;\n    copyLink(inviteLink);\n  });\n\n  const handleShare = useLastCallback(() => {\n    openChatWithDraft({ text: inviteLink });\n  });\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  return (\n    <div className=\"settings-item\">\n      <p className=\"text-muted\">\n        {lang(title || 'InviteLink.InviteLink')}\n      </p>\n      <div className={styles.primaryLink}>\n        <input\n          className={buildClassName('form-control', styles.input)}\n          value={inviteLink}\n          readOnly\n          onClick={handleCopyPrimaryClicked}\n        />\n        <DropdownMenu\n          className={styles.moreMenu}\n          trigger={PrimaryLinkMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked} disabled={isDisabled}>{lang('Copy')}</MenuItem>\n          {onRevoke && (\n            <MenuItem icon=\"delete\" onClick={onRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n      <div className={styles.buttons}>\n        <Button\n          onClick={handleCopyPrimaryClicked}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionCopy')}\n        </Button>\n        <Button\n          onClick={handleShare}\n          className={styles.button}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {lang('FolderLinkScreen.LinkActionShare')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InviteLink);\n","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\nimport { partition } from '../../../../util/iteratees';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport InviteLink from '../../../common/InviteLink';\nimport Picker from '../../../common/Picker';\nimport Spinner from '../../../ui/Spinner';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  title?: string;\n  includedChatIds?: string[];\n  pinnedChatIds?: string[];\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  title,\n  includedChatIds,\n  pinnedChatIds,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (includedChatIds || []).concat(pinnedChatIds || []);\n  }, [includedChatIds, pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('FolderLinkScreen.TitleDescriptionSelected', [title, chatsCount]),\n            ['simple_markdown'])}\n        </p>\n      </div>\n\n      <InviteLink\n        inviteLink={!url ? lang('Loading') : url}\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-chatlist\">\n        <Picker\n          itemIds={itemIds}\n          lockedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          isRoundCheckbox\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      title: folder?.title,\n      includedChatIds: folder?.includedChatIds,\n      pinnedChatIds: folder?.pinnedChatIds,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { FC } from '../../../../lib/teact/teact';\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [dispatch, onScreenSelect, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [onScreenSelect, state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  IS_ANDROID, IS_IOS, IS_MAC_OS,\n} from '../../../util/windowEnvironment';\nimport { getSystemTheme } from '../../../util/systemTheme';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport {\n  playNotifySound,\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n} from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          // eslint-disable-next-line max-len\n          subLabel={areOfflineNotificationsSupported ? lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled') : 'Not supported'}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanSetPasscode, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  canDisplayChatInTitle,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n  canSetPasscode,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(SettingsPrivacy));\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n    openPremiumModal,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  });\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            className=\"pb-2\"\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">{lang('Localization.InterfaceLanguage')}</h4>\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiPhoto, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUserFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUserId: string;\n    hasCurrentUserFullInfo?: boolean;\n    currentUserFallbackPhoto?: ApiPhoto;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    return [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      { value: 'contacts', label: lang('P2PContacts') },\n      { value: 'nobody', label: lang('P2PNobody') },\n    ];\n  }, [lang]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport { partition, unique } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"obOZMv8VwZgTltdIBhFA\",\"item\":\"lDWs17bpqtGWDX0EJr0y\",\"checkbox\":\"BShBwPkgjleuDsjyfnNk\",\"languages\":\"whcbPSSJLGdGCaY66qfR\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { getActions, withGlobal } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldShowLoginCodeInChatList?: boolean;\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldShowLoginCodeInChatList,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSettingOption } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Show login code in chat list\"\n          checked={Boolean(shouldShowLoginCodeInChatList)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldShowLoginCodeInChatList: !shouldShowLoginCodeInChatList })}\n        />\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      shouldShowLoginCodeInChatList: global.settings.byKey.shouldShowLoginCodeInChatList,\n      shouldForceHttpTransport: global.settings.byKey.shouldForceHttpTransport,\n      shouldAllowHttpTransport: global.settings.byKey.shouldAllowHttpTransport,\n      shouldCollectDebugLogs: global.settings.byKey.shouldCollectDebugLogs,\n      shouldDebugExportedSenders: global.settings.byKey.shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\n\nimport { IS_BACKDROP_BLUR_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\n\ntype PerformanceSection = [string, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: string;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Power Saving',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS = [\n  'Power Saving',\n  'Custom',\n  'Lots of Stuff',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['LiteMode.Key.animations.Title', [\n    { key: 'pageTransitions', label: 'Page Transitions' },\n    { key: 'messageSendingAnimations', label: 'Message Sending Animation' },\n    { key: 'mediaViewerAnimations', label: 'Media Viewer Animations' },\n    { key: 'messageComposerAnimations', label: 'Message Composer Animations' },\n    { key: 'contextMenuAnimations', label: 'Context Menu Animation' },\n    { key: 'contextMenuBlur', label: 'Context Menu Blur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'Right Column Animation' },\n  ]],\n  ['Stickers and Emoji', [\n    { key: 'animatedEmoji', label: 'Allow Animated Emoji' },\n    { key: 'loopAnimatedStickers', label: 'Loop Animated Stickers' },\n    { key: 'reactionEffects', label: 'Reaction Effects' },\n    { key: 'stickerEffects', label: 'Full-Screen Sticker and Emoji Effects' },\n  ]],\n  ['AutoplayMedia', [\n    { key: 'autoplayGifs', label: 'AutoplayGIF' },\n    { key: 'autoplayVideos', label: 'AutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n  const animationLevelOptions = animationLevelState === ANIMATION_LEVEL_CUSTOM\n    ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n    : ANIMATION_LEVEL_OPTIONS;\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, [setSettingOption]);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => (\n                    <Checkbox\n                      key={key}\n                      name={key}\n                      checked={performanceSettings[key]}\n                      label={lang(label)}\n                      disabled={disabled}\n                      onChange={handlePropertyChange}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsPerformance from './SettingsPerformance';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal } = getActions();\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || screen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" withStory ripple={!isMobile} />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div className={buildClassName('chat-list-wrapper', storyRibbonClassNames)}>\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          onSettingsScreenSelect={onSettingsScreenSelect}\n          onLeftColumnContentChange={onLeftColumnContentChange}\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let muteUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      muteUntil = MAX_INT_32;\n    } else {\n      muteUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, muteUntil });\n    } else {\n      updateChatMutedState({ chatId, muteUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n  copyTextToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  href?: string,\n  canCopy?: boolean,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = canCopy && photo && (mediaHash || hasMessageLocalBlobUrl(message))\n    && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (canCopy && href) {\n    options.push({\n      label: 'lng_context_copy_link',\n      icon: 'copy',\n      handler: () => {\n        copyTextToClipboard(href);\n\n        afterEffect?.();\n      },\n    });\n  } else if (canCopy && text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatReactions,\n  ApiMessage,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useFlag from '../../../hooks/useFlag';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport ReactionSelector from './ReactionSelector';\nimport AvatarList from '../../common/AvatarList';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isReactionPickerOpen?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentPeers?: (ApiChat | ApiUser)[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  noTransition?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onAboutAds?: NoneToVoidFunction;\n  onSponsoredHide?: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isReactionPickerOpen,\n  availableReactions,\n  topReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  targetHref,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentPeers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  noTransition,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onSponsorInfo,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n  const seenByDates = !isSponsoredMessage ? message.seenByDates : undefined;\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n  const seenByDatesCount = useMemo(() => (seenByDates ? Object.keys(seenByDates).length : 0), [seenByDates]);\n\n  const handleAfterCopy = useLastCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  });\n\n  useEffect(() => {\n    if (isOpen && areItemsHidden && !isReactionPickerOpen) {\n      onClose();\n    }\n  }, [onClose, isOpen, isReactionPickerOpen, areItemsHidden]);\n\n  const handleOpenCustomEmojiSets = useLastCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  });\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message,\n      targetHref,\n      canCopy,\n      handleAfterCopy,\n      canCopyLink ? onCopyLink : undefined,\n      onCopyMessages,\n      onCopyNumber,\n    );\n\n  const getTriggerElement = useLastCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition_slide-active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  });\n\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n\n  const getMenuElement = useLastCallback(() => document.querySelector('.MessageContextMenu .bubble'));\n\n  const getLayout = useLastCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n        || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionPicker');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleOpenMessageReactionPicker = useLastCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  });\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      shouldSkipTransition={noTransition}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageReactionPicker}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !seenByDatesCount}\n          >\n            <span className=\"MessageContextMenu--seen-by-label-wrapper\">\n              <span className=\"MessageContextMenu--seen-by-label\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {canShowReactionsCount && message.reactors?.count ? (\n                  canShowSeenBy && seenByDatesCount\n                    ? lang(\n                      'Chat.OutgoingContextMixedReactionCount',\n                      [message.reactors.count, seenByDatesCount],\n                    )\n                    : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n                ) : (\n                  seenByDatesCount === 1 && seenByRecentPeers\n                    ? renderText(\n                      isUserId(seenByRecentPeers[0].id)\n                        ? getUserFullName(seenByRecentPeers[0] as ApiUser)!\n                        : (seenByRecentPeers[0] as ApiChat).title,\n                    ) : (\n                      seenByDatesCount\n                        ? lang('Conversation.ContextMenuSeen', seenByDatesCount, 'i')\n                        : lang('Conversation.ContextMenuNoViews')\n                    )\n                )}\n              </span>\n            </span>\n            <AvatarList className=\"avatars\" size=\"micro\" peers={seenByRecentPeers} />\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && message.sponsorInfo && (\n          <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType, TabState } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction, ApiThreadInfo,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActions,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectIsReactionPickerOpen,\n  selectCanTranslateMessage,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedMessageTranslationLanguage,\n  selectStickerSet,\n  selectRequestedChatTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isOwnMessage,\n  areReactionsEmpty,\n  isUserId,\n  isMessageLocal,\n  getMessageVideo,\n  getChatMessageLink,\n} from '../../../global/helpers';\nimport { PREVIEW_AVATAR_COUNT, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads?: TabState['activeDownloads']['byChatId'][number];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n  canPlayAnimatedEmojis?: boolean;\n  isReactionPickerOpen?: boolean;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  topReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  targetHref,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  threadId,\n  onClose,\n  onCloseAnimationEnd,\n  isReactionPickerOpen,\n}) => {\n  const {\n    openChat,\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openChatLanguageModal,\n    openMessageReactionPicker,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentPeers = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    if (message.reactions?.recentReactions?.length) {\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(\n        ({ peerId }) => usersById[peerId] || chatsById[peerId],\n      ));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, PREVIEW_AVATAR_COUNT);\n    }\n\n    if (!message.seenByDates) {\n      return undefined;\n    }\n\n    return Object.keys(message.seenByDates).slice(0, PREVIEW_AVATAR_COUNT)\n      .map((id) => usersById[id] || chatsById[id])\n      .filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByDates]);\n\n  const isDownloading = useMemo(() => {\n    if (album) {\n      return album.messages.some((msg) => {\n        return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(msg.id);\n      });\n    }\n\n    return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(message.id);\n  }, [activeDownloads, album, message]);\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closePinModal = useLastCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  });\n\n  const handleReply = useLastCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleEdit = useLastCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handlePin = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  });\n\n  const handleUnpin = useLastCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  });\n\n  const handleForward = useLastCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  });\n\n  const handleFaveSticker = useLastCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleUnfaveSticker = useLastCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleCancelVote = useLastCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handlePollClose = useLastCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleSelectMessage = useLastCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  });\n\n  const handleScheduledMessageSend = useLastCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  });\n\n  const handleRescheduleMessage = useLastCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  });\n\n  const handleOpenCalendar = useLastCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  });\n\n  const handleOpenSeenByModal = useLastCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleOpenReactorListModal = useLastCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleCopyMessages = useLastCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  });\n\n  const handleCopyNumber = useLastCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  });\n\n  const handleDownloadClick = useLastCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  });\n\n  const handleSaveGif = useLastCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n    });\n    closeMenu();\n  });\n\n  const handleReactionPickerOpen = useLastCallback((position: IAnchorPosition) => {\n    openMessageReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  });\n\n  const handleTranslate = useLastCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleShowOriginal = useLastCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleSelectLanguage = useLastCallback(() => {\n    openChatLanguageModal({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n    closeMenu();\n  });\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isReactionPickerOpen={isReactionPickerOpen}\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        targetHref={targetHref}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentPeers={seenByRecentPeers}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloads(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPrivate = chat && isUserId(chat.id);\n    const isOwn = isOwnMessage(message);\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(!isLocal\n      && chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedMessageTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n    const canTranslate = !hasTranslation && selectCanTranslateMessage(global, message, detectedLanguage);\n    const isChatTranslated = selectRequestedChatTranslationLanguage(global, message.chatId);\n\n    return {\n      availableReactions: global.availableReactions,\n      topReactions: global.topReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n      canTranslate,\n      canShowOriginal: hasTranslation && !isChatTranslated,\n      canSelectLanguage: hasTranslation && !isChatTranslated,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal, showDialog } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useLastCallback(() => {\n    onAboutAds();\n    closeMenu();\n  });\n\n  const handleSponsoredHide = useLastCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  });\n\n  const handleSponsorInfo = useLastCallback(() => {\n    closeMenu();\n    showDialog({\n      data: {\n        message: [message.sponsorInfo, message.additionalInfo].join('\\n'),\n      },\n    });\n  });\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n        onSponsorInfo={handleSponsorInfo}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isComments) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n            noPlay={!canPlayAnimatedEmojis}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsPremiumPurchaseBlocked,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n  selectCanManage, selectIsRightColumnShown, selectCanTranslateChat,\n} from '../../global/selectors';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  isChatChannel,\n  isChatGroup,\n  isUserId,\n  isUserRightBanned,\n  selectIsChatMuted,\n} from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    toggleManagement,\n    togglePeerTranslations,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId });\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    updateChatMutedState({ chatId, isMuted: false });\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    markRenderMuteModal();\n    setIsMuteModalOpen(true);\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    openCreateTopicPanel({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    toggleManagement({ force: true });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftPremiumClick = useLastCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {lang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {lang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {lang('ChatsMute')}...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {lang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGiftPremium = Boolean(\n      userFullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { IS_IOS } from '../../util/windowEnvironment';\nimport { debounce } from '../../util/schedulers';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentChat,\n  selectTabState,\n  selectCurrentMessageList,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: number;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useLastCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleUp = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleDown = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleCloseLocalTextSearch = useLastCallback(() => {\n    closeLocalTextSearch();\n  });\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vUbCal8_iSPkPVzQcz24\",\"wrapper\":\"f4pTNqkRRCFtZzheXcV9\"};","import React, { memo, useRef, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiReaction, ApiAvailableReaction, ApiChatReactions } from '../../../api/types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport buildClassName from '../../../util/buildClassName';\nimport { getReactionUniqueKey, sortReactions } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useWindowSize from '../../../hooks/useWindowSize';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ReactionEmoji from '../../common/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  onReactionSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const allAvailableReactions = useMemo(() => {\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      return sortReactions((availableReactions || []).map(({ reaction }) => reaction), topReactions);\n    }\n\n    return sortReactions(enabledReactions.allowed, topReactions);\n  }, [availableReactions, enabledReactions, topReactions]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionUniqueKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect!}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global;\n    const { enabledReactions } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n    };\n  },\n)(ReactionPickerLimited));\n","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiReaction, ApiSticker, ApiReactionCustomEmoji, ApiStory, ApiStorySkipped,\n  ApiMessageEntity,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectChatMessage, selectIsContextMenuTranslucent, selectIsCurrentUserPremium,\n  selectTabState, selectUserStory,\n} from '../../../global/selectors';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { buildCustomEmojiHtml } from '../composer/helpers/customEmoji';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\nimport Menu from '../../ui/Menu';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  withCustomReactions?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  withCustomReactions,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryUserId = useCurrentOrPrev(story?.userId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, withCustomReactions]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryUserId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style,\n  } = useMenuPosition(renderingPosition, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction = sticker.isCustomEmoji\n      ? { documentId: sticker.id } as ApiReactionCustomEmoji\n      : { emoticon: sticker.emoji } as ApiReaction;\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((reaction: ApiReaction | ApiSticker) => {\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('emoticon' in reaction) {\n      text = reaction.emoticon;\n    } else {\n      const sticker = 'documentId' in reaction ? getGlobal().customEmojis.byId[reaction.documentId] : reaction;\n      if (!sticker) {\n        return;\n      }\n\n      if (!sticker.isFree && !isCurrentUserPremium) {\n        showNotification({\n          message: lang('UnlockPremiumEmojiHint'),\n          action: {\n            action: 'openPremiumModal',\n            payload: { initialSection: 'animated_emoji' },\n          },\n          actionText: lang('PremiumMore'),\n        });\n\n        closeReactionPicker();\n\n        return;\n      }\n      const customEmojiMessage = parseMessageInput(buildCustomEmojiHtml(sticker));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push('emoticon' in reaction ? reaction.emoticon : reaction.documentId);\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !withCustomReactions && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      positionX={positionX}\n      positionY={positionY}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      <CustomEmojiPicker\n        idPrefix=\"message-emoji-set-\"\n        isHidden={!isOpen || !(withCustomReactions || renderedStoryId)}\n        loadAndPlay={Boolean(isOpen && withCustomReactions)}\n        isReactionPicker\n        className={!withCustomReactions && !renderedStoryId ? styles.hidden : undefined}\n        selectedReactionIds={selectedReactionIds}\n        isTranslucent={isTranslucent}\n        onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n        onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n      />\n      {!withCustomReactions && Boolean(renderedChatId) && (\n        <ReactionPickerLimited\n          chatId={renderedChatId}\n          loadAndPlay={isOpen}\n          onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n          selectedReactionIds={selectedReactionIds}\n        />\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const {\n    chatId, messageId, storyUserId, storyId, position,\n  } = state.reactionPicker || {};\n  const story = storyUserId && storyId\n    ? selectUserStory(global, storyUserId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = chatId ? isUserId(chatId) : Boolean(storyUserId);\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const areCustomReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  return {\n    message,\n    story,\n    position,\n    withCustomReactions: chat?.isForbidden || areSomeReactionsAllowed\n      ? false\n      : areCustomReactionsAllowed || isPrivateChat,\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"s4eo5UICU4xBMDvMxWU_\",\"menuContent\":\"Q2c4gWaMXfXzLL_Jbbjr\",\"storyMenu\":\"nwZabdh1rB72Eb1x64Og\",\"onlyReactions\":\"rWa1hIFdrb4U0xFrHLic\",\"hidden\":\"P95Gk2sUhvBJ70LKg_vc\"};","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport animateScroll from './animateScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { GIF_MIME_TYPE, SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon', 'icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const canDisplaySpoilerButton = attachment.mimeType !== GIF_MIME_TYPE;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && canDisplaySpoilerButton\n    && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          {canDisplaySpoilerButton && (\n            <i\n              className={buildClassName(\n                'icon',\n                attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n                styles.actionItem,\n              )}\n              onClick={handleSpoilerClick}\n            />\n          )}\n          {onDelete && (\n            <i\n              className={buildClassName('icon', 'icon-delete', styles.actionItem)}\n              onClick={() => onDelete(index)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { isUserId } from '../../../global/helpers';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\nimport { removeAllSelections } from '../../../util/selection';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean((shouldSendCompressed || shouldForceCompression) && !shouldForceAsFile);\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: a.mimeType !== GIF_MIME_TYPE ? true : undefined,\n    })));\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [lang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => a.mimeType !== GIF_MIME_TYPE\n      && !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                ))\n              }\n              {isSendingCompressed && hasAnySpoilerable && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule ? lang('Next') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_ELECTRON, PRODUCTION_URL } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_ELECTRON ? PRODUCTION_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport animateScroll from '../../../util/animateScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    animateScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={buildClassName('icon', icon)} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useEffect, memo, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chatStickerSetId) {\n      const fullSet = stickerSetsById[chatStickerSetId];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chatStickerSetId, lang,\n    premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div ref={headerRef} className={headerClassName}>\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={buildClassName(styles.main, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            noContextMenus={noContextMenus}\n            index={i}\n            idPrefix={prefix}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useMenuPosition from '../../hooks/useMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n  isBackgroundTranslucent,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const { loadPremiumSetStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  const lang = useLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useEffect(() => {\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { Signal } from '../../../util/signals';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  withUsername,\n  botCommands,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSelect = useLastCallback((botCommand: ApiBotCommand) => {\n    // We need an additional check because tooltip is updated with throttling\n    if (!botCommand.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    handleSendCommand(botCommand);\n    return true;\n  });\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          // No need for expensive global updates on users and chats, so we avoid them\n          bot={getGlobal().users.byId[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(BotCommandTooltip);\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import React, { memo, useState } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {canSchedule && onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n      {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n        <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n          {lang('SendWhenOnline')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n    });\n  });\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, { useEffect, useRef, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <i className=\"icon icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const global = getGlobal();\n\n      let senderPeer = message.senderId\n        ? selectUser(global, message.senderId) || selectChat(global, message.senderId)\n        : undefined;\n\n      if (!senderPeer && message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        const originalSender = isChannelPost && fromChatId ? selectChat(global, fromChatId) : undefined;\n        if (originalSender) senderPeer = originalSender;\n      }\n\n      if (!senderPeer) {\n        return undefined;\n      }\n\n      return {\n        message,\n        senderPeer: senderPeer!,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderPeer, onClick,\n  }: {\n    message: ApiMessage;\n    senderPeer: ApiUser | ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar\n          peer={senderPeer}\n        />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={senderPeer} withEmojiStatus />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const messagesById = selectChatMessages(global, chatId);\n    if (!messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId, isComments);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectChatFullInfo, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../global/helpers';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiChat } from '../../api/types';\n\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"general\":\"CSjgq5gkTxM3iZQ9oJ9b\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat.id, chatFullInfo]);\n\n  const handleForumToggle = useCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  }, [chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport { isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      hasLinkedChat,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport {\n  selectChat, selectTabState, selectManagement, selectChatFullInfo,\n} from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <SafeLink url={privateInviteLink} className=\"group-link\" text={privateInviteLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            disabled\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId\n      ? selectChat(global, linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport stopEvent from '../../../util/stopEvent';\nimport buildClassName from '../../../util/buildClassName';\nimport useManagePermissions from '../hooks/useManagePermissions';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    return Object.values(adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport InviteLink from '../../common/InviteLink';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <InviteLink\n            inviteLink={primaryInviteLink}\n            onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n            title={chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n          />\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: selectChatFullInfo(global, chatId)?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={buildClassName('icon', customIcon)} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePrevious(step, true);\n  const prevRequestId = usePrevious(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={buildClassName(\n            'icon', step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left',\n          )}\n          />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker);\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","_ref","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","arguments","length","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","isLocal","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","getZoomChange","setZoomChange","useZoomChange","memo","withGlobal","global","_ref4","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","isChatWithBot","selectBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","_ref2","shouldDeleteForAll","handleDeleteMessageForSelf","_ref3","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","useLastCallback","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","DeleteMessageModal","DeleteProfilePhotoModal","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","destructive","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","text","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","getCurrentTime","setCurrentTime","useCurrentTimeSignal","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","url","_defineProperty","this","forEach","index","connector","request","name","args","MAX_WORKERS","onFrame","time","frame","frames","currentTime","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","params","data","result","callApi","mediaFormat","arrayBuffer","postMessage","cancelAnimation","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","MouseEvent","touches","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","setVisibility","isVisible","timeout","body","remove","handleSeek","position","handleSeekStart","volumeIcon","SeekLine","ripple","RangeSlider","bold","value","onChange","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","handleVideoMove","handleVideoLeave","bounds","clientX","right","clientY","top","bottom","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","square","VideoPlayerControls","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","withAnimation","onFooterClick","isMoving","toggleControlsOnMove","VideoPlayer","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","content","action","renderMessageText","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","MediaViewerFooter","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","x","y","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveMediaId","setActiveMediaId","activeMediaIdRef","isScaled","activeMediaId","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","timing","changeSlideOnClick","target","calculateOffsetBoundaries","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","_ref5","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","selector","matches","isAvatar","sender","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","peer","formatMediaDateTime","date","shouldSkipHistoryAnimations","selectPerformanceSettingsValue","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","user","isChatAdmin","avatarOwnerFallbackPhoto","selectUserFullInfo","fallbackPhoto","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","usePrevious","headerAnimation","isGhostAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","mediaIdRef","useStateRef","handleFooterClick","currentMediaId","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","mediaIdsRef","fromId","mIds","handleBeforeDelete","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","SenderInfo","MediaViewerActions","ReportModal","subject","MediaViewerSlides","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","totalOffset","DEFAULT_STORY_DURATION_S","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","story","isExpanded","onExpand","contentRef","hasOverflow","setHasOverflow","setHeight","prevIsExpanded","usePrevDuringAnimation","scrollHeight","addExtraClass","removeExtraClass","canExpand","fullClassName","role","MessageText","messageOrStory","withTranslucentThumbs","userId","storyId","isPrivateStories","isArchivedStories","appConfig","users","byId","tabState","storyViewer","storyIdSeenBy","isPrivacyModalOpen","forwardMessages","forwardedStoryId","premiumModal","isPremiumModalOpen","orderedIds","pinnedIds","archiveIds","stories","byUserId","isSelf","shouldForcePause","reactionPicker","storyChangelogUserId","viewersExpirePeriod","storyExpirePeriod","storyViewersExpirePeriod","isChatExist","areChatSettingsLoaded","settings","isSingleStory","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","openNextStory","loadUserSkippedStories","openStorySeenBy","copyStoryLink","toggleStoryPinned","openChat","showNotification","openStoryPrivacyEditor","loadChatSettings","fetchChat","loadStorySeenBy","serverTime","getServerTime","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","isLoadedStory","isDeletedStory","hasText","hasMessageText","canPinToProfile","useCurrentOrPrev","isPinned","canUnpinFromProfile","areViewsExpired","canShare","isPublic","noForwards","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","canPlayStory","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","hasThumb","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransition","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","useStoryPreloader","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","onMouseDown","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","onMouseLeave","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","onStart","onEnd","isLongPressActive","isPressed","timerId","canProcessEvent","button","cancel","useLongPress","hasAllData","useBackgroundMode","load","recentViewerIds","keyCode","useEffectWithPrevDeps","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleVideoStoryTimeUpdate","handleOpenChat","handleOpenPrevStory","handleOpenNextStory","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleDeleteStoryClick","handleReportStoryClick","handleForwardClick","handleOpenStorySeenBy","handleInfoPrivacyEdit","handleInfoPrivacyClick","visibility","isForContacts","isForCloseFriends","myName","StoryProgress","renderStoriesTabs","formatRelativeTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","onPlaying","usersById","getGlobal","viewsCount","viewerId","renderRecentViewers","tabIndex","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","editableInputId","inputId","inputPlaceholder","onFocus","onBlur","lastViewedByUserIds","lastViewedId","userStories","openStoryViewer","lastReadId","hasUnreadStories","imageHash","thumbUrl","withStory","storyViewerMode","ANIMATION_DURATION_MS","IS_SAFARI","IS_FIREFOX","detachWhenChanged","currentStoryId","isSingleUser","isPrivate","isArchive","orderedUserIds","archived","active","selectIsStoryViewerOpen","userIds","areStoriesHidden","renderingUserId","setRenderingUserId","renderingStoryId","setRenderingStoryId","prevUserId","renderingIsArchive","renderingIsPrivate","renderingIsSingleUser","renderingIsSingleStory","slideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlide","slide","calculateSlideSizes","rendersRef","setIsAnimating","setRef","renderingUserIds","slice","renderingUserPosition","currentUserPosition","timeoutId","timeOutId","calculateTransformX","reduce","transformX","entries","setProperty","buildStyle","Story","renderStory","StoryPreview","renderStoryPreview","deleteStory","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","selectUserStory","storyDate","seenByDates","selectStorySeenBy","closeStorySeenBy","closeStoryViewer","isExpired","renderingSeenByDates","renderingIsExpired","renderingViewsCount","memberIds","keys","sort","leftId","rightId","isLoading","handleCloseSeenByModal","Loading","ListItem","PrivateChatInfo","noStatusOrTyping","status","formatDateAtTime","statusIcon","contactListIds","saveCloseFriends","searchQuery","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","filter","isCloseFriend","displayedIds","contactIds","unique","filterUsersByName","prevIsActive","handleSelectedContactIdsChange","handleSubmit","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","onSelectedIdsChange","onFilterChange","FloatingActionButton","isShown","lockedIds","onSelect","MEMO_EMPTY_ARRAY","forceShowSelf","OPTIONS","actions","Screens","contactList","editStoryPrivacy","isOpenModal","openModal","closeModal","privacy","setPrivacy","setIsPinned","setActiveKey","isBackButton","allowList","allowUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","blockUserIds","handleCloseButtonClick","handleIsPinnedToggle","renderContent","storyLifeTime","seconds","hours","remainingSeconds","convertSecondsToHours","expireDate","option","checked","handleVisibilityChange","newVisibility","teactExperimentControlled","closeFriends","denyList","handleActionClick","getUserFullName","Switcher","label","inactive","renderPrivacyList","CloseFriends","AllowDenyList","noBackdrop","onCloseAnimationEnd","renderHeaderContent","slideClassName","closeStoryPrivacyEditor","idStoryForDelete","setIdStoryForDelete","handleOpenDeleteModal","handleCloseDeleteModal","StorySlides","StoryDeleteConfirmModal","StoryViewers","StorySettings","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","values","acc","topic","getCanPostInChat","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","clickArg","TopicIcon","letterClassName","onLoadMore","GroupChatInfo","chats","listIds","orderedPinnedIds","activeListIds","archivedListIds","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","chatIds","isDeletedUser","sorted","sortChatIds","filterChatsByName","filterChatIdsByType","renderingIds","ChatOrUserPicker","isManyMessages","isStory","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getChatTitle","RecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","messageList","getReadableErrorText","withVideo","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","urlAuth","currentUserName","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","CalendarModal","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","_renderingUser$firstN","_renderingUser$lastNa","_renderingUser$phoneN","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","_renderingUser$firstN2","_renderingUser$lastNa2","_renderingUser$phoneN2","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openInvoice","setWebAppPaymentSlug","switchBotInline","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","themeParams","extractCurrentThemeParams","bg_color","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","validateHexColor","newColor","color_key","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","chat_types","convertToApiChatType","isSamePeer","query","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","once","contentWindow","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","isEnabled","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","sandbox","allow","allowFullScreen","hasCloseButton","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","handleBotTrustDecline","confirmAttachBotInstall","cancelAttachBotInstall","prevBot","renderingBot","_bot$shouldRequestWri","shortName","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","leftValue","rightValue","floatingBadgeIcon","rightStyle","viewBox","fill","COLOR_START","COLOR_END","description","colorStepProgress","lerp","PremiumLimitsCompare","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","DeviceFrame","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","cycleRestrict","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","options","find","months","onScroll","scrollLeft","scrollLeftOriginal","toString","reverseIndex","ceil","prevElement","reverseElement","section","defaultLimit","premiumLimit","PremiumLimitPreview","PremiumFeaturePreviewStickers","videoSections","PremiumFeaturePreviewVideo","videos","SliderDots","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","hexToRgb","_COLORS$Math$ceil","newIndex","colorA","colorB","r","g","b","lerpRgb","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","PremiumTranslate","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumFeatureModal","PremiumLogo","PremiumFeatureItem","renderTextWithEntities","statusText","entities","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","GiftOption","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","selectStickerSet","currentIndex","stickerSetEl","isClose","animateScroll","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","reaction","availableReactions","isSelected","loadAndPlay","observeIntersection","sharedCanvasRef","sharedCanvasHqRef","isCustom","availableReaction","available","isSameReaction","staticIcon","animationId","selectAnimation","coords","useCoordsInSharedCanvas","getDocumentMediaHash","documentId","CustomEmoji","EMOJI_SIZE_PICKER","observeIntersectionForPlaying","withTranslucentThumb","AnimatedIconWithPreview","sharedCanvas","sharedCanvasCoords","stickerSet","isNearActive","favoriteStickers","isSavedMessages","isStatusPicker","isReactionPicker","isCurrentUserPremium","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isTranslucent","noContextMenus","onReactionSelect","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","loadStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","useIsIntersecting","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","reactions","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","Set","withAddSetButton","pill","fluid","grey","reactionId","getReactionUniqueKey","ReactionEmoji","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","isCustomEmoji","emoji","StickerButton","observeIntersectionForShowing","canViewSet","noContextMenu","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","STICKER_SIZE_PICKER_HEADER","hasThumbnail","thumbCustomEmojiId","isVideos","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","shouldPlay","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","getFirstLetters","HEADER_BUTTON_WIDTH","DEFAULT_ID_PREFIX","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","prefix","areAddedLoaded","allSets","defaultSets","topReactionsSlice","TOP_SYMBOL_SET_ID","cleanRecentReactions","topReaction","cleanAvailableReactions","allRecentReactions","concat","defaultStatusIconsPack","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","useHorizontalScroll","newLeft","offsetWidth","handleEmojiSelect","handleReactionSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","faded","StickerSetCover","StickerSet","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CustomEmojiPicker","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","peerIds","joinedIds","isNotJoined","selectedCount","badgeText","handleButtonClick","handleSelectionToggle","areAllSelected","Badge","isAlternateColor","missingPeerIds","hasChatsToAdd","newChatsCount","descriptionText","alreadyPeerIds","suggestedPeerIds","leaveChatlist","info","removal","selectChatFolder","renderingInfo","renderingFolderTitle","folderTabNumber","ChatlistAlready","ChatlistNew","ChatlistDelete","isSlim","folderTitle","Tab","badgeCount","isBadgeActive","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","onBackspace","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","DeleteSelectedMessageModal","seenByModal","closeSeenByModal","reactorModal","reactors","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","seenByUserIds","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","ReactionStaticEmoji","flatMap","peerReactions","reactor","seenByUser","FullNameTitle","withEmojiStatus","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","secondaryIcon","multiline","narrow","highlight","buttonRef","activeElement","privateChatUserId","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","withUsername","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","contextActions","useChatContextActions","useSelectWithEnter","MuteChatModal","ChatFolderModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","LeftSearchResultChat","privateChatUser","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","contactIdsWithMe","foundContactIds","foundMessages","split","a","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","DateSuggest","NothingFound","PickerSelectedItem","chatOrUserId","ChatMessage","RecentContacts","foundTopicIds","searchChatId","LeftSearchResultTopic","createMapStateToProps","isVoice","activeDownloads","CURRENT_TYPE","observeIntersectionForMedia","handleSelectMedia","canRenderContents","isMediaGrid","isMessageList","itemSelector","Media","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","ChatMessageResults","ChatResults","MediaResults","LinkResults","FileResults","AudioResults","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onScreenSelect","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","setState","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","translation","splice","handleDragEnd","usernameData","_state$orderedUsernam","_state$dragOrderUsern","isDragged","draggedTop","subtitle","Draggable","onDragEnd","knobStyle","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","currentUser","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","currentBio","bio","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","maxLengthIndicator","UsernameInput","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","ManageUsernames","byKey","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","ALL_FOLDER_ID","getFolderDescriptionText","isChatList","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","_state$orderedFolderI","_state$dragOrderIds$i","isBlocked","isStatic","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","dispatch","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","mode","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","isTouched","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","ShowMoreButton","itemName","maxChats","shouldHideChatTypes","onSelectedChatTypesChange","onSaveFilter","chatTypes","shouldMinimize","setIsTouched","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","SettingsFoldersChatsPicker","inviteLink","onRevoke","copyLink","link","handleCopyPrimaryClicked","handleShare","PrimaryLinkMenuButton","shareFolderScreen","pinnedChatIds","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","unlockedIds","partition","selectCanInviteToChat","setSelectedIds","isFirstRenderRef","prevUrl","handleClickDisabled","isUserBot","chatsCount","InviteLink","onDisabledClick","isRoundCheckbox","shownScreen","openShareChatFolderModal","editChatFolder","handleReset","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","handleShareFolder","noRequestNextScreen","handleOpenInvite","SettingsFoldersMain","SettingsFoldersEdit","SettingsFoldersChatFilters","SettingsShareChatlist","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","isMobileDevice","appearanceThemeOptions","keyboardSendOptions","subLabel","IS_MAC_OS","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","WallpaperTile","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","isDragging","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","canDisplayAutoarchiveSetting","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","canSetPasscode","selectCanSetPasscode","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","allowDisabledClick","rightElement","language","languages","canTranslate","canTranslateChats","doNotTranslate","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","setLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","newValue","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","rightIcon","onClickLabel","loadingOption","getPrivacyKey","screen","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","file","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","SettingsPrivacyPublicProfilePhoto","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","SettingsActiveSession","terminateWebAuthorization","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","SettingsActiveWebsite","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","renderContact","BlockUserModal","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","animatedEmoji","selectAnimatedEmoji","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaStart","SettingsTwoFaPassword","SettingsTwoFaSkippableForm","SettingsTwoFaEmailCode","SettingsTwoFaCongratulations","SettingsTwoFaEnabled","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","contactsIds","config","selectedReaction","defaultReaction","setDefaultReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","SettingsPasscodeStart","SettingsPasscodeForm","SettingsPasscodeCongratulations","SettingsPasscodeEnabled","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","canPlayAnimatedEmojis","shouldSuggestStickers","shouldUpdateStickerSetOrder","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","StickerSetCard","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","displayedOptions","setDisplayedOptions","otherLanguages","unselected","newDoNotTranslate","v","filteredDisplayedOptions","shouldShowLoginCodeInChatList","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","handleDownloadLog","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","nonInteractive","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","every","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","prev","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","_ref6","_ref7","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","isFromSettings","renderCurrentSection","isScreenActive","isFrom","currentKey","SettingsHeader","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsMain","SettingsEditProfile","SettingsGeneral","SettingsQuickReaction","SettingsCustomEmoji","SettingsNotifications","SettingsDataStorage","SettingsPrivacy","SettingsLanguage","SettingsDoNotTranslate","SettingsStickers","SettingsExperimental","SettingsGeneralBackground","SettingsGeneralBackgroundColor","SettingsActiveSessions","SettingsActiveWebsites","SettingsPrivacyBlockedUsers","SettingsPrivacyVisibility","SettingsPrivacyVisibilityExceptionList","SettingsFolders","SettingsTwoFa","SettingsPasscode","SettingsPerformance","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","shouldWrap","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","NewChatStep1","NewChatStep2","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","onTransitionEnd","StoryToggler","canShow","StoryRibbon","ChatList","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","muteUntil","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","changedTouches","getTouchY","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","_excludedClosestSelector","passive","onkeydown","enableScrolling","isReactionPickerOpen","enabledReactions","maxUniqueReactions","anchor","targetHref","canSendNow","canReschedule","canReply","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentPeers","hasCustomEmoji","noTransition","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onToggleReaction","onCopyMessages","onAboutAds","onSponsoredHide","onSponsorInfo","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","seenByDatesCount","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","shouldAvoidNegativePosition","menuElMinWidth","transformOriginY","menuStyle","withScroll","useMenuPosition","handleOpenMessageReactionPicker","bubbleStyle","ReactionSelector","allAvailableReactions","currentReactions","onShowMore","messagesCount","AvatarList","peers","MenuSeparator","inline","withWrap","sponsorInfo","detectedLanguage","selectActiveDownloads","seenByExpiresAt","seenByMaxChatMembers","noOptions","isOwn","isOwnMessage","isScheduled","isMessageLocal","isChatGroup","isAction","isActionMessage","chatFullInfo","selectChatFullInfo","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","translationRequestLanguage","hasTranslation","selectMessageTranslations","selectCanTranslateMessage","isChatTranslated","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","selectIsReactionPickerOpen","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openChatLanguageModal","openMessageReactionPicker","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","uniqueReactors","PREVIEW_AVATAR_COUNT","msg","handleDelete","handleReport","closeMenu","closePinModal","handleReply","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","shouldAddToRecent","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","MessageContextMenu","PinMessageModal","showDialog","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","additionalInfo","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isComments","originChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","teactFastList","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","userFullInfo","fullInfo","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","shouldCloseFast","setShouldCloseFast","setIsMuteModalOpen","isViewGroupInfoShown","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","DeleteChatModal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","isTouchScreen","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","rowsCount","pickerMaxHeight","REACTION_SELECTOR_WIDTH","storyUserId","areSomeReactionsAllowed","areCustomReactionsAllowed","areCustomAllowed","withCustomReactions","closeReactionPicker","renderedMessageId","renderedChatId","renderedStoryUserId","renderedStoryId","storedPosition","renderingPosition","withPortal","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","handleStoryReactionSelect","customEmojiMessage","parseMessageInput","buildCustomEmojiHtml","isReaction","chosenOrder","backdropExcludedSelector","ReactionPickerLimited","div","findInViewport","selectorOrElements","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","item","isSelectionOutOfRange","onUp","onDown","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","filename","extension","getFileExtension","previewData","shouldSkipGrouping","canDisplaySpoilerButton","GIF_MIME_TYPE","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","canShowCustomSendMenu","isForMessage","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","removeAllSelections","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","AttachmentModalItem","uniqueId","MentionTooltip","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","canSchedule","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","focusInput","addNewOption","newOptions","requestNextMutation","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","noReplaceNewlines","native","IS_ELECTRON","PRODUCTION_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","EmojiButton","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","EmojiCategory","favorite","premiumSet","chatStickerSetId","recentStickers","premiumStickers","selectShouldLoopStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","handleMouseDown","preventMessageInputBlurWithBubbling","noFastClick","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","GifButton","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","isMessageComposer","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","EmojiPicker","StickerPicker","GifPicker","SymbolMenuFooter","mobileClassName","onMouseEnter","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","BotCommand","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onSendWhenOnline","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","withSharedAnimation","shouldPreloadPreview","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","CustomEmojiButton","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","BaseResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","GifResult","MediaResult","StickerResult","ArticleResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","senderPeer","forwardInfo","isChannelPost","originalSender","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","areStickersLoaded","_set$stickers$filter","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","StickerSetResult","selectCurrentGifSearch","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentTopMessages","StatisticsRecentMessage","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","StatisticsPublicForward","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","PollAnswerResults","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","personalPhoto","notPersonalPhoto","deleteContact","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","_chat$membersCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","isForumEnabled","setIsForumEnabled","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","chatReactionsDescription","enabledLength","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","embedLinks","sendPlain","sendMessages","removedUsersCount","kickedMembers","onChatMemberSelect","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","handleSavePermissions","bannedRights","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","blocking","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","chatMembers","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","removedMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","RemoveGroupUserModal","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","privateInviteLink","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","selectedChatMember","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","getControlIsDisabled","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","handleCopyClicked","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","hideChatJoinRequest","createClassNameBuilder","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","JoinRequest","managementType","selectCurrentManagementType","ManageUser","ManageGroup","ManageChannel","ManageChatPrivacyType","ManageDiscussion","ManageGroupPermissions","ManageChatRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageChatAdministrators","ManageGroupAdminRights","ManageGroupMembers","ManageInvites","ManageInvite","ManageReactions","ManageInviteInfo","ManageJoinRequests","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","Select","hasArrow","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","CardInput","ExpiryInput","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","requestId","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","handleModalClose","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","Checkout","SavedPaymentCredentials","PasswordConfirm","PaymentInfo","ShippingInfo","Shipping","ConfirmPayment","renderModalContent","renderError","optionId","receipt","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","playSegment","hardwareConcurrency","instances","IS_TEST","Worker","createConnector"],"sourceRoot":""}