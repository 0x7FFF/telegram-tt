{"version":3,"file":"5769.1c2dcc61ded587b6ec9d.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !replyInfo?.replyToMsgId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiVideo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getMessageOriginalId,\n  getUserFullName, isChatChannel,\n  isDeletedUser, isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draftReplyInfo = !isStoryReply ? selectDraft(global, chatId!, threadId!)?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    userId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n  };\n\n  if (!isStoryReply) {\n    actions.resetDraftReplyInfo({ tabId });\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n  };\n\n  saveDraft(global, chatId, threadId, newDraft);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply ? {\n    replyInfo: currentDraft.replyInfo,\n  } : undefined;\n\n  if (!isLocalOnly) {\n    saveDraft(global, chatId, threadId, newDraft);\n  }\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft(global, chatId, threadId, newDraft);\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft(global, chatId, threadId, newDraft);\n});\n\nasync function saveDraft<T extends GlobalState>(global: T, chatId: string, threadId: number, draft?: ApiDraft) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n      });\n    })();\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId) || {};\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.peerId);\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectThreadInfo,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type {\n  ApiChat, ApiChatType, ApiContact, ApiInputMessageReplyInfo, ApiPeer, ApiUrlAuthResult,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport { addChats, addUsers, removeBlockedUser } from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot, selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectDraft,\n  selectIsTrustedBot, selectMessageReplyInfo, selectSendAs, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  const result = await loadAttachBots(global, hash);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: { hash: result?.hash },\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId, url } = payload;\n    actions.openChat({ id: chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getMessageKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers,\n  updateMessageStatistics, updateStatistics, updateStatisticsGraph,\n} from '../../reducers';\nimport { selectChat, selectChatFullInfo, selectChatMessages } from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, PREVIEW_AVATAR_COUNT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules, isChatChannel } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerPinnedStory,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectPeer, selectPeerStories, selectPeerStory, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isPinned } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isPinned });\n  global = updatePeerPinnedStory(global, peerId, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { peer, storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isPinned: currentIsPinned });\n    global = updatePeerPinnedStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerPinnedStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isPreload = 'isPreload' in payload;\n  const {\n    offset, areReactionsFirst, areJustContacts, query, limit,\n  } = isPreload ? {\n    offset: undefined,\n    areReactionsFirst: undefined,\n    areJustContacts: undefined,\n    query: undefined,\n    limit: PREVIEW_AVATAR_COUNT,\n  } : payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (!isPreload) {\n    global = updateStoryViewsLoading(global, true, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const viewsById = buildCollectionByKey(result.views, 'userId');\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  if (!isPreload) global = updateStoryViews(global, storyId, viewsById, result.nextOffset, tabId);\n\n  if (isPreload && result.views?.length) {\n    const recentViewerIds = result.views.map((view) => view.userId);\n    global = updatePeerStory(global, peerId, storyId, {\n      recentViewerIds,\n      viewsCount: result.viewsCount,\n      reactionsCount: result.reactionsCount,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatChannel(chat)) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostersListResult, boostStatusResult] = await Promise.all([\n    callApi('fetchBoostersList', { chat }),\n    callApi('fetchBoostsStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostersListResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = addUsers(global, buildCollectionByKey(boostersListResult.users, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      boosters: boostersListResult.boosters,\n      boosterIds: boostersListResult.boosterIds,\n      count: boostersListResult.count,\n      nextOffset: boostersListResult.nextOffset,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostersList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      boosters: {\n        ...tabState.boostStatistics.boosters,\n        ...result.boosters,\n      },\n      boosterIds: unique([...tabState.boostStatistics.boosterIds || [], ...result.boosterIds]),\n      count: result.count,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const newStatusResult = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!newStatusResult) {\n    return;\n  }\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal?.boostStatus) return;\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      boostStatus: newStatusResult,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({ replyToMsgId: messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  return APP_VERSION_REGEX.test(sanitizedRemoteVersion) && sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER,\n  PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n    },\n  }, tabId);\n});\n","import type { ApiStoryView } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedPeerIds: { active, archived } } = global.stories;\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const orderedPeerIds = (peer.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const peerStoryIds = peerStories[storySourceProp] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (selectPeerStories(global, previousPeerId)?.orderedIds.length || 1) - 1;\n  }\n\n  const previousStoryId = selectPeerStories(global, previousPeerId)?.[storySourceProp]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedPeerIds: { active, archived } } = global.stories;\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const orderedPeerIds = (peer.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const peerStoryIds = peerStories[storySourceProp] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = selectPeerStories(global, nextPeerId)?.[storySourceProp]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        viewsById: {},\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n\n  if (!viewModal?.viewsById?.[userId]) return global;\n\n  const updatedViewsById: Record<string, ApiStoryView> = {\n    ...viewModal.viewsById,\n    [userId]: {\n      ...viewModal.viewsById[userId],\n      isUserBlocked: isUserBlocked || undefined,\n      areStoriesBlocked: areStoriesBlocked || undefined,\n    },\n  };\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        viewsById: updatedViewsById,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { selectIsCurrentUserPremium, selectUser, selectUserFullInfo } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots({ hash: global.attachMenu.hash });\n      break;\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getPeerIdDividend } from '../../global/helpers';\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  return (\n    <div className=\"ContactGreeting\">\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div ref={containerRef} className=\"sticker\" onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getPeerIdDividend(userId) + getPeerIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\",\"image\":\"ZAL3vluMFRM8wd30wuzL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { DPR } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.image}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/useBackgroundMode';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiThreadInfo,\n} from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiReactionCount,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageKey, isReactionChosen, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../ui/Button';\n\nimport './Reactions.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  withRecentReactors?: boolean;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  withRecentReactors,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as ApiPeer[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen', 'message-reaction')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className=\"reaction-animated-emoji\"\n        containerId={getMessageKey(message)}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport safePlay from '../../../util/safePlay';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\n\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useSignal from '../../../hooks/useSignal';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageKey,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/Icon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiUser;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || message.content.storyData) ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData,\n  } = getMessageContent(message);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { userId: storyReplyUserId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location?.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyUserId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            noUserColors={isOwn}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction MessageAppendix({ isOwn } : { isOwn: boolean }) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeEmojiInteractions, activeReactions,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, repliesThreadInfo,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { userId: storyReplyUserId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadTopMessageId;\n    const replyMessage = replyToMsgId && !shouldHideReply\n      ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId)\n      : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage) : forwardHeader\n      ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyUserId\n      ? selectPeerStory(global, storyReplyUserId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyUserId ? selectUser(global, storyReplyUserId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openStoryViewer, focusMessageInComments,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId,\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId,\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId ? true : undefined, // Open topic panel for cross-chat replies\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessageInComments({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\n\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Button from '../../ui/Button';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { isLocalMessageId } from '../../../global/helpers';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = isLocalMessageId(messageIds[0]);\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getMessageHtmlId,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isLocalMessageId,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport { isBackgroundModeActive } from '../../hooks/useBackgroundMode';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  threadTopMessageId?: number;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  threadTopMessageId,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getMessageKey,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"draggable\":\"kIdhoMn_mbGnJc1YZpIK\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(\n          tabType === 'members'\n            ? ProfileState.MemberList\n            : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia),\n        );\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ox1yTGx4NBVANs7q4Ste\",\"wrapper\":\"g34egFNlUSZiOR5Y9K9A\",\"media\":\"gyVqf8gGVz_cu2HCjifT\",\"expiredIcon\":\"eg5740UDe7iAc7dGlyex\",\"contextMenu\":\"rhvyma7da0HVZh3rYFnr\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport MediaStory from '../story/MediaStory';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerPinnedStories,\n    loadStoriesArchive,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasStoriesTab ? [{ type: 'stories', title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && currentUserId === chatId ? [{ type: 'storiesArchive', title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [chatId, currentUserId, hasCommonChatsTab, hasMembersTab, hasStoriesTab, isChannel, topicId]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerPinnedStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n    storyIds,\n    archiveStoryIds,\n  );\n  const isFirstTab = (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories));\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3>{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3>{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.StoryList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZtWHQyTLrCmeNE53Hvd9\",\"noResults\":\"cuYFx3gorhlWaUcBJ0Aj\",\"section-header\":\"IPPwOeRGhyQDYbJsBsdb\",\"sectionHeader\":\"IPPwOeRGhyQDYbJsBsdb\",\"section\":\"HMySq6RoeqoKdRuUAW7z\",\"user\":\"hben8jCvRhcyebFweulH\",\"stats\":\"dBHHnaU4CZ9TELAykZyA\",\"down\":\"nlFBjRF9YGIjCHGrt2cp\",\"loadMoreSpinner\":\"QBMARpR7dewZog5QmOkh\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoostStatistics } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dateFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport InviteLink from '../../common/InviteLink';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n}: StateProps) => {\n  const { openChat, loadMoreBoosters, closeBoostStatistics } = getActions();\n  const lang = useLang();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics?.count) return undefined;\n    const loadedCount = boostStatistics.boosterIds?.length || 0;\n    const totalCount = boostStatistics.count;\n    return totalCount - loadedCount;\n  }, [boostStatistics]);\n\n  const handleBoosterClick = useLastCallback((userId: string) => {\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreBoosters();\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={boosts.toString()}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          <div className={styles.section}>\n            <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('Boosters')}\n            </h4>\n            {!boostStatistics.boosterIds?.length && (\n              <div className={styles.noResults}>{lang('NoBoostersHint')}</div>\n            )}\n            {boostStatistics.boosterIds?.map((userId) => (\n              <ListItem\n                key={userId}\n                className=\"chat-item-clickable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleBoosterClick(userId)}\n              >\n                <PrivateChatInfo\n                  className={styles.user}\n                  forceShowSelf\n                  userId={userId}\n                  status={lang('BoostExpireOn', formatDateAtTime(lang, boostStatistics.boosters![userId] * 1000))}\n                />\n              </ListItem>\n            ))}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount)}\n              </ListItem>\n            )}\n          </div>\n          <InviteLink className={styles.section} inviteLink={status!.boostUrl} title={lang('LinkForBoosting')} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n\n    return {\n      boostStatistics,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  selectAreActiveChatsLoaded, selectChat, selectCurrentMessageList, selectRightColumnContentKey, selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat } from '../../global/selectors';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AttachBotInstallModal from '../modals/attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from '../modals/boost/BoostModal.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport MapModal from '../modals/map/MapModal.async';\nimport UrlAuthModal from '../modals/urlAuth/UrlAuthModal.async';\nimport WebAppModal from '../modals/webApp/WebAppModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  boostModal?: TabState['boostModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  boostModal,\n  noRightColumnAnimation,\n  isSynced,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadPremiumSetStickers,\n    loadAuthorizations,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n      loadAuthorizations();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openChat({\n      id: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <BoostModal info={boostModal} />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n      boostModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      boostModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","undefined","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","firstMessageId","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","isMessageLocal","updateListedIds","threadId","Object","values","byTabId","_ref6","tabId","selectIsViewportNewest","addViewportId","replaceThreadParam","isActionMessage","updateThreadInfo","messagesCount","_ref7","firstUnreadId","selectFirstUnreadId","candidateGlobal","newViewportIds","selectViewportIds","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","newLastMessage","clearMessageTranslation","topics","deleteTopic","requestChatUpdate","threadIdsToUpdate","selectThreadIdFromMessage","push","setGlobal","setTimeout","getGlobal","deleteChatMessages","unique","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","addActionHandler","shouldForceReply","repliesThreadInfo","isForumTopic","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","map","Number","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","currentThreadInfo","selectThreadInfo","newThreadInfo","topMessageId","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","limit","users","repliesThreadInfos","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","updateThreadInfos","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","IS_IOS","rafPromise","delete","payload","shouldForceRender","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyId","storyPeerId","selectCurrentViewedStory","isStoryReply","type","scheduledAt","contentToBeScheduled","draftReplyInfo","selectDraft","storyReplyInfo","userId","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","resetDraftReplyInfo","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyToForFirstMessage","messageListType","selectEditingMessage","setEditingId","getMessageOriginalId","cancelApiProgress","apiUpdate","currentDraft","isLocalOnly","shouldKeepReply","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","topId","selectThreadTopMessageId","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","showNotification","translate","connectionState","isUserBot","isUnread","minId","readCount","count","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","originChannelId","selectThreadOriginChat","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","RE_TME_LINK","RE_TG_LINK","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","getUserFullName","selectForwardsCanBeSentToChat","isModalShown","closeMediaViewer","exitMessageSelectMode","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","views","forwards","repliesChatId","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","localChats","localUsers","globalChats","globalUsers","localResults","chatIds","userIds","globalResults","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","activeThreadId","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","Checkout","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","Shipping","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","attachMenu","bots","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","isFromConfirm","shouldDisplayDisclaimer","isDisclaimerNeeded","requestedAttachBotInstall","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","join","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","closeReactionPicker","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","messageKey","getMessageKey","selectPerformanceSettingsValue","stopActiveReaction","containerId","startActiveReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerPinnedStory","lastReadStoryId","storyIds","isPreload","areReactionsFirst","areJustContacts","PREVIEW_AVATAR_COUNT","updateStoryViewsLoading","viewsById","updateStoryViews","recentViewerIds","view","viewsCount","reactionsCount","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostersListResult","boostStatusResult","boosters","boosterIds","isLoadingBoosters","slots","newStatusResult","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseMessageInput","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","top","left","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSinglePeer","isSingleStory","isArchive","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","fetchChatByUsername","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","archived","areStoriesHidden","storySourceProp","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViewsById","prevIsForum","lastReadOutboxMessageId","localChat","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","key","rules","setConfirmPaymentUrl","ConfirmPayment","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","size","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","isForSideMenu","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","inlineButtons","dividend","getPeerIdDividend","lastUnreadMessageId","loadGreetingStickers","containerRef","handleStickerSelect","StickerView","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Bottom","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","openComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","Avatar","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","scale","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","onSendVote","openPollResults","requestConfetti","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","isText","REACTION_SIZE","withRecentReactors","recentReactors","recentReaction","isReactionChosen","ReactionAnimatedEmoji","AvatarList","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","playerRef","circleRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","downloadProgress","isPlayerReady","markPlayerReady","noThumb","getMessageMediaThumbDataUri","thumbRef","thumbClassNames","useMediaTransition","isTransferring","wasLoadDisabled","shouldSpinnerRender","spinnerClassNames","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","currentTime","shouldPlay","stopPlaying","capturePlaying","isAllowed","paused","stopCurrentAudio","handleTimeUpdate","onEnded","onTimeUpdate","onReady","ProgressSpinner","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","tgsUrl","isLowPriority","noLoop","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","role","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","MessageAppendix","path","filterUnits","dy","in","stdDeviation","fill","focusedMessage","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","isChatWithSelf","selectIsChatWithSelf","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatFullInfo","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","senderAdminMember","threadTopMessageId","isThreadTop","replyToPeerId","replyFrom","storyReplyUserId","storyReplyId","getStoryReplyInfo","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","isOwnMessage","hasMessageReply","isReplyToMessage","hasStoryReply","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","focusMessageInComments","replyToTopId","isQuote","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","Album","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","peerColorClass","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","requestForcedReflow","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderSenderName","senderEmojiStatus","senderIsPremium","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","onCancelMediaTransfer","Invoice","Location","CommentButton","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","getContainerHeight","isViewportNewest","isComments","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","isLocalMessageId","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","ConfirmDialog","confirmIsDestructive","confirmLabel","confirmHandler","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","MobileSearch","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","AttachBotInstallModal","info","BoostModal","ChatlistModal","MapModal","UrlAuthModal","WebAppModal","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadPeerSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","isOut","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","MediaAreaOverlay","TABS","mediaSearchType","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","storyByIds","archiveStoryIds","archiveIds","commonChatIds","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadPeerPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","initialTab","setActiveTab","renderingActiveTab","tabType","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","ProfileState","MemberList","StoryList","SharedMedia","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","RightSearch","loadMoreBoosters","closeBoostStatistics","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","statsOverview","level","premiumSubscribers","boostersToLoadCount","loadedCount","handleBoosterClick","section","PremiumProgress","leftText","rightText","floatingBadgeText","floatingBadgeIcon","StatisticsOverview","sectionHeader","noResults","formatDateAtTime","showMore","loadMoreSpinner","down","InviteLink","inviteLink","boostUrl","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","hideTimeout","prevConfettiTime","DeleteFolderDialog","Dialogs","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","DownloadUrl","baseURI","filename","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPremiumSetStickers","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}