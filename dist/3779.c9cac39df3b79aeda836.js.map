{"version":3,"file":"3779.c9cac39df3b79aeda836.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/ui/SelectAvatar.module.scss?3384","webpack://telegram-t/./src/components/ui/SelectAvatar.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiDimensions, ApiMessage } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media, ${MESSAGE_CONTENT_SELECTOR} .thumbnail`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/environment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isInPictureInPicture, setIsInPictureInPicture] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsInPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      onLeave();\n      setIsInPictureInPicture(false);\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isInPictureInPicture];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize, getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto || actionPhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete\"\n      title=\"Are you sure?\"\n    >\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n        {lang('Preview.DeletePhoto')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  zoomLevelChange,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n  setZoomLevelChange,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleUpdate = useCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  }, [avatarPhoto, avatarOwnerId, selectMedia, updateProfilePhoto, updateChatPhoto]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport { captureEvents } from '../../util/captureEvents';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  shouldCloseOnClick?: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\nconst MAX_LOOP_DURATION = 30; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if ((e.key === 'Enter' || e.key === ' ') && !isInPictureInPicture) {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current?.scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    isHidden,\n    isFullscreen,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged, isHidden, isFullscreen]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n  const isMoving = isMouseDown && scale > 1;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          isMoving={isMoving}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, isMobile, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { exitPictureInPictureIfNeeded } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    if (!chatId || !mediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: mediaId });\n    }\n  }, [handleClose, isMobile, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const handleBeforeDelete = useCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  }, [handleClose, mediaId, mediaIds, selectMedia]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === (avatarOwner as ApiUser).fullInfo?.fallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        isChatWithSelf,\n        canUpdateMedia,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album\n      || origin === MediaViewerOrigin.SuggestedAvatar) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useCallback, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  }, []);\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n\n  const handleTopicSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  }, []);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  }, [chatsById, loadTopics, onSelectChatOrUser, resetSearch]);\n\n  const handleTopicClick = useCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  }, [forumId, onSelectChatOrUser]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slide-fade\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n) => {\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        const { req_id: requestId } = data.eventData;\n        // eslint-disable-next-line no-null/no-null -- Required by spec\n        window.navigator.clipboard.readText().catch(() => null).then((text) => {\n          sendEvent({\n            eventType: 'clipboard_text_received',\n            eventData: {\n              req_id: requestId,\n              data: text,\n            },\n          });\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendEvent, sendTheme, sendViewport, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useOnChange from '../../hooks/useOnChange';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './WebAppModal.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useOnChange(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp] as const);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n    }\n  }, [closeCloseModal, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButtonVisible && 'state-back',\n  );\n\n  const header = useMemo(() => {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }, [\n    lang, handleBackClick, bot, MoreMenuButton, chat, openBotChat, handleRefreshClick, attachBot,\n    handleToggleClick, handleSettingsButtonClick, isBackButtonVisible, headerColor, backButtonClassName,\n  ]);\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className=\"WebAppModal\"\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={header}\n      hasCloseButton\n      style={`background-color: ${backgroundColor}`}\n    >\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName('web-app-frame', shouldDecreaseWebFrameSize && 'with-button')}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              'web-app-button',\n              shouldShowMainButton && 'visible',\n              shouldHideButton && 'hidden',\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={buildClassName('web-app-popup', !renderingPopupParams.title?.trim().length && 'without-title')}\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.text || button.type}\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                fluid\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId! });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useOnChange from '../../../hooks/useOnChange';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useOnChange(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {(premiumPromoOrder || PREMIUM_FEATURE_SECTIONS).map((section, index) => {\n                if (!PREMIUM_FEATURE_SECTIONS.includes(section)) return undefined;\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n\n  const handleExitMessageSelectMode = useCallback(() => {\n    exitMessageSelectMode();\n  }, [exitMessageSelectMode]);\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const handleCloseSeenByModal = useCallback(() => {\n    closeSeenByModal();\n  }, [closeSeenByModal]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleCloseSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                      <FullNameTitle peer={user} withEmojiStatus />\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n  const tgsUrl = localEffectAnimation && (localEffectAnimation in LOCAL_TGS_URLS)\n    ? LOCAL_TGS_URLS[localEffectAnimation as keyof typeof LOCAL_TGS_URLS]\n    : effectTgsUrl;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={tgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(LOCAL_TGS_URLS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  useHorizontalScroll(chatSelectionRef.current, undefined, true);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport {\n  selectChat,\n} from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      lastSyncTime,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = e.currentTarget.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      e.currentTarget.value = e.currentTarget.value.replace(/\\n/g, ' ');\n      e.currentTarget.selectionEnd = previousSelectionEnd;\n    }\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId!, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder as ApiChatFolder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div className=\"picker-list-divider\" />\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  shouldArchiveAndMuteNewNonContact,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"key\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('Passcode')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NewChatsFromNonContacts')}\n        </h4>\n        <Checkbox\n          label={lang('ArchiveAndMute')}\n          subLabel={lang('ArchiveAndMuteInfo')}\n          checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n          onCheck={handleArchiveAndMuteChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption, loadAttachBots]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"fb5F16dNcZnOl5zZNuRC\"};","import type { ChangeEvent, RefObject } from 'react';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport CropModal from './CropModal';\n\nimport styles from './SelectAvatar.module.scss';\n\ntype OwnProps = {\n  onChange: (file: File) => void;\n  inputRef: RefObject<HTMLInputElement>;\n};\n\nconst SelectAvatar: FC<OwnProps> = ({\n  onChange,\n  inputRef,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n  }, [onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        onChange={handleSelectFile}\n        accept=\"image/png, image/jpeg\"\n        ref={inputRef}\n        className={styles.input}\n      />\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </>\n  );\n};\n\nexport default memo(SelectAvatar);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUser,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const fallbackPhoto = currentUser.fullInfo?.fallbackPhoto;\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!currentUser.fullInfo) {\n      loadFullUser({ userId: currentUser.id });\n    }\n  }, [currentUser.fullInfo, currentUser.id, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: fallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, fallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(fallbackPhoto ? 'Privacy.ProfilePhoto.UpdatePublicPhoto' : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {fallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={fallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(fallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUser: ApiUser;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUser,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto currentUser={currentUser} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUser = selectUser(global, global.currentUserId!)!;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUser,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUser,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","// extracted by mini-css-extract-plugin\nexport default {\"video\":\"h6jE3TEaqlzbs0ro0J2_\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBoundsInSharedCanvas from '../../../hooks/useBoundsInSharedCanvas';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noAnimate?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noAnimate,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const bounds = useBoundsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className=\"sticker-set-cover\">\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size || bounds.size}\n            play={isIntersecting && !noAnimate}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={bounds.coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={isIntersecting && !noAnimate}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            className={transitionClassNames}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noAnimate?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noAnimate,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noAnimate={noAnimate}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noAnimate={noAnimate}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  availableReactions,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  isForumPanelOpen?: boolean;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  onReset,\n  onTopicSearch,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelOpen && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} isForumPanelOpen={isForumPanelOpen} />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  chosen?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  previewIndex,\n  isReady,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn('static')}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  memo, useLayoutEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\n\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { isSameReaction, canSendReaction, getReactionUniqueKey } from '../../../global/helpers';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  onToggleReaction,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY && e.cancelable) {\n      e.preventDefault();\n    }\n  };\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }) || [];\n  }, [availableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions]);\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {reactionsToRender.map((reaction, i) => {\n            if (!reaction) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={getReactionUniqueKey(reaction.reaction)}\n                previewIndex={i}\n                isReady={isReady}\n                onToggleReaction={onToggleReaction}\n                reaction={reaction}\n                chosen={userReactionIndexes.has(i)}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage, ApiReaction, ApiSponsoredMessage, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n      || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [isMobile, withReactions]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo, getChatMessageLink,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  threadId,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleRescheduleMessage = useCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  }, [message.chatId, message.id, onClose, rescheduleMessage]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  }, [handleRescheduleMessage, requestCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  }, [chatUsername, closeMenu, message, threadId]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction,\n    });\n    closeMenu();\n  }, [closeMenu, message, toggleReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectIsSetPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isSetPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isSetPremium,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    openPremiumModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n  const isButtonLocked = !isAdded && isSetPremium && !isCurrentUserPremium;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder: isAdded });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      if (isButtonLocked) {\n        openPremiumModal({ initialSection: 'animated_emoji' });\n        return;\n      }\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [isButtonLocked, onClose, openPremiumModal, renderingStickerSet, toggleStickerSet]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n    if (isButtonLocked) {\n      return lang('EmojiInput.UnlockPack', renderingStickerSet.title);\n    }\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={renderingStickerSet\n        ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              isShiny={isButtonLocked}\n              withPremiumGradient={isButtonLocked}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const isSetPremium = stickerSet && selectIsSetPremium(stickerSet);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSetPremium,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectNotifySettings,\n  selectNotifyExceptions,\n  selectUser,\n  selectChatBot,\n  selectIsPremiumPurchaseBlocked,\n  selectCurrentMessageList, selectTabState,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getCanDeleteChat,\n  selectIsChatMuted,\n  getCanAddContact,\n  isChatChannel,\n  isChatGroup,\n  getCanManageTopic,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleViewGroupInfo = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  }, [chatId, closeMenu, openChatWithInfo, threadId]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleCreateTopicClick = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  }, [openCreateTopicPanel, chatId, closeMenu]);\n\n  const handleEditTopicClick = useCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  }, [openEditTopicPanel, chatId, threadId, closeMenu]);\n\n  const handleViewAsTopicsClick = useCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  }, [closeMenu, openChat]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, requestMasterAndJoinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  const handleOpenAsMessages = useCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  }, [closeMenu, onAsMessagesClick]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat, selectTabState } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleCloseLocalTextSearch = useCallback(() => {\n    closeLocalTextSearch();\n  }, [closeLocalTextSearch]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  }, [threshold]);\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useCallback(() => {\n    onToggleSpoiler?.(index);\n  }, [index, onToggleSpoiler]);\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <i\n            className={buildClassName(\n              attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n              styles.actionItem,\n            )}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n            <i className={buildClassName('icon-delete', styles.actionItem)} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment, ApiChatMember, ApiSticker } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChat, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst CAPTION_SYMBOLS_LEFT_THRESHOLD = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n  const lang = useLang();\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    `#${EDITABLE_INPUT_MODAL_ID}`,\n    onCaptionUpdate,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  const { isCustomEmojiTooltipOpen, insertCustomEmoji } = useCustomEmojiTooltip(\n    Boolean(shouldSuggestCustomEmoji) && isOpen,\n    `#${EDITABLE_INPUT_MODAL_ID}`,\n    caption,\n    onCaptionUpdate,\n    customEmojiForEmoji,\n    !isReady,\n  );\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    insertCustomEmoji: insertCustomEmojiFromEmojiTooltip,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(shouldSendCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: shouldSendCompressed,\n        shouldSendGrouped,\n      });\n    }\n  }, [\n    isOpen, shouldSchedule, onSendScheduled, onSend, updateAttachmentSettings, shouldSendCompressed, shouldSendGrouped,\n    onSendSilent,\n  ]);\n\n  const handleSendSilent = useCallback(() => {\n    sendAttachments(true);\n  }, [sendAttachments]);\n\n  const handleSendClick = useCallback(() => {\n    sendAttachments();\n  }, [sendAttachments]);\n\n  const handleScheduleClick = useCallback(() => {\n    sendAttachments(false, true);\n  }, [sendAttachments]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  }, [handleFileSelect]);\n\n  const handleDelete = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleEnableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: true })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleDisableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleToggleSpoiler = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useMemo(() => {\n    const captionLeftBeforeLimit = captionLimit - getHtmlTextLength(caption);\n    return captionLeftBeforeLimit <= CAPTION_SYMBOLS_LEFT_THRESHOLD ? captionLeftBeforeLimit : undefined;\n  }, [caption, captionLimit]);\n\n  const isQuickGallery = shouldSendCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                shouldSendCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                )\n              }\n              {shouldSendCompressed && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={shouldSendCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertCustomEmojiFromEmojiTooltip}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n          />\n          <div className={styles.caption}>\n            <MessageInput\n              id=\"caption-input-text\"\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              html={caption}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && attachments.length)}\n              captionLimit={leftChars}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chat?.fullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !isMobile);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\nimport grey from '../../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isCustomEmojiPicker?: boolean;\n  shouldHideRecentHeader?: boolean;\n  withDefaultTopicIcon?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n  isCustomEmojiPicker,\n  shouldHideRecentHeader,\n  withDefaultTopicIcon,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(ITEMS_PER_ROW_FALLBACK);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickerMarginPx = isMobile ? 8 : 16;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const containerPaddingPx = isMobile ? 8 : 0;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [clearRecentCustomEmoji, clearRecentStickers, closeConfirmModal, isEmoji]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const handleDefaultTopicIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useCallback((width: number) => {\n    if (!width) return ITEMS_PER_ROW_FALLBACK;\n\n    return Math.floor((width - containerPaddingPx) / (itemSize + margin));\n  }, [containerPaddingPx, itemSize, margin]);\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  }, [calculateItemsPerRow]);\n  useResizeObserver(ref, handleResize);\n\n  useLayoutEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow) * (itemSize + margin);\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * (itemSize + margin);\n\n  const shouldHideHeader = isRecent && shouldHideRecentHeader;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${isCustomEmojiPicker ? 'custom-emoji-set' : 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className=\"symbol-set-name\">\n            {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n            {stickerSet.title}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n          )}\n          {!isRecent && isEmoji && !isInstalled && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersection}\n                noAnimate={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport {\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  loadAndPlay: boolean;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n};\n\ntype StateProps = {\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedCustomEmojiIds?: string[];\n  recentCustomEmoji: ApiSticker[];\n  defaultTopicIconsId?: string;\n  featuredCustomEmojiIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  recentCustomEmoji,\n  stickerSetsById,\n  featuredCustomEmojiIds,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  onCustomEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('custom-emoji-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('custom-emoji-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrRecent[] = [];\n\n    if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmoji.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmoji,\n        count: recentCustomEmoji.length,\n        isEmoji: true as true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(featuredCustomEmojiIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, defaultTopicIconsId, featuredCustomEmojiIds, lang, recentCustomEmoji, stickerSetsById,\n    withDefaultTopicIcons,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`custom-emoji-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', 'CustomEmojiPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            isSavedMessages={isSavedMessages}\n            shouldHideRecentHeader={withDefaultTopicIcons}\n            withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            isCustomEmojiPicker\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n    } = global.stickers;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    const recentCustomEmoji = Object.values(pickTruthy(global.customEmojis.byId, global.recentCustomEmojis));\n\n    return {\n      stickerSetsById: setsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      recentCustomEmoji,\n      featuredCustomEmojiIds: global.customEmojis.featuredIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n    };\n  },\n)(CustomEmojiPicker));\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from './CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    shouldUpdateStickerSetsOrder?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const { loadPremiumSetStickers, loadFeaturedEmojiStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useEffect(() => {\n    if (!lastSyncTime) return;\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n    loadFeaturedEmojiStickers();\n  }, [isCurrentUserPremium, lastSyncTime, loadFeaturedEmojiStickers, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true, shouldUpdateStickerSetsOrder);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            chatId={chatId}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n  isCurrentUserPremium,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onCustomEmojiSelect,\n  addRecentCustomEmoji,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef.current);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (\n    isOpen ? captureEscKeyListener(clearCustomEmojiForEmoji) : undefined\n  ), [isOpen, clearCustomEmojiForEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji documentId={emoji.id} size={CUSTOM_EMOJI_SIZE} withSharedAnimation shouldPreloadPreview />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef.current);\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoom-fade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top)}>\n              <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoom-fade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat, selectTabState, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n  const personalPhoto = user.fullInfo?.personalPhoto;\n  const notPersonalPhoto = user.fullInfo?.profilePhoto || user.fullInfo?.fallbackPhoto;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              {lang('UserInfo.SuggestPhoto', user.firstName)}\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              {lang('UserInfo.SetCustomPhoto', user.firstName)}\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    user={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = selectTabState(global).management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n  isChatSuperGroup,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 9;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => hasLinkedChannel || isChatPublic(chat), [chat, hasLinkedChannel]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const handleForumToggle = useCallback(() => {\n    toggleForum({ chatId, isEnabled: !chat.isForum });\n  }, [chat.isForum, chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chat, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n      'manageTopics',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  }, [chat.fullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={chat.isForum}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={chat.isForum}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && isChatSuperGroup(chat) && getHasAdminRight(chat, 'changeInfo');\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={!permissions.manageTopics}\n                label={lang('CreateTopicsPermission')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiAvailableReaction, ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    const text = totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n    return text;\n  }, [availableReactions, chat, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { selectChat, selectTabState, selectManagement } from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? editableUsername : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={!permissions.manageTopics}\n                label={lang('CreateTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat?.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? chat.fullInfo?.adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  isBasicGroup?: boolean;\n  areParticipantsHidden?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  isBasicGroup,\n  areParticipantsHidden,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {!isBasicGroup && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    return {\n      isBasicGroup: Boolean(chat && isChatBasicGroup(chat)),\n      areParticipantsHidden: Boolean(chat && chat.fullInfo?.areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.usernames && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={customIcon} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={handleClearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={closeModal}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  isForForum?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  isForForum,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n    isForForum && 'rounded-square',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useOnChange","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","shouldDeleteForAll","handleDeleteMessageForSelf","lang","useLang","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","zoomLevelChange","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","setZoomLevelChange","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","handleZoomOut","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","length","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlaying","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","onLeave","isSupported","setIsSupported","setIsInPictureInPicture","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isMoving","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","content","action","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","fullscreenProp","checkIfFullscreen","useFullscreenStatus","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","isRtl","toFixed","selector","matches","messageId","isAvatar","settings","byKey","sender","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","formatMediaDateTime","date","shouldSkipHistoryAnimations","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","selectChatScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","disableDirectTextInput","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handleBeforeDelete","ShowTransition","noCloseTransition","Transition","activeKey","name","fullInfo","fallbackPhoto","ReportModal","subject","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","result","values","reduce","acc","topic","getCanPostInChat","keys","Number","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","isManyMessages","forwardMessages","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","renderInvite","contact","pick","getReadableErrorText","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","request","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","ignoreEventsRef","lastFrameSizeRef","frame","once","contentWindow","postMessage","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","requestId","navigator","clipboard","readText","catch","then","useWebAppFrame","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","isAttachBot","destructive","hasSettings","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasCloseButton","sandbox","allow","allowFullScreen","confirmIsDestructive","fluid","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","confirmAttachBotInstall","cancelAttachBotInstall","setIsWriteAllowed","prevBot","renderingBot","handleConfirm","shortName","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","slice","cycleRestrict","clientWidth","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","handleCloseSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","availableReactions","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","forEach","reaction","some","r","isSameReaction","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","getReactionUniqueKey","ReactionStaticEmoji","flatMap","userReactions","reactor","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","LOCAL_TGS_URLS","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","handleClearRecentlyFoundChats","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","foundTopicIds","searchChatId","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","forceInitApi","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","teactExperimentControlled","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","noReplaceNewlines","textareaRef","labelText","fullClassName","textarea","previousSelectionEnd","selectionEnd","htmlFor","ZERO_POINT","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","offsetWidth","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","isDragged","draggedTop","subtitle","narrow","secondaryIcon","multiline","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","getFolderDescriptionText","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","pill","isBlocked","inactive","isStatic","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","privacy","blocked","passcode","hasPasscode","isCurrentUserPremium","blockedCount","totalCount","webAuthCount","activeWebSessions","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleUpdateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","languages","language","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","selectedFile","setSelectedFile","handleAvatarCrop","croppedImg","handleModalClose","accept","CropModal","file","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","terminateWebAuthorization","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","setUserSearchQuery","blockContact","query","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userOrChat","userMainUsername","renderContact","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","animatedEmoji","selectAnimatedEmoji","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","config","selectedReaction","defaultReaction","setDefaultReaction","availableReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","stickerSet","STICKER_SIZE_PICKER_HEADER","noAnimate","sharedCanvasRef","loadStickers","hasThumbnail","isLottie","isVideos","isIntersecting","useIsIntersecting","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","isReady","useBoundsInSharedCanvas","stickerSetInfo","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","coords","getFirstLetters","firstSticker","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","noContextMenu","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","added","setIds","customEmojiSetIds","customEmojis","stickerSetsById","setsById","shouldSuggestStickers","shouldLoopStickers","openStickerSet","stickerSettingsRef","observeIntersectionForCovers","handleStickerSetClick","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","isForumPanelOpen","onTopicSearch","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","onTransitionEnd","ChatList","folderType","ForumPanel","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","chosen","onToggleReaction","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","enabledReactions","currentReactions","maxUniqueReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","cancelable","reactionsToRender","canSendReaction","userReactionIndexes","chosenReactions","chosenOrder","findIndex","onWheelCapture","onTouchMove","has","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","MenuSeparator","Skeleton","inline","withWrap","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","selectStickerSet","every","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","recentReactions","uniqueReactors","msg","handleReport","closeMenu","closePinModal","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","reportMessageIds","scheduledMaxDate","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","canSendStickers","isSetPremium","selectIsSetPremium","shouldSchedule","selectShouldSchedule","toggleStickerSet","prevStickerSet","renderingStickerSet","isAdded","isArchived","installedDate","isEmoji","isButtonLocked","isScheduleRequested","isPreloadedGlobally","shouldUpdateStickerSetsOrder","handleButtonClick","stickerSetId","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","suffix","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","File","filename","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","caption","canShowCustomSendMenu","shouldSuggestCompression","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","shouldSendCompressed","setShouldSendCompressed","shouldCompress","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isCustomEmojiTooltipOpen","insertCustomEmoji","useCustomEmojiTooltip","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","insertCustomEmojiFromEmojiTooltip","closeEmojiTooltip","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","captionLeftBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","isMultiple","isBottomDividerShown","renderHeader","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","uniqueId","emojis","onEmojiSelect","onCustomEmojiSelect","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","emoji","native","image","isLoaded","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","RECENT_SYMBOL_SET_ID","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","loadAndPlay","favoriteStickers","isCustomEmojiPicker","shouldHideRecentHeader","withDefaultTopicIcon","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","sharedCanvasHqRef","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","stickerMarginPx","emojiMarginPx","containerPaddingPx","isRecent","isFavorite","FAVORITE_SYMBOL_SET_ID","isPremiumSet","handleClearRecent","handleAddClick","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","calculateItemsPerRow","contentRect","useResizeObserver","isLocked","isFree","isInstalled","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","heightWhenCut","shouldHideHeader","favoriteStickerIdsSet","grey","isHqEmoji","canvasRef","canViewSet","onUnfaveClick","onFaveClick","onRemoveRecentClick","stickerSetIntersections","recentCustomEmoji","pickTruthy","recentCustomEmojis","addedCustomEmojiIds","canAnimate","featuredCustomEmojiIds","featuredIds","defaultTopicIconsId","withDefaultTopicIcons","activeSetIndex","setActiveSetIndex","areAddedLoaded","allSets","defaultSets","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","stickerSetEl","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","favorite","premiumSet","recentStickers","premiumStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","CustomEmoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","loadPremiumSetStickers","loadFeaturedEmojiStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","clearStickersForEmoji","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","withSharedAnimation","shouldPreloadPreview","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","shouldPlay","selectShouldLoopStickers","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","prev","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","deleteContact","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","personalPhoto","notPersonalPhoto","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","limitReachedModal","hasLinkedChannel","isBasicGroup","invites","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","checkbox","chatReactionsDescription","enabledLength","allowed","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","manageTopics","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","playSegment","croppedBlobUrl","setCroppedBlobUrl","URL","revokeObjectURL","createObjectURL","labelClassName"],"sourceRoot":""}