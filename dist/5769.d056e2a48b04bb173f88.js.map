{"version":3,"file":"5769.d056e2a48b04bb173f88.js","mappings":"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","sources":["webpack://telegram-t/./src/util/deepLinkParser.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/usePrevious2.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { RE_TG_LINK, RE_TME_LINK } from '../config';\nimport { isUsernameValid } from './username';\n\nexport type DeepLinkMethod = 'resolve' | 'login' | 'passport' | 'settings' | 'join' | 'addstickers' | 'addemoji' |\n'setlanguage' | 'addtheme' | 'confirmphone' | 'socks' | 'proxy' | 'privatepost' | 'bg' | 'share' | 'msg' | 'msg_url' |\n'invoice' | 'addlist' | 'boost' | 'giftcode';\n\nexport enum DeepLinkType {\n  PublicMessageLink = 'PublicMessageLink',\n  PrivateMessageLink = 'PrivateMessageLink',\n  ShareLink = 'ShareLink',\n  ChatFolderLink = 'ChatFolderLink',\n  Unknown = 'Unknown',\n}\n\ninterface PublicMessageLink {\n  type: DeepLinkType.PublicMessageLink;\n  username: string;\n  messageId: number;\n  isSingle?: boolean;\n  threadId?: number;\n  commentId?: number;\n  mediaTimestamp?: string;\n}\n\ninterface PrivateMessageLink {\n  type: DeepLinkType.PrivateMessageLink;\n  channelId: string;\n  messageId: number;\n  isSingle?: boolean;\n  threadId?: number;\n  commentId?: number;\n  mediaTimestamp?: string;\n}\n\ninterface ShareLink {\n  type: DeepLinkType.ShareLink;\n  url: string;\n  text?: string;\n}\n\ninterface ChatFolderLink {\n  type: DeepLinkType.ChatFolderLink;\n  slug: string;\n}\n\ntype DeepLink = PublicMessageLink | PrivateMessageLink | ShareLink | ChatFolderLink;\n\ntype BuilderParams<T extends DeepLink> = Record<keyof Omit<T, 'type'>, string>;\ntype BuilderReturnType<T extends DeepLink> = T | undefined;\n\nconst ELIGIBLE_HOSTNAMES = new Set(['t.me', 'telegram.me', 'telegram.dog']);\n\nexport function isDeepLink(link: string): boolean {\n  return Boolean(link.match(RE_TME_LINK) || link.match(RE_TG_LINK));\n}\n\nexport function tryParseDeepLink(link: string): DeepLink | undefined {\n  try {\n    return parseDeepLink(link);\n  } catch (err) {\n    return undefined;\n  }\n}\n\nfunction parseDeepLink(url: string) {\n  if (url.startsWith('https:')) {\n    const urlParsed = new URL(url);\n    return handleHttpLink(urlParsed);\n  }\n  if (url.startsWith('tg:')) {\n    // Chrome parse url with tg: protocol incorrectly\n    const urlParsed = new URL(url.replace(/^tg:/, 'http:'));\n    return handleTgLink(urlParsed);\n  }\n  return undefined;\n}\n\nfunction handleTgLink(url: URL) {\n  const { hostname } = url;\n  const queryParams = getQueryParams(url);\n  const pathParams = getPathParams(url);\n  const method = hostname as DeepLinkMethod;\n\n  const deepLinkType = getTgDeepLinkType(queryParams, pathParams, method);\n  switch (deepLinkType) {\n    case DeepLinkType.PublicMessageLink: {\n      const {\n        domain, post, single, thread, comment, t,\n      } = queryParams;\n      return buildPublicMessageLink({\n        username: domain,\n        messageId: post,\n        isSingle: single,\n        threadId: thread,\n        commentId: comment,\n        mediaTimestamp: t,\n      });\n    }\n    case DeepLinkType.PrivateMessageLink: {\n      const {\n        channel, post, single, thread, comment, t,\n      } = queryParams;\n      return buildPrivateMessageLink({\n        channelId: channel,\n        messageId: post,\n        isSingle: single,\n        threadId: thread,\n        commentId: comment,\n        mediaTimestamp: t,\n      });\n    }\n    case DeepLinkType.ShareLink:\n      return buildShareLink({ text: queryParams.text, url: queryParams.url });\n    case DeepLinkType.ChatFolderLink:\n      return buildChatFolderLink({ slug: queryParams.slug });\n    default:\n      break;\n  }\n  return undefined;\n}\n\nfunction handleHttpLink(url: URL) {\n  if (!ELIGIBLE_HOSTNAMES.has(url.hostname)) {\n    return undefined;\n  }\n  const queryParams = getQueryParams(url);\n  const pathParams = getPathParams(url);\n\n  const deepLinkType = getHttpDeepLinkType(queryParams, pathParams);\n  switch (deepLinkType) {\n    case DeepLinkType.PublicMessageLink: {\n      const {\n        single, comment, t,\n      } = queryParams;\n      const {\n        username,\n        thread,\n        messageId,\n      } = pathParams.length === 2 ? {\n        username: pathParams[0],\n        thread: queryParams.thread,\n        messageId: pathParams[1],\n      } : {\n        username: pathParams[0],\n        thread: pathParams[1],\n        messageId: pathParams[2],\n      };\n      return buildPublicMessageLink({\n        username,\n        messageId,\n        isSingle: single,\n        threadId: thread,\n        commentId: comment,\n        mediaTimestamp: t,\n      });\n    }\n    case DeepLinkType.PrivateMessageLink: {\n      const {\n        single, comment, t,\n      } = queryParams;\n      const {\n        channelId,\n        thread,\n        messageId,\n      } = pathParams.length === 3 ? {\n        channelId: pathParams[1],\n        thread: queryParams.thread,\n        messageId: pathParams[2],\n      } : {\n        channelId: pathParams[1],\n        thread: pathParams[2],\n        messageId: pathParams[3],\n      };\n      return buildPrivateMessageLink({\n        channelId,\n        messageId,\n        isSingle: single,\n        threadId: thread,\n        commentId: comment,\n        mediaTimestamp: t,\n      });\n    }\n    case DeepLinkType.ShareLink: {\n      return buildShareLink({ text: queryParams.text, url: queryParams.url });\n    }\n    case DeepLinkType.ChatFolderLink:\n      return buildChatFolderLink({ slug: pathParams[1] });\n    default:\n      break;\n  }\n  return undefined;\n}\n\nfunction getHttpDeepLinkType(\n  queryParams: Record<string, string>,\n  pathParams: string[],\n) {\n  const len = pathParams.length;\n  const method = pathParams[0];\n  if (len === 1) {\n    if (method === 'share') {\n      return DeepLinkType.ShareLink;\n    }\n  } else if (len === 2) {\n    if (method === 'addlist') {\n      return DeepLinkType.ChatFolderLink;\n    }\n    if (isUsernameValid(pathParams[0]) && isNumber(pathParams[1])) {\n      return DeepLinkType.PublicMessageLink;\n    }\n  } else if (len === 3) {\n    if (method === 'c' && pathParams.slice(1).every(isNumber)) {\n      return DeepLinkType.PrivateMessageLink;\n    }\n    if (isUsernameValid(pathParams[0]) && pathParams.slice(1).every(isNumber)) {\n      return DeepLinkType.PublicMessageLink;\n    }\n  } else if (len === 4) {\n    if (method === 'c' && pathParams.slice(1).every(isNumber)) {\n      return DeepLinkType.PrivateMessageLink;\n    }\n  }\n  return DeepLinkType.Unknown;\n}\n\nfunction getTgDeepLinkType(\n  queryParams: Record<string, string>,\n  pathParams: string[],\n  method: DeepLinkMethod,\n) {\n  switch (method) {\n    case 'resolve': {\n      const { domain, post } = queryParams;\n      if (domain && post) {\n        return DeepLinkType.PublicMessageLink;\n      }\n      break;\n    }\n    case 'privatepost': {\n      const { channel, post } = queryParams;\n      if (channel && post) {\n        return DeepLinkType.PrivateMessageLink;\n      }\n      break;\n    }\n    case 'msg_url':\n      return DeepLinkType.ShareLink;\n    case 'addlist':\n      return DeepLinkType.ChatFolderLink;\n    default:\n      break;\n  }\n  return DeepLinkType.Unknown;\n}\n\nfunction buildShareLink(params: BuilderParams<ShareLink>): BuilderReturnType<ShareLink> {\n  const { url, text } = params;\n  if (!url) {\n    return undefined;\n  }\n  return {\n    type: DeepLinkType.ShareLink,\n    url,\n    text,\n  };\n}\n\nfunction buildPublicMessageLink(params: BuilderParams<PublicMessageLink>): BuilderReturnType<PublicMessageLink> {\n  const {\n    messageId, threadId, commentId, username, isSingle, mediaTimestamp,\n  } = params;\n  if (!username || !isUsernameValid(username)) {\n    return undefined;\n  }\n  if (!messageId || !isNumber(messageId)) {\n    return undefined;\n  }\n  if (threadId && !isNumber(threadId)) {\n    return undefined;\n  }\n  if (commentId && !isNumber(commentId)) {\n    return undefined;\n  }\n  return {\n    type: DeepLinkType.PublicMessageLink,\n    username,\n    messageId: Number(messageId),\n    isSingle: isSingle === '',\n    threadId: threadId ? Number(threadId) : undefined,\n    commentId: commentId ? Number(commentId) : undefined,\n    mediaTimestamp,\n  };\n}\n\nfunction buildPrivateMessageLink(params: BuilderParams<PrivateMessageLink>): BuilderReturnType<PrivateMessageLink> {\n  const {\n    messageId, threadId, commentId, channelId, isSingle, mediaTimestamp,\n  } = params;\n  if (!channelId || !isNumber(channelId)) {\n    return undefined;\n  }\n  if (!messageId || !isNumber(messageId)) {\n    return undefined;\n  }\n  if (threadId && !isNumber(threadId)) {\n    return undefined;\n  }\n  if (commentId && !isNumber(commentId)) {\n    return undefined;\n  }\n  return {\n    type: DeepLinkType.PrivateMessageLink,\n    channelId,\n    messageId: Number(messageId),\n    isSingle: isSingle === '',\n    threadId: threadId ? Number(threadId) : undefined,\n    commentId: commentId ? Number(commentId) : undefined,\n    mediaTimestamp,\n  };\n}\n\nfunction buildChatFolderLink(params: BuilderParams<ChatFolderLink>): BuilderReturnType<ChatFolderLink> {\n  const {\n    slug,\n  } = params;\n  if (!slug) {\n    return undefined;\n  }\n  return {\n    type: DeepLinkType.ChatFolderLink,\n    slug,\n  };\n}\n\nfunction isNumber(s: string) {\n  return /^-?\\d+$/.test(s);\n}\n\nfunction getPathParams(url: URL) {\n  return url.pathname.split('/').filter(Boolean).map(decodeURI);\n}\n\nfunction getQueryParams(url: URL) {\n  return Object.fromEntries(url.searchParams);\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  checkIfHasUnreadReactions, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessageByPollId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfos': {\n      const {\n        threadInfoUpdates,\n      } = update;\n\n      global = updateThreadInfos(global, threadInfoUpdates);\n      threadInfoUpdates.forEach((threadInfo) => {\n        const { chatId, threadId } = threadInfo;\n        if (!chatId || !threadId) return;\n\n        const chat = selectChat(global, chatId);\n        const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n        if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: threadId });\n        }\n\n        // Update reply thread last read message id if already read in main thread\n        if (!chat?.isForum) {\n          const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n          const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n          if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n            global = updateThreadInfo(global, chatId, threadId, {\n              lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n            });\n          }\n        }\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? {};\n\n  if (threadInfo && threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<number>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) return;\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiVideo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, partition, split, unique,\n} from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getMessageOriginalId,\n  getUserFullName,\n  isChatChannel,\n  isDeletedUser,\n  isLocalMessageId,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeerStory,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global,\n        actions,\n        areAllLocal,\n        isOutlying,\n        isBudgetPreload,\n        chat,\n        threadId!,\n        direction,\n        offsetId,\n        onLoaded,\n        tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const draftReplyInfo = !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    userId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n          wasDrafted: Boolean(draft),\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: translate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: number; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const isStoriesViewerOpen = Boolean(selectTabState(global, tabId).storyViewer.peerId);\n\n  if (isDeepLink(urlWithProtocol)) {\n    if (isStoriesViewerOpen) {\n      actions.closeStoryViewer({ tabId });\n    }\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      if (isStoriesViewerOpen) {\n        actions.closeStoryViewer({ tabId });\n      }\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    });\n\n    global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport * as langProvider from '../../../util/langProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic, ApiUser,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport { DeepLinkType, isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountChats, accountUsers, globalChats, globalUsers,\n      } = result;\n\n      if (accountChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...accountChats, ...globalChats], 'id'));\n      }\n\n      if (accountUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...accountUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: accountChats.map(({ id }) => id),\n          userIds: accountChats.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === DeepLinkType.PublicMessageLink) {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === DeepLinkType.PrivateMessageLink) {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type { ApiChat } from '../../../api/types';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n} from '../../selectors';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    threadId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          currentChat,\n          activeThreadId,\n          activeThreadId !== MAIN_THREAD_ID ? activeThreadId : undefined,\n        ),\n        activeThreadId !== MAIN_THREAD_ID ? callApi('fetchDiscussionMessage', {\n          chat: currentChat,\n          messageId: activeThreadId,\n        }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (resultDiscussion) {\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          resultDiscussion.threadInfoUpdates.forEach((update) => {\n            global = updateThreadInfo(global, currentChatId, activeThreadId, update);\n          });\n        }\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, offsetId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: offsetId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addUsers } from '../../reducers';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectPeer, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatarHash\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  setGlobal(global);\n  if (withPhotos || (user.photos?.length && hasChangedPhoto)) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { accountUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (accountUsers.length) {\n      global = addUsers(global, buildCollectionByKey(accountUsers, 'id'));\n      localUserIds = accountUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload!;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { GlobalState, TabArgs } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport { addChats, addUsers, removeBlockedUser } from '../../reducers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot, selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectDraft,\n  selectIsTrustedBot, selectMessageReplyInfo, selectSendAs, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyInfo,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  const result = await loadAttachBots(global, hash);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: { hash: result?.hash },\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","import type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { callApi } from '../../../api/gramjs';\nimport { getStripeError, isChatChannel } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers, closeInvoice,\n  setInvoiceInfo, setPaymentForm,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo, setStripeCardInfo,\n  updatePayment,\n  updateShippingOptions,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectPaymentFormId,\n  selectPaymentInputInvoice, selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatChannel(chat)) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = addChats(global, buildCollectionByKey(myBoosts.chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(myBoosts.users, 'id'));\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostsListResult, boostStatusResult] = await Promise.all([\n    callApi('fetchBoostsList', { chat }),\n    callApi('fetchBoostsStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostsListResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = addUsers(global, buildCollectionByKey(boostsListResult.users, 'id'));\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      boosters: boostsListResult.boosters,\n      boosterIds: boostsListResult.boosterIds,\n      count: boostsListResult.count,\n      nextOffset: boostsListResult.nextOffset,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostsList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      boosters: {\n        ...tabState.boostStatistics.boosters,\n        ...result.boosters,\n      },\n      boosterIds: unique([...tabState.boostStatistics.boosterIds || [], ...result.boosterIds]),\n      count: result.count,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  let tabState = selectTabState(global, tabId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n\n  const newStatusResult = await callApi('fetchBoostsStatus', {\n    chat,\n  });\n\n  if (!newStatusResult) {\n    return;\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal?.boostStatus) return;\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      boostStatus: newStatusResult,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getDocumentMediaHash,\n  getMessageKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addUsers,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextRate) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offsetRate: stats?.nextRate,\n  });\n  const {\n    forwards,\n    nextRate,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextRate,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffsetId) return;\n\n  const {\n    publicForwards,\n    users,\n    chats,\n    count,\n    nextOffsetId,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offsetId: stats.nextOffsetId,\n  }) || {};\n\n  global = getGlobal();\n\n  if (chats) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffsetId,\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, PREVIEW_AVATAR_COUNT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { translate } from '../../../util/langProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChats,\n  addStories,\n  addStoriesForPeer,\n  addUsers,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerPinnedStory,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isPinned) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryPinned', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isPinned } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isPinned : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isPinned });\n  global = updatePeerPinnedStory(global, peerId, storyId, isPinned);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryPinned', { peer, storyId, isPinned });\n  if (!result) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isPinned: currentIsPinned });\n    global = updatePeerPinnedStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerPinnedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerPinnedStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isPreload = 'isPreload' in payload;\n  const {\n    offset, areReactionsFirst, areJustContacts, query, limit,\n  } = isPreload ? {\n    offset: undefined,\n    areReactionsFirst: undefined,\n    areJustContacts: undefined,\n    query: undefined,\n    limit: PREVIEW_AVATAR_COUNT,\n  } : payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (!isPreload) {\n    global = updateStoryViewsLoading(global, true, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const viewsById = buildCollectionByKey(result.views, 'userId');\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  if (!isPreload) global = updateStoryViews(global, storyId, viewsById, result.nextOffset, tabId);\n\n  if (isPreload && result.views?.length) {\n    const recentViewerIds = result.views.map((view) => view.userId);\n    global = updatePeerStoryViews(global, peerId, storyId, {\n      recentViewerIds,\n      viewsCount: result.viewsCount,\n      reactionsCount: result.reactionsCount,\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('reportStory', {\n    peer,\n    storyId,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { buildChatThreadKey } from '../../helpers';\nimport { addActionHandler } from '../../index';\nimport {\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n  updateLocalTextSearch,\n} from '../../reducers';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  FAST_SMOOTH_MAX_DURATION,\n  RELEASE_DATETIME,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMessageMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({ replyToMsgId: messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  return APP_VERSION_REGEX.test(sanitizedRemoteVersion) && sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_PLAYBACK_RATE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: (\n        playbackRate\n        || tabState.mediaViewer.playbackRate\n        || global.mediaViewer.lastPlaybackRate\n        || DEFAULT_PLAYBACK_RATE\n      ),\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n    },\n  }, tabId);\n});\n","import type { ApiStoryView } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addChats, addStoriesForPeer, addUsers } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedPeerIds: { active, archived } } = global.stories;\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const orderedPeerIds = (peer.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const peerStoryIds = peerStories[storySourceProp] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (selectPeerStories(global, previousPeerId)?.orderedIds.length || 1) - 1;\n  }\n\n  const previousStoryId = selectPeerStories(global, previousPeerId)?.[storySourceProp]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive,\n  } = tabState.storyViewer;\n  if (isSingleStory) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  const { orderedPeerIds: { active, archived } } = global.stories;\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const orderedPeerIds = (peer.areStoriesHidden ? archived : active) ?? [];\n  const storySourceProp = isArchive ? 'archiveIds' : isPrivate ? 'pinnedIds' : 'orderedIds';\n  const peerStoryIds = peerStories[storySourceProp] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = selectPeerStories(global, nextPeerId)?.[storySourceProp]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.translate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.translate(message),\n    actionText: langProvider.translate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        viewsById: {},\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n\n  if (!viewModal?.viewsById?.[userId]) return global;\n\n  const updatedViewsById: Record<string, ApiStoryView> = {\n    ...viewModal.viewsById,\n    [userId]: {\n      ...viewModal.viewsById[userId],\n      isUserBlocked: isUserBlocked || undefined,\n      areStoriesBlocked: areStoriesBlocked || undefined,\n    },\n  };\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        viewsById: updatedViewsById,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      const localChat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact, replaceUserStatuses, updatePeerStoriesHidden, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { selectIsCurrentUserPremium, selectUser, selectUserFullInfo } from '../../selectors';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addStoriesForPeer,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updateStealthMode,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots({ hash: global.attachMenu.hash });\n      break;\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/langProvider';\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { addActionHandler } from '../../index';\nimport { closeInvoice } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '');\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n        storyRibbonClassNames,\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useLang';\n\nimport useBrowserOnline from './useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {lang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious2 from '../../hooks/usePrevious2';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious2(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import { useRef } from '../lib/teact/teact';\n\n// This is not render-dependent and will never allow previous to match current\nexport default function usePrevious2<T extends any>(current: T) {\n  const prevRef = useRef<T>();\n  const lastRef = useRef<T>();\n\n  if (lastRef.current !== current) {\n    prevRef.current = lastRef.current;\n  }\n\n  lastRef.current = current;\n\n  return prevRef.current;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useLang from './useLang';\nimport useMedia from './useMedia';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments || (message.content.text && !currentAlbum.mainMessage.hasComments)) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.senderUserId !== nextMessage.forwardInfo?.senderUserId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getPeerIdDividend } from '../../global/helpers';\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport StickerView from '../common/StickerView';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  return (\n    <div className=\"ContactGreeting\">\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div ref={containerRef} className=\"sticker\" onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getPeerIdDividend(userId) + getPeerIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\",\"image\":\"ZAL3vluMFRM8wd30wuzL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { DPR } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.image}\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/useBackgroundMode';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SP9ygrz63JLi4xNqwoVE\",\"title\":\"Sw5A_K0ZxEX96Ui9lFCb\",\"gift\":\"Mtiki0kCz4W4kUdV8FK0\",\"count\":\"SgtGraFRcPrLtRnxw3gt\",\"section\":\"phMVInVgl42PoTFQfGqI\",\"description\":\"Vb0eOjCRZWXBFSaUyvx2\",\"channels\":\"_3mJaV4k42iv1TfpFUHbF\",\"channel\":\"RfJFPbFLakyaHV8YKBWt\",\"button\":\"NFt5nDqi5BykWcvrsjtU\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveawayInfo, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName, isApiPeerChat } from '../../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useLang();\n  const {\n    months, quantity, channelIds, untilDate, countries,\n  } = message.content.giveaway!;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [countries, lang.code]);\n\n  const handleChannelClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResults = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const duration = lang('Chat.Giveaway.Info.Months', months);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = channelIds.length ? channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResults ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, duration], undefined, quantity);\n\n    let secondKey = '';\n    if (isResults) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResults && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let lastParagraph = '';\n    if (isResults && giveawayInfo.isRefunded) {\n      lastParagraph = lang('BoostingGiveawayCanceledByPayment');\n    } else if (isResults) {\n      lastParagraph = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        <p>\n          {renderText(lastParagraph, ['simple_markdown'])}\n        </p>\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.gift}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={giftSticker}\n          play={canPlayAnimatedEmojis && hasEnded}\n          noLoop\n          nonInteractive\n          size={GIFT_STICKER_SIZE}\n        />\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      <div className={styles.section}>\n        <strong className={styles.title}>\n          {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n        </strong>\n        <p className={styles.description}>\n          {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n          <br />\n          {renderText(lang(\n            'ActionGiftPremiumSubtitle',\n            lang('Chat.Giveaway.Info.Months', months),\n          ), ['simple_markdown'])}\n        </p>\n      </div>\n      <div className={styles.section}>\n        <strong className={styles.title}>\n          {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n        </strong>\n        <p className={styles.description}>\n          {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n        </p>\n        <div className={styles.channels}>\n          {channelIds.map((channelId) => (\n            <PickerSelectedItem\n              peerId={channelId}\n              forceShowSelf\n              fluid\n              className={styles.channel}\n              clickArg={channelId}\n              onClick={handleChannelClick}\n            />\n          ))}\n        </div>\n        {Boolean(countries?.length) && (\n          <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n        )}\n      </div>\n      <div className={styles.section}>\n        <strong className={styles.title}>\n          {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n        </strong>\n        <p className={styles.description}>\n          {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n        </p>\n      </div>\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const duration = message.content.giveaway!.months;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, message.content.giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    return {\n      chat,\n      sender,\n      giftSticker: selectGiftStickerForDuration(global, duration),\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLang from '../../../hooks/useLang';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useInterval from '../../../hooks/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiReactionCount,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getMessageKey, isReactionChosen, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from '../../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../../ui/Button';\n\nimport './Reactions.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  withRecentReactors?: boolean;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  withRecentReactors,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as ApiPeer[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen', 'message-reaction')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        className=\"reaction-animated-emoji\"\n        containerId={getMessageKey(message)}\n        reaction={reaction.reaction}\n        size={REACTION_SIZE}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport safePlay from '../../../util/safePlay';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\n\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useSignal from '../../../hooks/useSignal';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiReaction,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageKey,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/Icon';\nimport MessageText from '../../common/MessageText';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiUser;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withStickerEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withStickerEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  onPinnedIntersectionChange,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(message.content.storyData && !message.content.storyData.isMention);\n  const isStoryMention = message.content.storyData?.isMention;\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || message.content.storyData) ? originSender : messageSender;\n  const hasText = hasMessageText(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n    replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasText ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || hasActiveStickerEffect) && 'has-active-reaction',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const {\n    text, photo, video, audio,\n    voice, document, sticker, contact,\n    poll, webPage, invoice, location,\n    action, game, storyData, giveaway,\n  } = getMessageContent(message);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { userId: storyReplyUserId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || storyData || (location?.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyUserId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded, Boolean(focusedQuote),\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        messageOrStory={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {giveaway && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            story={webPageStory}\n            isConnected={isConnected}\n            noUserColors={isOwn}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {asForwarded && (\n              <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n            )}\n            {storyData && <Icon name=\"play-story\" />}\n            {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className={buildClassName(\n                'message-action-button', isLoadingComments && 'message-action-button-shown',\n              )}\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { userId: storyReplyUserId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectReplySender(global, replyMessage) : forwardHeader && !isRepliesChat\n      ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isRepliesChat && replyMessageChat && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyUserId\n      ? selectPeerStory(global, storyReplyUserId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyUserId ? selectUser(global, storyReplyUserId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer, quote: focusedQuote,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.mainMessage.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IAlbum } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiPeer,\n  senderPeer?: ApiPeer,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n  story?: ApiStory,\n  isReplyPrivate?: boolean,\n  isRepliesChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId,\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice, storyData, giveaway,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\n\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { MouseEvent as ReactMouseEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiSponsoredMessage, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  peer?: ApiChat;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  peer,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    requestAppWebView,\n    startBot,\n    focusMessage,\n    openUrl,\n    openPremiumModal,\n    clickSponsoredMessage,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n  const withAvatar = Boolean(message?.isAvatarShown && peer);\n  const isBotApp = Boolean(message?.botApp);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!peer) {\n      return;\n    }\n\n    openChat({ id: peer.id });\n  });\n\n  const handleLinkClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n\n    clickSponsoredMessage({ chatId });\n    openUrl({ url: message!.webPage!.url, shouldSkipModal: true });\n\n    return false;\n  });\n\n  const handleCloseSponsoredMessage = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ chatId });\n\n    if (isBotApp) {\n      const { shortName } = message.botApp!;\n      const theme = extractCurrentThemeParams();\n\n      requestAppWebView({\n        botId: message.chatId!,\n        appName: shortName,\n        startApp: message.startParam,\n        theme,\n      });\n    } else if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  function renderAvatar() {\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={peer}\n        onClick={peer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderPhoto() {\n    if (message?.botApp) {\n      if (!message.botApp.photo) return undefined;\n\n      return (\n        <Avatar\n          size=\"large\"\n          peer={bot}\n          photo={message.botApp.photo}\n          className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n        />\n      );\n    }\n\n    if (channel) {\n      return (\n        <Avatar\n          size=\"large\"\n          peer={channel}\n          className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderContent() {\n    if (message?.webPage) {\n      return (\n        <>\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <div className=\"message-title message-peer\" dir=\"ltr\">\n              {renderText(message.webPage.siteName)}\n            </div>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message!.text.text,\n                entities: message!.text.entities,\n              })}\n            </span>\n          </div>\n\n          <Button\n            className=\"SponsoredMessage__button\"\n            size=\"tiny\"\n            color=\"translucent\"\n            isRectangular\n            onClick={handleLinkClick}\n          >\n            <i className=\"icon icon-arrow-right\" aria-hidden />\n            {lang('OpenLink')}\n          </Button>\n        </>\n      );\n    }\n\n    const buttonText = message?.buttonText ?? (\n      isBotApp\n        ? lang('BotWebAppInstantViewOpen')\n        : (message!.isBot\n          ? lang('Conversation.ViewBot')\n          : lang(message!.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel')\n        ));\n    const title = isBotApp\n      ? message!.botApp!.title\n      : (bot\n        ? renderText(getUserFullName(bot) || '')\n        : (channel ? renderText(message!.chatInviteTitle || getChatTitle(lang, channel) || '') : '')\n      );\n\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{title}</div>\n        <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n          <span className=\"text-content-inner\" dir=\"auto\">\n            {renderTextWithEntities({\n              text: message!.text.text,\n              entities: message!.text.entities,\n            })}\n          </span>\n        </div>\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  const contentClassName = buildClassName(\n    'message-content has-shadow has-solid-background has-appendix',\n    getPeerColorClass(bot || peer || channel),\n  );\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className={buildClassName('SponsoredMessage Message open', withAvatar && 'with-avatar')}\n    >\n      {withAvatar && renderAvatar()}\n      <div\n        className={contentClassName}\n        dir=\"auto\"\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <div className=\"content-inner\" dir=\"auto\">\n          {renderPhoto()}\n          <span className=\"message-title message-type\">\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n          </span>\n          {renderContent()}\n        </div>\n        <MessageAppendix />\n        <Button\n          className=\"message-action-button\"\n          color=\"translucent-white\"\n          round\n          size=\"tiny\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseSponsoredMessage}\n        >\n          <i className=\"icon icon-close\" aria-hidden />\n        </Button>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const peer = message?.chatId ? selectChat(global, message?.chatId) : undefined;\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      peer,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getMessageHtmlId,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isLocalMessageId,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport { isBackgroundModeActive } from '../../hooks/useBackgroundMode';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isSynced, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? threadId : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions?.results.length);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadId && messagesById[threadId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useSignal from '../../../hooks/useSignal';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getMessageKey,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const {\n    handleClick: handleHeaderClick,\n    handleMouseDown: handleHeaderMouseDown,\n  } = useFastClick((e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => {\n    if (e.type === 'mousedown' && (e.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = threadId;\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MobileSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo } from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MobileSearch from './MobileSearch.async';\nimport ReactorListModal from './ReactorListModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n  canUnblock,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isMessageThread);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? threadId : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n      canUnblock,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"draggable\":\"kIdhoMn_mbGnJc1YZpIK\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { geoPoint } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !geoPoint);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(\n          tabType === 'members'\n            ? ProfileState.MemberList\n            : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia),\n        );\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : (tabType === 'stories' ? ProfileState.StoryList : ProfileState.SharedMedia);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  loadStories: AnyToVoidFunction,\n  loadStoriesArchive: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n  storyIds?: number[],\n  archiveStoryIds?: number[],\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, storyIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ox1yTGx4NBVANs7q4Ste\",\"wrapper\":\"g34egFNlUSZiOR5Y9K9A\",\"media\":\"gyVqf8gGVz_cu2HCjifT\",\"expiredIcon\":\"eg5740UDe7iAc7dGlyex\",\"contextMenu\":\"rhvyma7da0HVZh3rYFnr\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isProtected?: boolean;\n  isArchive?: boolean;\n}\n\nfunction MediaStory({ story, isProtected, isArchive }: OwnProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryPinned,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handlePinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleUnpinClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryPinned({ peerId, storyId: story.id, isPinned: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <i className={buildClassName(styles.expiredIcon, 'icon icon-story-expired')} aria-hidden />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && <MenuItem icon=\"pin\" onClick={handlePinClick}>{lang('StoryList.SaveToProfile')}</MenuItem>}\n          {!isArchive && (\n            <MenuItem icon=\"unpin\" onClick={handleUnpinClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(MediaStory);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectPeerFullInfo,\n  selectPeerStories,\n  selectTabState,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Document from '../common/Document';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport MediaStory from '../story/MediaStory';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n    loadPeerPinnedStories,\n    loadStoriesArchive,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasStoriesTab ? [{ type: 'stories', title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && currentUserId === chatId ? [{ type: 'storiesArchive', title: 'ProfileStoriesArchive' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [chatId, currentUserId, hasCommonChatsTab, hasMembersTab, hasStoriesTab, isChannel, topicId]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerPinnedStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    handleLoadPeerStories,\n    handleLoadStoriesArchive,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n    storyIds,\n    archiveStoryIds,\n  );\n  const isFirstTab = (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id) => storyByIds?.[id] && (\n            <MediaStory\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isProtected={isChatProtected}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    const peer = user || chat;\n    const peerFullInfo = selectPeerFullInfo(global, chatId);\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories));\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport { debounce } from '../../util/schedulers';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3>{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3>{lang('Boosts')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3>{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.StoryList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || contentKey === HeaderContent.StoryStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './RightSearch';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZtWHQyTLrCmeNE53Hvd9\",\"noResults\":\"cuYFx3gorhlWaUcBJ0Aj\",\"section-header\":\"IPPwOeRGhyQDYbJsBsdb\",\"sectionHeader\":\"IPPwOeRGhyQDYbJsBsdb\",\"section\":\"HMySq6RoeqoKdRuUAW7z\",\"user\":\"hben8jCvRhcyebFweulH\",\"stats\":\"dBHHnaU4CZ9TELAykZyA\",\"down\":\"nlFBjRF9YGIjCHGrt2cp\",\"loadMoreSpinner\":\"QBMARpR7dewZog5QmOkh\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoostStatistics } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dateFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n}: StateProps) => {\n  const { openChat, loadMoreBoosters, closeBoostStatistics } = getActions();\n  const lang = useLang();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics?.count) return undefined;\n    const loadedCount = boostStatistics.boosterIds?.length || 0;\n    const totalCount = boostStatistics.count;\n    return totalCount - loadedCount;\n  }, [boostStatistics]);\n\n  const handleBoosterClick = useLastCallback((userId: string) => {\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreBoosters();\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={boosts.toString()}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          <div className={styles.section}>\n            <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('Boosters')}\n            </h4>\n            {!boostStatistics.boosterIds?.length && (\n              <div className={styles.noResults}>{lang('NoBoostersHint')}</div>\n            )}\n            {boostStatistics.boosterIds?.map((userId) => (\n              <ListItem\n                key={userId}\n                className=\"chat-item-clickable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleBoosterClick(userId)}\n              >\n                <PrivateChatInfo\n                  className={styles.user}\n                  forceShowSelf\n                  userId={userId}\n                  status={lang('BoostExpireOn', formatDateAtTime(lang, boostStatistics.boosters![userId] * 1000))}\n                />\n              </ListItem>\n            ))}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount)}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n\n    return {\n      boostStatistics,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  selectAreActiveChatsLoaded, selectChat, selectCurrentMessageList, selectRightColumnContentKey, selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport RightSearch from './RightSearch.async';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations, nextProfileTab } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../global/selectors';\nimport buildStyle from '../../util/buildStyle';\nimport { pick } from '../../util/iteratees';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { GlobalState, TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport { compact } from '../../util/iteratees';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat } from '../../global/selectors';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { userIds, chatId } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !(userIds && chatId));\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import '../../global/actions/all';\n\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiGeoPoint,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AttachBotInstallModal from '../modals/attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from '../modals/boost/BoostModal.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\nimport GiftCodeModal from '../modals/giftcode/GiftCodeModal.async';\nimport MapModal from '../modals/map/MapModal.async';\nimport UrlAuthModal from '../modals/urlAuth/UrlAuthModal.async';\nimport WebAppModal from '../modals/webApp/WebAppModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport InviteViaLinkModal from './InviteViaLinkModal.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  mapModalGeoPoint?: ApiGeoPoint;\n  mapModalZoom?: number;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  boostModal?: TabState['boostModal'];\n  giftCodeModal?: TabState['giftCodeModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  inviteViaLinkModal?: TabState['inviteViaLinkModal'];\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  currentUserId,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  mapModalGeoPoint,\n  mapModalZoom,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  giftCodeModal,\n  boostModal,\n  noRightColumnAnimation,\n  isSynced,\n  inviteViaLinkModal,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadPremiumSetStickers,\n    loadAuthorizations,\n    loadPeerColors,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n      loadAuthorizations();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n      loadPremiumSetStickers();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <MapModal geoPoint={mapModalGeoPoint} zoom={mapModalZoom} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <BoostModal info={boostModal} />\n      <GiftCodeModal modal={giftCodeModal} currentUserId={currentUserId} />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <InviteViaLinkModal userIds={inviteViaLinkModal?.restrictedUserIds} chatId={inviteViaLinkModal?.chatId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      mapModal,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      inviteViaLinkModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      mapModalGeoPoint: mapModal?.point,\n      mapModalZoom: mapModal?.zoom,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      boostModal,\n      giftCodeModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      inviteViaLinkModal,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["DeepLinkType","ELIGIBLE_HOSTNAMES","Set","isDeepLink","link","Boolean","match","RE_TME_LINK","RE_TG_LINK","buildShareLink","params","url","text","type","ShareLink","buildPublicMessageLink","messageId","threadId","commentId","username","isSingle","mediaTimestamp","isUsernameValid","isNumber","PublicMessageLink","Number","undefined","buildPrivateMessageLink","channelId","PrivateMessageLink","buildChatFolderLink","slug","ChatFolderLink","s","test","getPathParams","pathname","split","filter","map","decodeURI","getQueryParams","Object","fromEntries","searchParams","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","updateReactionCount","recentReactions","length","isOwn","peerId","currentUserId","forEach","reaction","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","threadUpdate","lastMessageId","updateListedAndViewportIds","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","updateListedIds","values","byTabId","tabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","add","clearMessageTranslation","topics","deleteTopic","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","unique","addActionHandler","shouldForceReply","wasDrafted","storyReplyInfo","getStoryReplyInfo","isForumTopic","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","selectIsChatListed","loadTopChats","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","keys","selectChatScheduledMessages","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","threadInfoUpdates","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","r","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","findIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","limit","users","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","progressCallback","attachment","progress","messageLocalId","set","IS_IOS","rafPromise","delete","payload","shouldForceRender","onError","isRestricted","viewportIds","isLocalMessageId","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","scheduledAt","contentToBeScheduled","selectDraft","draftReplyInfo","userId","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userFullName","getUserFullName","showNotification","translate","join","messageListType","selectEditingMessage","setEditingId","getMessageOriginalId","cancelApiProgress","apiUpdate","currentDraft","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","connectionState","isUserBot","isUnread","minId","readCount","count","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","isStoriesViewerOpen","storyViewer","closeStoryViewer","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","selectForwardsCanBeSentToChat","isModalShown","openThread","closeMediaViewer","exitMessageSelectMode","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","Array","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","messageLink","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","startsWith","queryParams","pathParams","len","method","every","Unknown","getHttpDeepLinkType","single","comment","t","handleHttpLink","domain","post","channel","getTgDeepLinkType","handleTgLink","replace","err","tryParseDeepLink","localChat","selectChatByUsername","getChatGroupOrChannelMessage","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","isChatGroup","localMessage","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","accountChats","accountUsers","globalChats","globalUsers","localResults","chatIds","globalResults","timestampPlusDay","resultsByType","foundIds","currentSearch","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","currentResults","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","activeThreadId","currentChat","resultDiscussion","newCurrentChatId","currentChatMessages","topicLastMessages","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","pick","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","isFetchingDifference","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","hasChangedPhoto","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","updateUser","updateUserFullInfo","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","selectPeer","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","runDebouncedForSearch","handleUrlAuthResult","urlAuth","bot","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","Checkout","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","Shipping","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","appName","startApp","isWriteAllowed","botApp","isInactive","app","closeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","attachMenu","bots","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","isFromConfirm","shouldDisplayDisclaimer","isDisclaimerNeeded","requestedAttachBotInstall","botUser","markBotTrusted","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","k","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","closeReactionPicker","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostsListResult","boostStatusResult","boosters","boosterIds","isLoadingBoosters","slots","newStatusResult","giftCodeModal","info","requestConfetti","closeGiftCodeModal","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","messageKey","getMessageKey","selectPerformanceSettingsValue","stopActiveReaction","containerId","startActiveReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","unread","topReactions","isGroup","dcId","statisticsDcId","stats","updateStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","name","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerPinnedStory","lastReadStoryId","storyIds","isPreload","areReactionsFirst","areJustContacts","PREVIEW_AVATAR_COUNT","updateStoryViewsLoading","viewsById","updateStoryViews","recentViewerIds","view","updatePeerStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentMessageId","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","then","remoteVersion","appVersion","sanitizedRemoteVersion","trim","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","DEFAULT_PLAYBACK_RATE","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","timeoutUntil","reactionPicker","sendAsMessage","isSinglePeer","isSingleStory","isArchive","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","fetchChatByUsername","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","archived","areStoriesHidden","storySourceProp","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","copyTextToClipboard","actionText","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViewsById","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","orderedPinnedTopicIds","isForumAsMessages","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","localUser","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","key","rules","setConfirmPaymentUrl","ConfirmPayment","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","icon","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","shouldRender","shouldRenderStoryRibbon","transitionClassNames","storyRibbonClassNames","isStoryRibbonClosing","useShowTransition","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","ref","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","size","animationLevel","attachBots","selectTheme","canInstall","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","isForSideMenu","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","prevRef","lastRef","usePrevious2","renderContent","currentScreen","onScreenSelect","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","subtitle","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","SeenByModal","UnpinAllMessagesModal","GiftPremiumModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","shouldShowCount","mentionsCount","FloatingActionButtons","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","elementRef","hasUnreadReactions","hasUnreadMentions","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","mainMessage","albumId","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","inlineButtons","senderUserId","dividend","getPeerIdDividend","lastUnreadMessageId","ContactGreeting","loadGreetingStickers","containerRef","handleStickerSelect","StickerView","chatBot","isLoadingBotInfo","chatBotFullInfo","MessageListBotInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","isBotInfoEmpty","style","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","buildStyle","Skeleton","INTERSECTION_THROTTLE_FOR_MEDIA","AlbumRectPart","None","Top","Bottom","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","EmbeddedStory","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","TopicChip","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","withSelectControl","WrappedComponent","ownProps","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","Album","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","AnimatedCustomEmoji","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","AnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","CommentButton","isCustomShape","shouldRenderLoading","useAsyncRendering","originMessageId","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","countryList","phoneCodes","phoneCodeList","Contact","isRegistered","formatPhoneNumberWithCode","Game","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","canPlayAnimatedEmojis","Giveaway","isLoadingInfo","giveawayInfo","setGiveawayInfo","quantity","untilDate","countries","hasEnded","translatedNames","DisplayNames","countryCode","isoToEmoji","of","handleChannelClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","noLoop","nonInteractive","forceShowSelf","formatDateTimeToString","ConfirmDialog","isOnlyConfirm","confirmHandler","isResults","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstParagraph","secondKey","secondParagraph","activatedCount","lastParagraph","isRefunded","isWinner","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","InlineButtons","renderIcon","Invoice","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","forceAspectRatio","InvoiceMediaPreview","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","scale","PinSvg","viewBox","cx","cy","d","Location","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePrevious","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","requestMutation","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","MessageMeta","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","MessagePhoneCall","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","getPercentage","total","toFixed","PollOption","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","usersById","Poll","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","isText","REACTION_SIZE","ReactionButton","withRecentReactors","recentReactors","recentReaction","isReactionChosen","ReactionAnimatedEmoji","AvatarList","Reactions","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","RoundVideo","playerRef","circleRef","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","downloadProgress","isPlayerReady","markPlayerReady","noThumb","getMessageMediaThumbDataUri","thumbRef","thumbClassNames","useMediaTransition","isTransferring","wasLoadDisabled","shouldSpinnerRender","spinnerClassNames","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","currentTime","shouldPlay","stopPlaying","capturePlaying","isAllowed","paused","stopCurrentAudio","handleTimeUpdate","onEnded","onTimeUpdate","onReady","ProgressSpinner","Sticker","observeIntersectionForPlaying","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","AnimatedSticker","tgsUrl","isLowPriority","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","selectIsChatWithSelf","isRepliesChat","isChatWithRepliesBot","webPageStoryData","webPage","webPageStory","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyToPeerId","replyFrom","storyReplyUserId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectReplySender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","selectIsDownloading","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withStickerEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","Message","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onPinnedIntersectionChange","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","useOnIntersect","contextMenuPosition","contextMenuTarget","noAppearanceAnimation","markShown","viewportPinnedIdsToRemove","isUnmount","isOwnMessage","hasMessageReply","isReplyToMessage","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","isStoryMention","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasText","hasMessageText","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","replyToTopId","isQuote","quoteText","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","albumMessageId","ScheduledAlbum","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasActionButton","isGeoLiveActive","peerColorClass","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","postAuthorTitle","requestForcedReflow","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","ReactionStaticEmoji","renderReactionsAndMeta","meta","renderSenderName","senderEmojiStatus","senderIsPremium","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","EmbeddedMessage","senderChat","forwardSender","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","DotAnimation","WebPage","onCancelMediaTransfer","MessageAppendix","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","SponsoredMessage","viewSponsoredMessage","openChatByInvite","requestAppWebView","startBot","clickSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","isAvatarShown","isBotApp","handleLinkClick","handleCloseSponsoredMessage","chatInviteHash","renderPhoto","isRecommended","siteName","isRectangular","chatInviteTitle","onAboutAds","MessageListContent","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","observeIntersectionForReading","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","top","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","isSelectModeActive","noMessageSendingAnimation","isServiceNotificationsChat","MessageList","hasTools","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","storyDataList","storiesByPeerIds","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","backgroundColor","MessageSelectToolbar","ChatReportPanel","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","HeaderPinnedMessage","onUnpinMessage","onAllPinnedClick","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","MiddleHeader","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderActions","canExpandActions","MobileSearch","ReactorListModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","onUnpin","teactOrderKey","AttachBotInstallModal","BoostModal","ChatlistModal","modal","GiftCodeModal","MapModal","UrlAuthModal","WebAppModal","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","Picker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","loadPeerSkippedStories","toggleStoryPinned","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","isOut","transformOriginY","menuStyle","useMenuPosition","preventMessageInputBlurWithBubbling","handlePinClick","handleUnpinClick","MediaAreaOverlay","TABS","mediaSearchType","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","hasCommonChatsTab","resolvedUserId","peerFullInfo","selectPeerFullInfo","hasStoriesTab","hasPinnedStories","storyByIds","archiveStoryIds","archiveIds","commonChatIds","Profile","profileState","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","loadPeerPinnedStories","loadStoriesArchive","deletingUserId","setDeletingUserId","initialTab","setActiveTab","renderingActiveTab","tabType","handleLoadPeerStories","handleLoadStoriesArchive","resultType","noProfileInfo","searchMessages","loadStories","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","prevTabType","tabsEl","ProfileState","MemberList","StoryList","SharedMedia","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","big","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","RightHeader","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStoryStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","Search","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","RightSearch","loadMoreBoosters","closeBoostStatistics","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","statsOverview","level","premiumSubscribers","boostersToLoadCount","loadedCount","handleBoosterClick","section","PremiumProgress","leftText","rightText","floatingBadgeText","floatingBadgeIcon","StatisticsOverview","sectionHeader","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","prevChatId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","CONFETTI_COLORS","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","beginPath","ellipse","prevConfettiTime","hideTimeout","DeleteFolderDialog","DialogsAsync","Dialogs","processedMessages","downloadedMessages","DownloadManager","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","DownloadUrl","baseURI","filename","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","event","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","InviteViaLinkModal","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","PremiumMainModal","SafeLinkModal","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","mapModalGeoPoint","mapModalZoom","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPremiumSetStickers","loadPeerColors","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","stickerSetShortName","UnreadCount","restrictedUserIds","passcodeSettings","LockScreen","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}